
boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d30c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  0800d4dc  0800d4dc  0001d4dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7e4  0800d7e4  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800d7e4  0800d7e4  0001d7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7ec  0800d7ec  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7ec  0800d7ec  0001d7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7f0  0800d7f0  0001d7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800d7f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010c5c  20000094  0800d888  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  20010cf0  0800d888  00020cf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c918  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cae  00000000  00000000  0003c9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  00041690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  000429d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c0c  00000000  00000000  00043b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e0a8  00000000  00000000  0006b724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0894  00000000  00000000  000897cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015a060  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054bc  00000000  00000000  0015a0b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d4c4 	.word	0x0800d4c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	0800d4c4 	.word	0x0800d4c4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	4b18      	ldr	r3, [pc, #96]	; (8000630 <MX_GPIO_Init+0x7c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a17      	ldr	r2, [pc, #92]	; (8000630 <MX_GPIO_Init+0x7c>)
 80005d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b15      	ldr	r3, [pc, #84]	; (8000630 <MX_GPIO_Init+0x7c>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_GPIO_Init+0x7c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a10      	ldr	r2, [pc, #64]	; (8000630 <MX_GPIO_Init+0x7c>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_GPIO_Init+0x7c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2102      	movs	r1, #2
 8000606:	480b      	ldr	r0, [pc, #44]	; (8000634 <MX_GPIO_Init+0x80>)
 8000608:	f001 f9fa 	bl	8001a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800060c:	2302      	movs	r3, #2
 800060e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000610:	2301      	movs	r3, #1
 8000612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	4619      	mov	r1, r3
 8000622:	4804      	ldr	r0, [pc, #16]	; (8000634 <MX_GPIO_Init+0x80>)
 8000624:	f000 ff64 	bl	80014f0 <HAL_GPIO_Init>

}
 8000628:	bf00      	nop
 800062a:	3720      	adds	r7, #32
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40023800 	.word	0x40023800
 8000634:	40020000 	.word	0x40020000

08000638 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xffff);
 8000640:	1d39      	adds	r1, r7, #4
 8000642:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000646:	2201      	movs	r2, #1
 8000648:	4803      	ldr	r0, [pc, #12]	; (8000658 <__io_putchar+0x20>)
 800064a:	f003 ff44 	bl	80044d6 <HAL_UART_Transmit>
	return ch;
 800064e:	687b      	ldr	r3, [r7, #4]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200000b8 	.word	0x200000b8

0800065c <init>:
/* USER CODE BEGIN 0 */
#define BOOTLODER_CHEK_ADDR    (*((uint32_t *)0x2001FFFC))
#define BOOTLODER_CHEK_VAL     (0xDEADBEEF)
#define BOOTLODER_Into_ADDR    (*((uint32_t *) (0x1FFF0004)))

void init(){
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  static void(*bootloaderFunc)(void);
  if (BOOTLODER_CHEK_ADDR == BOOTLODER_CHEK_VAL)
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <init+0x28>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a08      	ldr	r2, [pc, #32]	; (8000688 <init+0x2c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d10a      	bne.n	8000680 <init+0x24>
  {
     BOOTLODER_CHEK_ADDR = 0;
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <init+0x28>)
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
     bootloaderFunc = (void (*)(void)) BOOTLODER_Into_ADDR;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <init+0x30>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	461a      	mov	r2, r3
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <init+0x34>)
 8000678:	601a      	str	r2, [r3, #0]
     bootloaderFunc();
 800067a:	4b05      	ldr	r3, [pc, #20]	; (8000690 <init+0x34>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4798      	blx	r3
  }
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	2001fffc 	.word	0x2001fffc
 8000688:	deadbeef 	.word	0xdeadbeef
 800068c:	1fff0004 	.word	0x1fff0004
 8000690:	200000b0 	.word	0x200000b0

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	init();
 8000698:	f7ff ffe0 	bl	800065c <init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069c:	f000 fa5a 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a0:	f000 f82e 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a4:	f7ff ff86 	bl	80005b4 <MX_GPIO_Init>
  MX_FATFS_Init();
 80006a8:	f005 fa64 	bl	8005b74 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 80006ac:	f00b f8be 	bl	800b82c <MX_USB_HOST_Init>
  MX_USART1_UART_Init();
 80006b0:	f000 f9b4 	bl	8000a1c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  bootloaderTimeout = HAL_GetTick() + 2000;
 80006b4:	f000 fab4 	bl	8000c20 <HAL_GetTick>
 80006b8:	4603      	mov	r3, r0
 80006ba:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80006be:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <main+0x58>)
 80006c0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80006c2:	f00b f8d9 	bl	800b878 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
	      printf("xuqing %d\n", (int)Appli_state);
 80006c6:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <main+0x5c>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	4619      	mov	r1, r3
 80006cc:	4809      	ldr	r0, [pc, #36]	; (80006f4 <main+0x60>)
 80006ce:	f00b ffd5 	bl	800c67c <iprintf>
	  	  printf("xuqing\r\n");
 80006d2:	4809      	ldr	r0, [pc, #36]	; (80006f8 <main+0x64>)
 80006d4:	f00c f858 	bl	800c788 <puts>
	  	  printf("%d\n", HAL_GetTick());
 80006d8:	f000 faa2 	bl	8000c20 <HAL_GetTick>
 80006dc:	4603      	mov	r3, r0
 80006de:	4619      	mov	r1, r3
 80006e0:	4806      	ldr	r0, [pc, #24]	; (80006fc <main+0x68>)
 80006e2:	f00b ffcb 	bl	800c67c <iprintf>
	  	  UP_Data();
 80006e6:	f00b fd4b 	bl	800c180 <UP_Data>
    MX_USB_HOST_Process();
 80006ea:	e7ea      	b.n	80006c2 <main+0x2e>
 80006ec:	20010cdc 	.word	0x20010cdc
 80006f0:	20000994 	.word	0x20000994
 80006f4:	0800d4dc 	.word	0x0800d4dc
 80006f8:	0800d4e8 	.word	0x0800d4e8
 80006fc:	0800d4f0 	.word	0x0800d4f0

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	; 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	2234      	movs	r2, #52	; 0x34
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f00b fecc 	bl	800c4ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	4b2c      	ldr	r3, [pc, #176]	; (80007dc <SystemClock_Config+0xdc>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	4a2b      	ldr	r2, [pc, #172]	; (80007dc <SystemClock_Config+0xdc>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	; 0x40
 8000734:	4b29      	ldr	r3, [pc, #164]	; (80007dc <SystemClock_Config+0xdc>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000740:	2300      	movs	r3, #0
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <SystemClock_Config+0xe0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a25      	ldr	r2, [pc, #148]	; (80007e0 <SystemClock_Config+0xe0>)
 800074a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <SystemClock_Config+0xe0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800075c:	2301      	movs	r3, #1
 800075e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000764:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000766:	2302      	movs	r3, #2
 8000768:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800076e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000770:	2306      	movs	r3, #6
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000774:	23b4      	movs	r3, #180	; 0xb4
 8000776:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000778:	2302      	movs	r3, #2
 800077a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077c:	2302      	movs	r3, #2
 800077e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000780:	2302      	movs	r3, #2
 8000782:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4618      	mov	r0, r3
 800078a:	f003 fbb9 	bl	8003f00 <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000794:	f000 f826 	bl	80007e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000798:	f002 fd74 	bl	8003284 <HAL_PWREx_EnableOverDrive>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007a2:	f000 f81f 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a6:	230f      	movs	r3, #15
 80007a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80007aa:	2303      	movs	r3, #3
 80007ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007bc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	2105      	movs	r1, #5
 80007c4:	4618      	mov	r0, r3
 80007c6:	f002 fdad 	bl	8003324 <HAL_RCC_ClockConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007d0:	f000 f808 	bl	80007e4 <Error_Handler>
  }
}
 80007d4:	bf00      	nop
 80007d6:	3750      	adds	r7, #80	; 0x50
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40007000 	.word	0x40007000

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("cuowu\n");
 80007ec:	4801      	ldr	r0, [pc, #4]	; (80007f4 <Error_Handler+0x10>)
 80007ee:	f00b ffcb 	bl	800c788 <puts>
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <Error_Handler+0xe>
 80007f4:	0800d4f4 	.word	0x0800d4f4

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <HAL_MspInit+0x4c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <HAL_MspInit+0x4c>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <HAL_MspInit+0x4c>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <HAL_MspInit+0x4c>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	4a08      	ldr	r2, [pc, #32]	; (8000844 <HAL_MspInit+0x4c>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	6413      	str	r3, [r2, #64]	; 0x40
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_MspInit+0x4c>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800084c:	e7fe      	b.n	800084c <NMI_Handler+0x4>

0800084e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <HardFault_Handler+0x4>

08000854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <MemManage_Handler+0x4>

0800085a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <BusFault_Handler+0x4>

08000860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <UsageFault_Handler+0x4>

08000866 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000894:	f000 f9b0 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}

0800089c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80008a0:	4802      	ldr	r0, [pc, #8]	; (80008ac <OTG_FS_IRQHandler+0x10>)
 80008a2:	f001 fb4f 	bl	8001f44 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000998 	.word	0x20000998

080008b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	e00a      	b.n	80008d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008c2:	f3af 8000 	nop.w
 80008c6:	4601      	mov	r1, r0
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	1c5a      	adds	r2, r3, #1
 80008cc:	60ba      	str	r2, [r7, #8]
 80008ce:	b2ca      	uxtb	r2, r1
 80008d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	3301      	adds	r3, #1
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697a      	ldr	r2, [r7, #20]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	429a      	cmp	r2, r3
 80008de:	dbf0      	blt.n	80008c2 <_read+0x12>
	}

return len;
 80008e0:	687b      	ldr	r3, [r7, #4]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b086      	sub	sp, #24
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	60f8      	str	r0, [r7, #12]
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	e009      	b.n	8000910 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	1c5a      	adds	r2, r3, #1
 8000900:	60ba      	str	r2, [r7, #8]
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fe97 	bl	8000638 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	3301      	adds	r3, #1
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697a      	ldr	r2, [r7, #20]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	429a      	cmp	r2, r3
 8000916:	dbf1      	blt.n	80008fc <_write+0x12>
	}
	return len;
 8000918:	687b      	ldr	r3, [r7, #4]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <_close>:

int _close(int file)
{
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
	return -1;
 800092a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800092e:	4618      	mov	r0, r3
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800094a:	605a      	str	r2, [r3, #4]
	return 0;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <_isatty>:

int _isatty(int file)
{
 800095a:	b480      	push	{r7}
 800095c:	b083      	sub	sp, #12
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
	return 1;
 8000962:	2301      	movs	r3, #1
}
 8000964:	4618      	mov	r0, r3
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
	return 0;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
	...

0800098c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000994:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <_sbrk+0x5c>)
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <_sbrk+0x60>)
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <_sbrk+0x64>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d102      	bne.n	80009ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <_sbrk+0x64>)
 80009aa:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <_sbrk+0x68>)
 80009ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <_sbrk+0x64>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d207      	bcs.n	80009cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009bc:	f00b fd2e 	bl	800c41c <__errno>
 80009c0:	4603      	mov	r3, r0
 80009c2:	220c      	movs	r2, #12
 80009c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ca:	e009      	b.n	80009e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <_sbrk+0x64>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009d2:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <_sbrk+0x64>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	4a05      	ldr	r2, [pc, #20]	; (80009f0 <_sbrk+0x64>)
 80009dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009de:	68fb      	ldr	r3, [r7, #12]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	2001ffd8 	.word	0x2001ffd8
 80009ec:	00001000 	.word	0x00001000
 80009f0:	200000b4 	.word	0x200000b4
 80009f4:	20010cf0 	.word	0x20010cf0

080009f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <SystemInit+0x20>)
 80009fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a02:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <SystemInit+0x20>)
 8000a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <MX_USART1_UART_Init+0x50>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_USART1_UART_Init+0x4c>)
 8000a54:	f003 fcf2 	bl	800443c <HAL_UART_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a5e:	f7ff fec1 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200000b8 	.word	0x200000b8
 8000a6c:	40011000 	.word	0x40011000

08000a70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a19      	ldr	r2, [pc, #100]	; (8000af4 <HAL_UART_MspInit+0x84>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d12c      	bne.n	8000aec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <HAL_UART_MspInit+0x88>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	4a17      	ldr	r2, [pc, #92]	; (8000af8 <HAL_UART_MspInit+0x88>)
 8000a9c:	f043 0310 	orr.w	r3, r3, #16
 8000aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_UART_MspInit+0x88>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	f003 0310 	and.w	r3, r3, #16
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <HAL_UART_MspInit+0x88>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a10      	ldr	r2, [pc, #64]	; (8000af8 <HAL_UART_MspInit+0x88>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <HAL_UART_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000aca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000adc:	2307      	movs	r3, #7
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <HAL_UART_MspInit+0x8c>)
 8000ae8:	f000 fd02 	bl	80014f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	; 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40011000 	.word	0x40011000
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020000 	.word	0x40020000

08000b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b06:	490e      	ldr	r1, [pc, #56]	; (8000b40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b08:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b1c:	4c0b      	ldr	r4, [pc, #44]	; (8000b4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b2a:	f7ff ff65 	bl	80009f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f00b fc7b 	bl	800c428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b32:	f7ff fdaf 	bl	8000694 <main>
  bx  lr    
 8000b36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b38:	2001ffd8 	.word	0x2001ffd8
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000b44:	0800d7f4 	.word	0x0800d7f4
  ldr r2, =_sbss
 8000b48:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000b4c:	20010cf0 	.word	0x20010cf0

08000b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC_IRQHandler>
	...

08000b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <HAL_Init+0x40>)
 8000b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b64:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <HAL_Init+0x40>)
 8000b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <HAL_Init+0x40>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <HAL_Init+0x40>)
 8000b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f000 f973 	bl	8000e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b82:	200f      	movs	r0, #15
 8000b84:	f000 f808 	bl	8000b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b88:	f7ff fe36 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023c00 	.word	0x40023c00

08000b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_InitTick+0x54>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_InitTick+0x58>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f999 	bl	8000eee <HAL_SYSTICK_Config>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e00e      	b.n	8000be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	d80a      	bhi.n	8000be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	f000 f953 	bl	8000e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd8:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <HAL_InitTick+0x5c>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	e000      	b.n	8000be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_IncTick+0x20>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_IncTick+0x24>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_IncTick+0x24>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	200000fc 	.word	0x200000fc

08000c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <HAL_GetTick+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	200000fc 	.word	0x200000fc

08000c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c40:	f7ff ffee 	bl	8000c20 <HAL_GetTick>
 8000c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c50:	d005      	beq.n	8000c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <HAL_Delay+0x44>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c5e:	bf00      	nop
 8000c60:	f7ff ffde 	bl	8000c20 <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d8f7      	bhi.n	8000c60 <HAL_Delay+0x28>
  {
  }
}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000008 	.word	0x20000008

08000c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb2:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	60d3      	str	r3, [r2, #12]
}
 8000cb8:	bf00      	nop
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	f003 0307 	and.w	r3, r3, #7
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	db0b      	blt.n	8000d0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	f003 021f 	and.w	r2, r3, #31
 8000cfc:	4907      	ldr	r1, [pc, #28]	; (8000d1c <__NVIC_EnableIRQ+0x38>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	095b      	lsrs	r3, r3, #5
 8000d04:	2001      	movs	r0, #1
 8000d06:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e100 	.word	0xe000e100

08000d20 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	db12      	blt.n	8000d58 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	f003 021f 	and.w	r2, r3, #31
 8000d38:	490a      	ldr	r1, [pc, #40]	; (8000d64 <__NVIC_DisableIRQ+0x44>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	095b      	lsrs	r3, r3, #5
 8000d40:	2001      	movs	r0, #1
 8000d42:	fa00 f202 	lsl.w	r2, r0, r2
 8000d46:	3320      	adds	r3, #32
 8000d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d4c:	f3bf 8f4f 	dsb	sy
}
 8000d50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d52:	f3bf 8f6f 	isb	sy
}
 8000d56:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000e100 	.word	0xe000e100

08000d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db0a      	blt.n	8000d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	490c      	ldr	r1, [pc, #48]	; (8000db4 <__NVIC_SetPriority+0x4c>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d90:	e00a      	b.n	8000da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4908      	ldr	r1, [pc, #32]	; (8000db8 <__NVIC_SetPriority+0x50>)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	3b04      	subs	r3, #4
 8000da0:	0112      	lsls	r2, r2, #4
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	440b      	add	r3, r1
 8000da6:	761a      	strb	r2, [r3, #24]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f1c3 0307 	rsb	r3, r3, #7
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	bf28      	it	cs
 8000dda:	2304      	movcs	r3, #4
 8000ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d902      	bls.n	8000dec <NVIC_EncodePriority+0x30>
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3b03      	subs	r3, #3
 8000dea:	e000      	b.n	8000dee <NVIC_EncodePriority+0x32>
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	401a      	ands	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e04:	f04f 31ff 	mov.w	r1, #4294967295
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43d9      	mvns	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	4313      	orrs	r3, r2
         );
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3724      	adds	r7, #36	; 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e34:	d301      	bcc.n	8000e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00f      	b.n	8000e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <SysTick_Config+0x40>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e42:	210f      	movs	r1, #15
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f7ff ff8e 	bl	8000d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <SysTick_Config+0x40>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <SysTick_Config+0x40>)
 8000e54:	2207      	movs	r2, #7
 8000e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	e000e010 	.word	0xe000e010

08000e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff05 	bl	8000c80 <__NVIC_SetPriorityGrouping>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
 8000e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e90:	f7ff ff1a 	bl	8000cc8 <__NVIC_GetPriorityGrouping>
 8000e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	68b9      	ldr	r1, [r7, #8]
 8000e9a:	6978      	ldr	r0, [r7, #20]
 8000e9c:	f7ff ff8e 	bl	8000dbc <NVIC_EncodePriority>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff5d 	bl	8000d68 <__NVIC_SetPriority>
}
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff0d 	bl	8000ce4 <__NVIC_EnableIRQ>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff1d 	bl	8000d20 <__NVIC_DisableIRQ>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ff94 	bl	8000e24 <SysTick_Config>
 8000efc:	4603      	mov	r3, r0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f1a:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <HAL_FLASH_Program+0xa0>)
 8000f1c:	7e1b      	ldrb	r3, [r3, #24]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d101      	bne.n	8000f26 <HAL_FLASH_Program+0x1e>
 8000f22:	2302      	movs	r3, #2
 8000f24:	e03b      	b.n	8000f9e <HAL_FLASH_Program+0x96>
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <HAL_FLASH_Program+0xa0>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f30:	f000 f87c 	bl	800102c <FLASH_WaitForLastOperation>
 8000f34:	4603      	mov	r3, r0
 8000f36:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000f38:	7dfb      	ldrb	r3, [r7, #23]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d12b      	bne.n	8000f96 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d105      	bne.n	8000f50 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000f44:	783b      	ldrb	r3, [r7, #0]
 8000f46:	4619      	mov	r1, r3
 8000f48:	68b8      	ldr	r0, [r7, #8]
 8000f4a:	f000 f927 	bl	800119c <FLASH_Program_Byte>
 8000f4e:	e016      	b.n	8000f7e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d105      	bne.n	8000f62 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000f56:	883b      	ldrh	r3, [r7, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	68b8      	ldr	r0, [r7, #8]
 8000f5c:	f000 f8fa 	bl	8001154 <FLASH_Program_HalfWord>
 8000f60:	e00d      	b.n	8000f7e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d105      	bne.n	8000f74 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	68b8      	ldr	r0, [r7, #8]
 8000f6e:	f000 f8cf 	bl	8001110 <FLASH_Program_Word>
 8000f72:	e004      	b.n	8000f7e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8000f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f78:	68b8      	ldr	r0, [r7, #8]
 8000f7a:	f000 f897 	bl	80010ac <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f7e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f82:	f000 f853 	bl	800102c <FLASH_WaitForLastOperation>
 8000f86:	4603      	mov	r3, r0
 8000f88:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <HAL_FLASH_Program+0xa4>)
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	4a07      	ldr	r2, [pc, #28]	; (8000fac <HAL_FLASH_Program+0xa4>)
 8000f90:	f023 0301 	bic.w	r3, r3, #1
 8000f94:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000f96:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <HAL_FLASH_Program+0xa0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8000f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000100 	.word	0x20000100
 8000fac:	40023c00 	.word	0x40023c00

08000fb0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_FLASH_Unlock+0x38>)
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	da0b      	bge.n	8000fda <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <HAL_FLASH_Unlock+0x38>)
 8000fc4:	4a09      	ldr	r2, [pc, #36]	; (8000fec <HAL_FLASH_Unlock+0x3c>)
 8000fc6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <HAL_FLASH_Unlock+0x38>)
 8000fca:	4a09      	ldr	r2, [pc, #36]	; (8000ff0 <HAL_FLASH_Unlock+0x40>)
 8000fcc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_FLASH_Unlock+0x38>)
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	da01      	bge.n	8000fda <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000fda:	79fb      	ldrb	r3, [r7, #7]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	40023c00 	.word	0x40023c00
 8000fec:	45670123 	.word	0x45670123
 8000ff0:	cdef89ab 	.word	0xcdef89ab

08000ff4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <HAL_FLASH_Lock+0x1c>)
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <HAL_FLASH_Lock+0x1c>)
 8000ffe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001002:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	40023c00 	.word	0x40023c00

08001014 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_FLASH_GetError+0x14>)
 800101a:	69db      	ldr	r3, [r3, #28]
}  
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000100 	.word	0x20000100

0800102c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001038:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <FLASH_WaitForLastOperation+0x78>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800103e:	f7ff fdef 	bl	8000c20 <HAL_GetTick>
 8001042:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001044:	e010      	b.n	8001068 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104c:	d00c      	beq.n	8001068 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d007      	beq.n	8001064 <FLASH_WaitForLastOperation+0x38>
 8001054:	f7ff fde4 	bl	8000c20 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	429a      	cmp	r2, r3
 8001062:	d201      	bcs.n	8001068 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e019      	b.n	800109c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <FLASH_WaitForLastOperation+0x7c>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1e8      	bne.n	8001046 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <FLASH_WaitForLastOperation+0x7c>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	2b00      	cmp	r3, #0
 800107e:	d002      	beq.n	8001086 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <FLASH_WaitForLastOperation+0x7c>)
 8001082:	2201      	movs	r2, #1
 8001084:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <FLASH_WaitForLastOperation+0x7c>)
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001092:	f000 f8a5 	bl	80011e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e000      	b.n	800109c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
  
}  
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000100 	.word	0x20000100
 80010a8:	40023c00 	.word	0x40023c00

080010ac <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80010b8:	4b14      	ldr	r3, [pc, #80]	; (800110c <FLASH_Program_DoubleWord+0x60>)
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	4a13      	ldr	r2, [pc, #76]	; (800110c <FLASH_Program_DoubleWord+0x60>)
 80010be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <FLASH_Program_DoubleWord+0x60>)
 80010c6:	691b      	ldr	r3, [r3, #16]
 80010c8:	4a10      	ldr	r2, [pc, #64]	; (800110c <FLASH_Program_DoubleWord+0x60>)
 80010ca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80010ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <FLASH_Program_DoubleWord+0x60>)
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	4a0d      	ldr	r2, [pc, #52]	; (800110c <FLASH_Program_DoubleWord+0x60>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80010e2:	f3bf 8f6f 	isb	sy
}
 80010e6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80010e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	000a      	movs	r2, r1
 80010f6:	2300      	movs	r3, #0
 80010f8:	68f9      	ldr	r1, [r7, #12]
 80010fa:	3104      	adds	r1, #4
 80010fc:	4613      	mov	r3, r2
 80010fe:	600b      	str	r3, [r1, #0]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	40023c00 	.word	0x40023c00

08001110 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <FLASH_Program_Word+0x40>)
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	4a0c      	ldr	r2, [pc, #48]	; (8001150 <FLASH_Program_Word+0x40>)
 8001120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001124:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <FLASH_Program_Word+0x40>)
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	4a09      	ldr	r2, [pc, #36]	; (8001150 <FLASH_Program_Word+0x40>)
 800112c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001130:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001132:	4b07      	ldr	r3, [pc, #28]	; (8001150 <FLASH_Program_Word+0x40>)
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	4a06      	ldr	r2, [pc, #24]	; (8001150 <FLASH_Program_Word+0x40>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	601a      	str	r2, [r3, #0]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	40023c00 	.word	0x40023c00

08001154 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001160:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <FLASH_Program_HalfWord+0x44>)
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <FLASH_Program_HalfWord+0x44>)
 8001166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800116a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <FLASH_Program_HalfWord+0x44>)
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	4a09      	ldr	r2, [pc, #36]	; (8001198 <FLASH_Program_HalfWord+0x44>)
 8001172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001176:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <FLASH_Program_HalfWord+0x44>)
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <FLASH_Program_HalfWord+0x44>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	887a      	ldrh	r2, [r7, #2]
 8001188:	801a      	strh	r2, [r3, #0]
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40023c00 	.word	0x40023c00

0800119c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <FLASH_Program_Byte+0x40>)
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <FLASH_Program_Byte+0x40>)
 80011ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <FLASH_Program_Byte+0x40>)
 80011b6:	4a09      	ldr	r2, [pc, #36]	; (80011dc <FLASH_Program_Byte+0x40>)
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <FLASH_Program_Byte+0x40>)
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	4a06      	ldr	r2, [pc, #24]	; (80011dc <FLASH_Program_Byte+0x40>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	78fa      	ldrb	r2, [r7, #3]
 80011cc:	701a      	strb	r2, [r3, #0]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40023c00 	.word	0x40023c00

080011e0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80011e4:	4b2f      	ldr	r3, [pc, #188]	; (80012a4 <FLASH_SetErrorCode+0xc4>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	f003 0310 	and.w	r3, r3, #16
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d008      	beq.n	8001202 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80011f0:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <FLASH_SetErrorCode+0xc8>)
 80011f2:	69db      	ldr	r3, [r3, #28]
 80011f4:	f043 0310 	orr.w	r3, r3, #16
 80011f8:	4a2b      	ldr	r2, [pc, #172]	; (80012a8 <FLASH_SetErrorCode+0xc8>)
 80011fa:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80011fc:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <FLASH_SetErrorCode+0xc4>)
 80011fe:	2210      	movs	r2, #16
 8001200:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001202:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <FLASH_SetErrorCode+0xc4>)
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	f003 0320 	and.w	r3, r3, #32
 800120a:	2b00      	cmp	r3, #0
 800120c:	d008      	beq.n	8001220 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <FLASH_SetErrorCode+0xc8>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	f043 0308 	orr.w	r3, r3, #8
 8001216:	4a24      	ldr	r2, [pc, #144]	; (80012a8 <FLASH_SetErrorCode+0xc8>)
 8001218:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800121a:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <FLASH_SetErrorCode+0xc4>)
 800121c:	2220      	movs	r2, #32
 800121e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001220:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <FLASH_SetErrorCode+0xc4>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001228:	2b00      	cmp	r3, #0
 800122a:	d008      	beq.n	800123e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <FLASH_SetErrorCode+0xc8>)
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	4a1c      	ldr	r2, [pc, #112]	; (80012a8 <FLASH_SetErrorCode+0xc8>)
 8001236:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <FLASH_SetErrorCode+0xc4>)
 800123a:	2240      	movs	r2, #64	; 0x40
 800123c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <FLASH_SetErrorCode+0xc4>)
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001246:	2b00      	cmp	r3, #0
 8001248:	d008      	beq.n	800125c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800124a:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <FLASH_SetErrorCode+0xc8>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	f043 0302 	orr.w	r3, r3, #2
 8001252:	4a15      	ldr	r2, [pc, #84]	; (80012a8 <FLASH_SetErrorCode+0xc8>)
 8001254:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <FLASH_SetErrorCode+0xc4>)
 8001258:	2280      	movs	r2, #128	; 0x80
 800125a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <FLASH_SetErrorCode+0xc4>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001264:	2b00      	cmp	r3, #0
 8001266:	d009      	beq.n	800127c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <FLASH_SetErrorCode+0xc8>)
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	4a0d      	ldr	r2, [pc, #52]	; (80012a8 <FLASH_SetErrorCode+0xc8>)
 8001272:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <FLASH_SetErrorCode+0xc4>)
 8001276:	f44f 7280 	mov.w	r2, #256	; 0x100
 800127a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <FLASH_SetErrorCode+0xc4>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d008      	beq.n	800129a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <FLASH_SetErrorCode+0xc8>)
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	f043 0320 	orr.w	r3, r3, #32
 8001290:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <FLASH_SetErrorCode+0xc8>)
 8001292:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <FLASH_SetErrorCode+0xc4>)
 8001296:	2202      	movs	r2, #2
 8001298:	60da      	str	r2, [r3, #12]
  }
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	40023c00 	.word	0x40023c00
 80012a8:	20000100 	.word	0x20000100

080012ac <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80012be:	4b31      	ldr	r3, [pc, #196]	; (8001384 <HAL_FLASHEx_Erase+0xd8>)
 80012c0:	7e1b      	ldrb	r3, [r3, #24]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d101      	bne.n	80012ca <HAL_FLASHEx_Erase+0x1e>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e058      	b.n	800137c <HAL_FLASHEx_Erase+0xd0>
 80012ca:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <HAL_FLASHEx_Erase+0xd8>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012d4:	f7ff feaa 	bl	800102c <FLASH_WaitForLastOperation>
 80012d8:	4603      	mov	r3, r0
 80012da:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d148      	bne.n	8001374 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	f04f 32ff 	mov.w	r2, #4294967295
 80012e8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d115      	bne.n	800131e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	4619      	mov	r1, r3
 80012fe:	4610      	mov	r0, r2
 8001300:	f000 f844 	bl	800138c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001304:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001308:	f7ff fe90 	bl	800102c <FLASH_WaitForLastOperation>
 800130c:	4603      	mov	r3, r0
 800130e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001310:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <HAL_FLASHEx_Erase+0xdc>)
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	4a1c      	ldr	r2, [pc, #112]	; (8001388 <HAL_FLASHEx_Erase+0xdc>)
 8001316:	f023 0304 	bic.w	r3, r3, #4
 800131a:	6113      	str	r3, [r2, #16]
 800131c:	e028      	b.n	8001370 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	e01c      	b.n	8001360 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	4619      	mov	r1, r3
 800132e:	68b8      	ldr	r0, [r7, #8]
 8001330:	f000 f850 	bl	80013d4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001334:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001338:	f7ff fe78 	bl	800102c <FLASH_WaitForLastOperation>
 800133c:	4603      	mov	r3, r0
 800133e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <HAL_FLASHEx_Erase+0xdc>)
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	4a10      	ldr	r2, [pc, #64]	; (8001388 <HAL_FLASHEx_Erase+0xdc>)
 8001346:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800134a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	601a      	str	r2, [r3, #0]
          break;
 8001358:	e00a      	b.n	8001370 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	3301      	adds	r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	4413      	add	r3, r2
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	429a      	cmp	r2, r3
 800136e:	d3da      	bcc.n	8001326 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001370:	f000 f878 	bl	8001464 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001374:	4b03      	ldr	r3, [pc, #12]	; (8001384 <HAL_FLASHEx_Erase+0xd8>)
 8001376:	2200      	movs	r2, #0
 8001378:	761a      	strb	r2, [r3, #24]

  return status;
 800137a:	7bfb      	ldrb	r3, [r7, #15]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000100 	.word	0x20000100
 8001388:	40023c00 	.word	0x40023c00

0800138c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001398:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <FLASH_MassErase+0x44>)
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <FLASH_MassErase+0x44>)
 800139e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <FLASH_MassErase+0x44>)
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	4a09      	ldr	r2, [pc, #36]	; (80013d0 <FLASH_MassErase+0x44>)
 80013aa:	f043 0304 	orr.w	r3, r3, #4
 80013ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <FLASH_MassErase+0x44>)
 80013b2:	691a      	ldr	r2, [r3, #16]
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	4313      	orrs	r3, r2
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <FLASH_MassErase+0x44>)
 80013bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c0:	6113      	str	r3, [r2, #16]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40023c00 	.word	0x40023c00

080013d4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80013e4:	78fb      	ldrb	r3, [r7, #3]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d102      	bne.n	80013f0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	e010      	b.n	8001412 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d103      	bne.n	80013fe <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80013f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	e009      	b.n	8001412 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80013fe:	78fb      	ldrb	r3, [r7, #3]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d103      	bne.n	800140c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	e002      	b.n	8001412 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800140c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001410:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001412:	4b13      	ldr	r3, [pc, #76]	; (8001460 <FLASH_Erase_Sector+0x8c>)
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	4a12      	ldr	r2, [pc, #72]	; (8001460 <FLASH_Erase_Sector+0x8c>)
 8001418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800141c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <FLASH_Erase_Sector+0x8c>)
 8001420:	691a      	ldr	r2, [r3, #16]
 8001422:	490f      	ldr	r1, [pc, #60]	; (8001460 <FLASH_Erase_Sector+0x8c>)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4313      	orrs	r3, r2
 8001428:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800142a:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <FLASH_Erase_Sector+0x8c>)
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	4a0c      	ldr	r2, [pc, #48]	; (8001460 <FLASH_Erase_Sector+0x8c>)
 8001430:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001434:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <FLASH_Erase_Sector+0x8c>)
 8001438:	691a      	ldr	r2, [r3, #16]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4313      	orrs	r3, r2
 8001440:	4a07      	ldr	r2, [pc, #28]	; (8001460 <FLASH_Erase_Sector+0x8c>)
 8001442:	f043 0302 	orr.w	r3, r3, #2
 8001446:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <FLASH_Erase_Sector+0x8c>)
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	4a04      	ldr	r2, [pc, #16]	; (8001460 <FLASH_Erase_Sector+0x8c>)
 800144e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001452:	6113      	str	r3, [r2, #16]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	40023c00 	.word	0x40023c00

08001464 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001468:	4b20      	ldr	r3, [pc, #128]	; (80014ec <FLASH_FlushCaches+0x88>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001470:	2b00      	cmp	r3, #0
 8001472:	d017      	beq.n	80014a4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001474:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <FLASH_FlushCaches+0x88>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a1c      	ldr	r2, [pc, #112]	; (80014ec <FLASH_FlushCaches+0x88>)
 800147a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800147e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001480:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <FLASH_FlushCaches+0x88>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a19      	ldr	r2, [pc, #100]	; (80014ec <FLASH_FlushCaches+0x88>)
 8001486:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <FLASH_FlushCaches+0x88>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a16      	ldr	r2, [pc, #88]	; (80014ec <FLASH_FlushCaches+0x88>)
 8001492:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001496:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <FLASH_FlushCaches+0x88>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a13      	ldr	r2, [pc, #76]	; (80014ec <FLASH_FlushCaches+0x88>)
 800149e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014a2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <FLASH_FlushCaches+0x88>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d017      	beq.n	80014e0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <FLASH_FlushCaches+0x88>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a0d      	ldr	r2, [pc, #52]	; (80014ec <FLASH_FlushCaches+0x88>)
 80014b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014ba:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <FLASH_FlushCaches+0x88>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <FLASH_FlushCaches+0x88>)
 80014c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <FLASH_FlushCaches+0x88>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a07      	ldr	r2, [pc, #28]	; (80014ec <FLASH_FlushCaches+0x88>)
 80014ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014d2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <FLASH_FlushCaches+0x88>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a04      	ldr	r2, [pc, #16]	; (80014ec <FLASH_FlushCaches+0x88>)
 80014da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014de:	6013      	str	r3, [r2, #0]
  }
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40023c00 	.word	0x40023c00

080014f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	; 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
 800150a:	e165      	b.n	80017d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800150c:	2201      	movs	r2, #1
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	429a      	cmp	r2, r3
 8001526:	f040 8154 	bne.w	80017d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	2b01      	cmp	r3, #1
 8001534:	d005      	beq.n	8001542 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800153e:	2b02      	cmp	r3, #2
 8001540:	d130      	bne.n	80015a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	2203      	movs	r2, #3
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001578:	2201      	movs	r2, #1
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	f003 0201 	and.w	r2, r3, #1
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4313      	orrs	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d017      	beq.n	80015e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	2203      	movs	r2, #3
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d123      	bne.n	8001634 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	08da      	lsrs	r2, r3, #3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3208      	adds	r2, #8
 80015f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	220f      	movs	r2, #15
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	691a      	ldr	r2, [r3, #16]
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	08da      	lsrs	r2, r3, #3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3208      	adds	r2, #8
 800162e:	69b9      	ldr	r1, [r7, #24]
 8001630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	2203      	movs	r2, #3
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 0203 	and.w	r2, r3, #3
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 80ae 	beq.w	80017d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b5d      	ldr	r3, [pc, #372]	; (80017f0 <HAL_GPIO_Init+0x300>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	4a5c      	ldr	r2, [pc, #368]	; (80017f0 <HAL_GPIO_Init+0x300>)
 8001680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001684:	6453      	str	r3, [r2, #68]	; 0x44
 8001686:	4b5a      	ldr	r3, [pc, #360]	; (80017f0 <HAL_GPIO_Init+0x300>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001692:	4a58      	ldr	r2, [pc, #352]	; (80017f4 <HAL_GPIO_Init+0x304>)
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	089b      	lsrs	r3, r3, #2
 8001698:	3302      	adds	r3, #2
 800169a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	220f      	movs	r2, #15
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4f      	ldr	r2, [pc, #316]	; (80017f8 <HAL_GPIO_Init+0x308>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d025      	beq.n	800170a <HAL_GPIO_Init+0x21a>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4e      	ldr	r2, [pc, #312]	; (80017fc <HAL_GPIO_Init+0x30c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d01f      	beq.n	8001706 <HAL_GPIO_Init+0x216>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4d      	ldr	r2, [pc, #308]	; (8001800 <HAL_GPIO_Init+0x310>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d019      	beq.n	8001702 <HAL_GPIO_Init+0x212>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4c      	ldr	r2, [pc, #304]	; (8001804 <HAL_GPIO_Init+0x314>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d013      	beq.n	80016fe <HAL_GPIO_Init+0x20e>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4b      	ldr	r2, [pc, #300]	; (8001808 <HAL_GPIO_Init+0x318>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d00d      	beq.n	80016fa <HAL_GPIO_Init+0x20a>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4a      	ldr	r2, [pc, #296]	; (800180c <HAL_GPIO_Init+0x31c>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d007      	beq.n	80016f6 <HAL_GPIO_Init+0x206>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a49      	ldr	r2, [pc, #292]	; (8001810 <HAL_GPIO_Init+0x320>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d101      	bne.n	80016f2 <HAL_GPIO_Init+0x202>
 80016ee:	2306      	movs	r3, #6
 80016f0:	e00c      	b.n	800170c <HAL_GPIO_Init+0x21c>
 80016f2:	2307      	movs	r3, #7
 80016f4:	e00a      	b.n	800170c <HAL_GPIO_Init+0x21c>
 80016f6:	2305      	movs	r3, #5
 80016f8:	e008      	b.n	800170c <HAL_GPIO_Init+0x21c>
 80016fa:	2304      	movs	r3, #4
 80016fc:	e006      	b.n	800170c <HAL_GPIO_Init+0x21c>
 80016fe:	2303      	movs	r3, #3
 8001700:	e004      	b.n	800170c <HAL_GPIO_Init+0x21c>
 8001702:	2302      	movs	r3, #2
 8001704:	e002      	b.n	800170c <HAL_GPIO_Init+0x21c>
 8001706:	2301      	movs	r3, #1
 8001708:	e000      	b.n	800170c <HAL_GPIO_Init+0x21c>
 800170a:	2300      	movs	r3, #0
 800170c:	69fa      	ldr	r2, [r7, #28]
 800170e:	f002 0203 	and.w	r2, r2, #3
 8001712:	0092      	lsls	r2, r2, #2
 8001714:	4093      	lsls	r3, r2
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4313      	orrs	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800171c:	4935      	ldr	r1, [pc, #212]	; (80017f4 <HAL_GPIO_Init+0x304>)
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	089b      	lsrs	r3, r3, #2
 8001722:	3302      	adds	r3, #2
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800172a:	4b3a      	ldr	r3, [pc, #232]	; (8001814 <HAL_GPIO_Init+0x324>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800174e:	4a31      	ldr	r2, [pc, #196]	; (8001814 <HAL_GPIO_Init+0x324>)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001754:	4b2f      	ldr	r3, [pc, #188]	; (8001814 <HAL_GPIO_Init+0x324>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001778:	4a26      	ldr	r2, [pc, #152]	; (8001814 <HAL_GPIO_Init+0x324>)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800177e:	4b25      	ldr	r3, [pc, #148]	; (8001814 <HAL_GPIO_Init+0x324>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017a2:	4a1c      	ldr	r2, [pc, #112]	; (8001814 <HAL_GPIO_Init+0x324>)
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017a8:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <HAL_GPIO_Init+0x324>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017cc:	4a11      	ldr	r2, [pc, #68]	; (8001814 <HAL_GPIO_Init+0x324>)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3301      	adds	r3, #1
 80017d6:	61fb      	str	r3, [r7, #28]
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	2b0f      	cmp	r3, #15
 80017dc:	f67f ae96 	bls.w	800150c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	3724      	adds	r7, #36	; 0x24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40013800 	.word	0x40013800
 80017f8:	40020000 	.word	0x40020000
 80017fc:	40020400 	.word	0x40020400
 8001800:	40020800 	.word	0x40020800
 8001804:	40020c00 	.word	0x40020c00
 8001808:	40021000 	.word	0x40021000
 800180c:	40021400 	.word	0x40021400
 8001810:	40021800 	.word	0x40021800
 8001814:	40013c00 	.word	0x40013c00

08001818 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001818:	b480      	push	{r7}
 800181a:	b087      	sub	sp, #28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	e0c7      	b.n	80019c4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001834:	2201      	movs	r2, #1
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	429a      	cmp	r2, r3
 800184c:	f040 80b7 	bne.w	80019be <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001850:	4a62      	ldr	r2, [pc, #392]	; (80019dc <HAL_GPIO_DeInit+0x1c4>)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	089b      	lsrs	r3, r3, #2
 8001856:	3302      	adds	r3, #2
 8001858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	220f      	movs	r2, #15
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	68ba      	ldr	r2, [r7, #8]
 800186e:	4013      	ands	r3, r2
 8001870:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a5a      	ldr	r2, [pc, #360]	; (80019e0 <HAL_GPIO_DeInit+0x1c8>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d025      	beq.n	80018c6 <HAL_GPIO_DeInit+0xae>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a59      	ldr	r2, [pc, #356]	; (80019e4 <HAL_GPIO_DeInit+0x1cc>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d01f      	beq.n	80018c2 <HAL_GPIO_DeInit+0xaa>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a58      	ldr	r2, [pc, #352]	; (80019e8 <HAL_GPIO_DeInit+0x1d0>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d019      	beq.n	80018be <HAL_GPIO_DeInit+0xa6>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a57      	ldr	r2, [pc, #348]	; (80019ec <HAL_GPIO_DeInit+0x1d4>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d013      	beq.n	80018ba <HAL_GPIO_DeInit+0xa2>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a56      	ldr	r2, [pc, #344]	; (80019f0 <HAL_GPIO_DeInit+0x1d8>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d00d      	beq.n	80018b6 <HAL_GPIO_DeInit+0x9e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a55      	ldr	r2, [pc, #340]	; (80019f4 <HAL_GPIO_DeInit+0x1dc>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d007      	beq.n	80018b2 <HAL_GPIO_DeInit+0x9a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a54      	ldr	r2, [pc, #336]	; (80019f8 <HAL_GPIO_DeInit+0x1e0>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d101      	bne.n	80018ae <HAL_GPIO_DeInit+0x96>
 80018aa:	2306      	movs	r3, #6
 80018ac:	e00c      	b.n	80018c8 <HAL_GPIO_DeInit+0xb0>
 80018ae:	2307      	movs	r3, #7
 80018b0:	e00a      	b.n	80018c8 <HAL_GPIO_DeInit+0xb0>
 80018b2:	2305      	movs	r3, #5
 80018b4:	e008      	b.n	80018c8 <HAL_GPIO_DeInit+0xb0>
 80018b6:	2304      	movs	r3, #4
 80018b8:	e006      	b.n	80018c8 <HAL_GPIO_DeInit+0xb0>
 80018ba:	2303      	movs	r3, #3
 80018bc:	e004      	b.n	80018c8 <HAL_GPIO_DeInit+0xb0>
 80018be:	2302      	movs	r3, #2
 80018c0:	e002      	b.n	80018c8 <HAL_GPIO_DeInit+0xb0>
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <HAL_GPIO_DeInit+0xb0>
 80018c6:	2300      	movs	r3, #0
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	f002 0203 	and.w	r2, r2, #3
 80018ce:	0092      	lsls	r2, r2, #2
 80018d0:	4093      	lsls	r3, r2
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d132      	bne.n	800193e <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80018d8:	4b48      	ldr	r3, [pc, #288]	; (80019fc <HAL_GPIO_DeInit+0x1e4>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	43db      	mvns	r3, r3
 80018e0:	4946      	ldr	r1, [pc, #280]	; (80019fc <HAL_GPIO_DeInit+0x1e4>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80018e6:	4b45      	ldr	r3, [pc, #276]	; (80019fc <HAL_GPIO_DeInit+0x1e4>)
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	4943      	ldr	r1, [pc, #268]	; (80019fc <HAL_GPIO_DeInit+0x1e4>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80018f4:	4b41      	ldr	r3, [pc, #260]	; (80019fc <HAL_GPIO_DeInit+0x1e4>)
 80018f6:	68da      	ldr	r2, [r3, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	493f      	ldr	r1, [pc, #252]	; (80019fc <HAL_GPIO_DeInit+0x1e4>)
 80018fe:	4013      	ands	r3, r2
 8001900:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001902:	4b3e      	ldr	r3, [pc, #248]	; (80019fc <HAL_GPIO_DeInit+0x1e4>)
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	43db      	mvns	r3, r3
 800190a:	493c      	ldr	r1, [pc, #240]	; (80019fc <HAL_GPIO_DeInit+0x1e4>)
 800190c:	4013      	ands	r3, r2
 800190e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	220f      	movs	r2, #15
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001920:	4a2e      	ldr	r2, [pc, #184]	; (80019dc <HAL_GPIO_DeInit+0x1c4>)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	089b      	lsrs	r3, r3, #2
 8001926:	3302      	adds	r3, #2
 8001928:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	43da      	mvns	r2, r3
 8001930:	482a      	ldr	r0, [pc, #168]	; (80019dc <HAL_GPIO_DeInit+0x1c4>)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	089b      	lsrs	r3, r3, #2
 8001936:	400a      	ands	r2, r1
 8001938:	3302      	adds	r3, #2
 800193a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	2103      	movs	r1, #3
 8001948:	fa01 f303 	lsl.w	r3, r1, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	401a      	ands	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	08da      	lsrs	r2, r3, #3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3208      	adds	r2, #8
 800195c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	220f      	movs	r2, #15
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	08d2      	lsrs	r2, r2, #3
 8001974:	4019      	ands	r1, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3208      	adds	r2, #8
 800197a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	2103      	movs	r1, #3
 8001988:	fa01 f303 	lsl.w	r3, r1, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	401a      	ands	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	2101      	movs	r1, #1
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	fa01 f303 	lsl.w	r3, r1, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	401a      	ands	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	2103      	movs	r1, #3
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	401a      	ands	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	3301      	adds	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2b0f      	cmp	r3, #15
 80019c8:	f67f af34 	bls.w	8001834 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80019cc:	bf00      	nop
 80019ce:	bf00      	nop
 80019d0:	371c      	adds	r7, #28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	40013800 	.word	0x40013800
 80019e0:	40020000 	.word	0x40020000
 80019e4:	40020400 	.word	0x40020400
 80019e8:	40020800 	.word	0x40020800
 80019ec:	40020c00 	.word	0x40020c00
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40021400 	.word	0x40021400
 80019f8:	40021800 	.word	0x40021800
 80019fc:	40013c00 	.word	0x40013c00

08001a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	807b      	strh	r3, [r7, #2]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a10:	787b      	ldrb	r3, [r7, #1]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a16:	887a      	ldrh	r2, [r7, #2]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a1c:	e003      	b.n	8001a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a1e:	887b      	ldrh	r3, [r7, #2]
 8001a20:	041a      	lsls	r2, r3, #16
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	619a      	str	r2, [r3, #24]
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001a32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a34:	b08f      	sub	sp, #60	; 0x3c
 8001a36:	af0a      	add	r7, sp, #40	; 0x28
 8001a38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e054      	b.n	8001aee <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d106      	bne.n	8001a64 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f009 ff46 	bl	800b8f0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2203      	movs	r2, #3
 8001a68:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 f90e 	bl	8004ca4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	603b      	str	r3, [r7, #0]
 8001a8e:	687e      	ldr	r6, [r7, #4]
 8001a90:	466d      	mov	r5, sp
 8001a92:	f106 0410 	add.w	r4, r6, #16
 8001a96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001aa2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001aa6:	1d33      	adds	r3, r6, #4
 8001aa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aaa:	6838      	ldr	r0, [r7, #0]
 8001aac:	f003 f888 	bl	8004bc0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f003 f905 	bl	8004cc6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	603b      	str	r3, [r7, #0]
 8001ac2:	687e      	ldr	r6, [r7, #4]
 8001ac4:	466d      	mov	r5, sp
 8001ac6:	f106 0410 	add.w	r4, r6, #16
 8001aca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001acc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ace:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ad0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ad2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ad6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ada:	1d33      	adds	r3, r6, #4
 8001adc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ade:	6838      	ldr	r0, [r7, #0]
 8001ae0:	f003 fa8e 	bl	8005000 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001af6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001af6:	b590      	push	{r4, r7, lr}
 8001af8:	b089      	sub	sp, #36	; 0x24
 8001afa:	af04      	add	r7, sp, #16
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	4608      	mov	r0, r1
 8001b00:	4611      	mov	r1, r2
 8001b02:	461a      	mov	r2, r3
 8001b04:	4603      	mov	r3, r0
 8001b06:	70fb      	strb	r3, [r7, #3]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	70bb      	strb	r3, [r7, #2]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d101      	bne.n	8001b1e <HAL_HCD_HC_Init+0x28>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e076      	b.n	8001c0c <HAL_HCD_HC_Init+0x116>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	212c      	movs	r1, #44	; 0x2c
 8001b2c:	fb01 f303 	mul.w	r3, r1, r3
 8001b30:	4413      	add	r3, r2
 8001b32:	333d      	adds	r3, #61	; 0x3d
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	212c      	movs	r1, #44	; 0x2c
 8001b3e:	fb01 f303 	mul.w	r3, r1, r3
 8001b42:	4413      	add	r3, r2
 8001b44:	3338      	adds	r3, #56	; 0x38
 8001b46:	787a      	ldrb	r2, [r7, #1]
 8001b48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001b4a:	78fb      	ldrb	r3, [r7, #3]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	212c      	movs	r1, #44	; 0x2c
 8001b50:	fb01 f303 	mul.w	r3, r1, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	3340      	adds	r3, #64	; 0x40
 8001b58:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001b5a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b5c:	78fb      	ldrb	r3, [r7, #3]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	212c      	movs	r1, #44	; 0x2c
 8001b62:	fb01 f303 	mul.w	r3, r1, r3
 8001b66:	4413      	add	r3, r2
 8001b68:	3339      	adds	r3, #57	; 0x39
 8001b6a:	78fa      	ldrb	r2, [r7, #3]
 8001b6c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001b6e:	78fb      	ldrb	r3, [r7, #3]
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	212c      	movs	r1, #44	; 0x2c
 8001b74:	fb01 f303 	mul.w	r3, r1, r3
 8001b78:	4413      	add	r3, r2
 8001b7a:	333f      	adds	r3, #63	; 0x3f
 8001b7c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001b80:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001b82:	78fb      	ldrb	r3, [r7, #3]
 8001b84:	78ba      	ldrb	r2, [r7, #2]
 8001b86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b8a:	b2d0      	uxtb	r0, r2
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	212c      	movs	r1, #44	; 0x2c
 8001b90:	fb01 f303 	mul.w	r3, r1, r3
 8001b94:	4413      	add	r3, r2
 8001b96:	333a      	adds	r3, #58	; 0x3a
 8001b98:	4602      	mov	r2, r0
 8001b9a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001b9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	da09      	bge.n	8001bb8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	212c      	movs	r1, #44	; 0x2c
 8001baa:	fb01 f303 	mul.w	r3, r1, r3
 8001bae:	4413      	add	r3, r2
 8001bb0:	333b      	adds	r3, #59	; 0x3b
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	701a      	strb	r2, [r3, #0]
 8001bb6:	e008      	b.n	8001bca <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	212c      	movs	r1, #44	; 0x2c
 8001bbe:	fb01 f303 	mul.w	r3, r1, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	333b      	adds	r3, #59	; 0x3b
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	212c      	movs	r1, #44	; 0x2c
 8001bd0:	fb01 f303 	mul.w	r3, r1, r3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	333c      	adds	r3, #60	; 0x3c
 8001bd8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001bdc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	787c      	ldrb	r4, [r7, #1]
 8001be4:	78ba      	ldrb	r2, [r7, #2]
 8001be6:	78f9      	ldrb	r1, [r7, #3]
 8001be8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bea:	9302      	str	r3, [sp, #8]
 8001bec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001bf0:	9301      	str	r3, [sp, #4]
 8001bf2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	4623      	mov	r3, r4
 8001bfa:	f003 fb7b 	bl	80052f4 <USB_HC_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd90      	pop	{r4, r7, pc}

08001c14 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <HAL_HCD_HC_Halt+0x1e>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e00f      	b.n	8001c52 <HAL_HCD_HC_Halt+0x3e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	78fa      	ldrb	r2, [r7, #3]
 8001c40:	4611      	mov	r1, r2
 8001c42:	4618      	mov	r0, r3
 8001c44:	f003 fdcb 	bl	80057de <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_HCD_DeInit>:
  * @brief  DeInitialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_DeInit(HCD_HandleTypeDef *hhcd)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_HCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e010      	b.n	8001c8e <HAL_HCD_DeInit+0x34>
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2203      	movs	r2, #3
 8001c70:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* DeInit the low level hardware */
  hhcd->MspDeInitCallback(hhcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_HCD_MspDeInit(hhcd);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f009 feb1 	bl	800b9dc <HAL_HCD_MspDeInit>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

  __HAL_HCD_DISABLE(hhcd);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 f810 	bl	8004ca4 <USB_DisableGlobalInt>

  hhcd->State = HAL_HCD_STATE_RESET;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	4608      	mov	r0, r1
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	70fb      	strb	r3, [r7, #3]
 8001caa:	460b      	mov	r3, r1
 8001cac:	70bb      	strb	r3, [r7, #2]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	212c      	movs	r1, #44	; 0x2c
 8001cb8:	fb01 f303 	mul.w	r3, r1, r3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	333b      	adds	r3, #59	; 0x3b
 8001cc0:	78ba      	ldrb	r2, [r7, #2]
 8001cc2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	212c      	movs	r1, #44	; 0x2c
 8001cca:	fb01 f303 	mul.w	r3, r1, r3
 8001cce:	4413      	add	r3, r2
 8001cd0:	333f      	adds	r3, #63	; 0x3f
 8001cd2:	787a      	ldrb	r2, [r7, #1]
 8001cd4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001cd6:	7c3b      	ldrb	r3, [r7, #16]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d112      	bne.n	8001d02 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	212c      	movs	r1, #44	; 0x2c
 8001ce2:	fb01 f303 	mul.w	r3, r1, r3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3342      	adds	r3, #66	; 0x42
 8001cea:	2203      	movs	r2, #3
 8001cec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001cee:	78fb      	ldrb	r3, [r7, #3]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	212c      	movs	r1, #44	; 0x2c
 8001cf4:	fb01 f303 	mul.w	r3, r1, r3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	333d      	adds	r3, #61	; 0x3d
 8001cfc:	7f3a      	ldrb	r2, [r7, #28]
 8001cfe:	701a      	strb	r2, [r3, #0]
 8001d00:	e008      	b.n	8001d14 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	212c      	movs	r1, #44	; 0x2c
 8001d08:	fb01 f303 	mul.w	r3, r1, r3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3342      	adds	r3, #66	; 0x42
 8001d10:	2202      	movs	r2, #2
 8001d12:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001d14:	787b      	ldrb	r3, [r7, #1]
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	f200 80c6 	bhi.w	8001ea8 <HAL_HCD_HC_SubmitRequest+0x210>
 8001d1c:	a201      	add	r2, pc, #4	; (adr r2, 8001d24 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d22:	bf00      	nop
 8001d24:	08001d35 	.word	0x08001d35
 8001d28:	08001e95 	.word	0x08001e95
 8001d2c:	08001d99 	.word	0x08001d99
 8001d30:	08001e17 	.word	0x08001e17
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001d34:	7c3b      	ldrb	r3, [r7, #16]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	f040 80b8 	bne.w	8001eac <HAL_HCD_HC_SubmitRequest+0x214>
 8001d3c:	78bb      	ldrb	r3, [r7, #2]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f040 80b4 	bne.w	8001eac <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001d44:	8b3b      	ldrh	r3, [r7, #24]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d108      	bne.n	8001d5c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	212c      	movs	r1, #44	; 0x2c
 8001d50:	fb01 f303 	mul.w	r3, r1, r3
 8001d54:	4413      	add	r3, r2
 8001d56:	3355      	adds	r3, #85	; 0x55
 8001d58:	2201      	movs	r2, #1
 8001d5a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d5c:	78fb      	ldrb	r3, [r7, #3]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	212c      	movs	r1, #44	; 0x2c
 8001d62:	fb01 f303 	mul.w	r3, r1, r3
 8001d66:	4413      	add	r3, r2
 8001d68:	3355      	adds	r3, #85	; 0x55
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d109      	bne.n	8001d84 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	212c      	movs	r1, #44	; 0x2c
 8001d76:	fb01 f303 	mul.w	r3, r1, r3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3342      	adds	r3, #66	; 0x42
 8001d7e:	2200      	movs	r2, #0
 8001d80:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d82:	e093      	b.n	8001eac <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	212c      	movs	r1, #44	; 0x2c
 8001d8a:	fb01 f303 	mul.w	r3, r1, r3
 8001d8e:	4413      	add	r3, r2
 8001d90:	3342      	adds	r3, #66	; 0x42
 8001d92:	2202      	movs	r2, #2
 8001d94:	701a      	strb	r2, [r3, #0]
      break;
 8001d96:	e089      	b.n	8001eac <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001d98:	78bb      	ldrb	r3, [r7, #2]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d11d      	bne.n	8001dda <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	212c      	movs	r1, #44	; 0x2c
 8001da4:	fb01 f303 	mul.w	r3, r1, r3
 8001da8:	4413      	add	r3, r2
 8001daa:	3355      	adds	r3, #85	; 0x55
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d109      	bne.n	8001dc6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	212c      	movs	r1, #44	; 0x2c
 8001db8:	fb01 f303 	mul.w	r3, r1, r3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3342      	adds	r3, #66	; 0x42
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001dc4:	e073      	b.n	8001eae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	212c      	movs	r1, #44	; 0x2c
 8001dcc:	fb01 f303 	mul.w	r3, r1, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3342      	adds	r3, #66	; 0x42
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	701a      	strb	r2, [r3, #0]
      break;
 8001dd8:	e069      	b.n	8001eae <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	212c      	movs	r1, #44	; 0x2c
 8001de0:	fb01 f303 	mul.w	r3, r1, r3
 8001de4:	4413      	add	r3, r2
 8001de6:	3354      	adds	r3, #84	; 0x54
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d109      	bne.n	8001e02 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	212c      	movs	r1, #44	; 0x2c
 8001df4:	fb01 f303 	mul.w	r3, r1, r3
 8001df8:	4413      	add	r3, r2
 8001dfa:	3342      	adds	r3, #66	; 0x42
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
      break;
 8001e00:	e055      	b.n	8001eae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	212c      	movs	r1, #44	; 0x2c
 8001e08:	fb01 f303 	mul.w	r3, r1, r3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3342      	adds	r3, #66	; 0x42
 8001e10:	2202      	movs	r2, #2
 8001e12:	701a      	strb	r2, [r3, #0]
      break;
 8001e14:	e04b      	b.n	8001eae <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001e16:	78bb      	ldrb	r3, [r7, #2]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d11d      	bne.n	8001e58 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	212c      	movs	r1, #44	; 0x2c
 8001e22:	fb01 f303 	mul.w	r3, r1, r3
 8001e26:	4413      	add	r3, r2
 8001e28:	3355      	adds	r3, #85	; 0x55
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d109      	bne.n	8001e44 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	212c      	movs	r1, #44	; 0x2c
 8001e36:	fb01 f303 	mul.w	r3, r1, r3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3342      	adds	r3, #66	; 0x42
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001e42:	e034      	b.n	8001eae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	212c      	movs	r1, #44	; 0x2c
 8001e4a:	fb01 f303 	mul.w	r3, r1, r3
 8001e4e:	4413      	add	r3, r2
 8001e50:	3342      	adds	r3, #66	; 0x42
 8001e52:	2202      	movs	r2, #2
 8001e54:	701a      	strb	r2, [r3, #0]
      break;
 8001e56:	e02a      	b.n	8001eae <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	212c      	movs	r1, #44	; 0x2c
 8001e5e:	fb01 f303 	mul.w	r3, r1, r3
 8001e62:	4413      	add	r3, r2
 8001e64:	3354      	adds	r3, #84	; 0x54
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d109      	bne.n	8001e80 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	212c      	movs	r1, #44	; 0x2c
 8001e72:	fb01 f303 	mul.w	r3, r1, r3
 8001e76:	4413      	add	r3, r2
 8001e78:	3342      	adds	r3, #66	; 0x42
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]
      break;
 8001e7e:	e016      	b.n	8001eae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	212c      	movs	r1, #44	; 0x2c
 8001e86:	fb01 f303 	mul.w	r3, r1, r3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3342      	adds	r3, #66	; 0x42
 8001e8e:	2202      	movs	r2, #2
 8001e90:	701a      	strb	r2, [r3, #0]
      break;
 8001e92:	e00c      	b.n	8001eae <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	212c      	movs	r1, #44	; 0x2c
 8001e9a:	fb01 f303 	mul.w	r3, r1, r3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3342      	adds	r3, #66	; 0x42
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
      break;
 8001ea6:	e002      	b.n	8001eae <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001ea8:	bf00      	nop
 8001eaa:	e000      	b.n	8001eae <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001eac:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	212c      	movs	r1, #44	; 0x2c
 8001eb4:	fb01 f303 	mul.w	r3, r1, r3
 8001eb8:	4413      	add	r3, r2
 8001eba:	3344      	adds	r3, #68	; 0x44
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	8b3a      	ldrh	r2, [r7, #24]
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	202c      	movs	r0, #44	; 0x2c
 8001ec8:	fb00 f303 	mul.w	r3, r0, r3
 8001ecc:	440b      	add	r3, r1
 8001ece:	334c      	adds	r3, #76	; 0x4c
 8001ed0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001ed2:	78fb      	ldrb	r3, [r7, #3]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	212c      	movs	r1, #44	; 0x2c
 8001ed8:	fb01 f303 	mul.w	r3, r1, r3
 8001edc:	4413      	add	r3, r2
 8001ede:	3360      	adds	r3, #96	; 0x60
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	212c      	movs	r1, #44	; 0x2c
 8001eea:	fb01 f303 	mul.w	r3, r1, r3
 8001eee:	4413      	add	r3, r2
 8001ef0:	3350      	adds	r3, #80	; 0x50
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	212c      	movs	r1, #44	; 0x2c
 8001efc:	fb01 f303 	mul.w	r3, r1, r3
 8001f00:	4413      	add	r3, r2
 8001f02:	3339      	adds	r3, #57	; 0x39
 8001f04:	78fa      	ldrb	r2, [r7, #3]
 8001f06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	212c      	movs	r1, #44	; 0x2c
 8001f0e:	fb01 f303 	mul.w	r3, r1, r3
 8001f12:	4413      	add	r3, r2
 8001f14:	3361      	adds	r3, #97	; 0x61
 8001f16:	2200      	movs	r2, #0
 8001f18:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	222c      	movs	r2, #44	; 0x2c
 8001f22:	fb02 f303 	mul.w	r3, r2, r3
 8001f26:	3338      	adds	r3, #56	; 0x38
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	18d1      	adds	r1, r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	f003 fb00 	bl	8005538 <USB_HC_StartXfer>
 8001f38:	4603      	mov	r3, r0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop

08001f44 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f003 f80d 	bl	8004f7a <USB_GetMode>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	f040 80f6 	bne.w	8002154 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f002 fff1 	bl	8004f54 <USB_ReadInterrupts>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 80ec 	beq.w	8002152 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f002 ffe8 	bl	8004f54 <USB_ReadInterrupts>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f8e:	d104      	bne.n	8001f9a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f98:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f002 ffd8 	bl	8004f54 <USB_ReadInterrupts>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001faa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fae:	d104      	bne.n	8001fba <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001fb8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f002 ffc8 	bl	8004f54 <USB_ReadInterrupts>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001fce:	d104      	bne.n	8001fda <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fd8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f002 ffb8 	bl	8004f54 <USB_ReadInterrupts>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d103      	bne.n	8001ff6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f002 ffaa 	bl	8004f54 <USB_ReadInterrupts>
 8002000:	4603      	mov	r3, r0
 8002002:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002006:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800200a:	d11c      	bne.n	8002046 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002014:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10f      	bne.n	8002046 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002026:	2110      	movs	r1, #16
 8002028:	6938      	ldr	r0, [r7, #16]
 800202a:	f002 fe99 	bl	8004d60 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800202e:	6938      	ldr	r0, [r7, #16]
 8002030:	f002 feca 	bl	8004dc8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2101      	movs	r1, #1
 800203a:	4618      	mov	r0, r3
 800203c:	f003 f894 	bl	8005168 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f009 fd07 	bl	800ba54 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f002 ff82 	bl	8004f54 <USB_ReadInterrupts>
 8002050:	4603      	mov	r3, r0
 8002052:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002056:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800205a:	d102      	bne.n	8002062 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f001 f89e 	bl	800319e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f002 ff74 	bl	8004f54 <USB_ReadInterrupts>
 800206c:	4603      	mov	r3, r0
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b08      	cmp	r3, #8
 8002074:	d106      	bne.n	8002084 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f009 fcd0 	bl	800ba1c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2208      	movs	r2, #8
 8002082:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f002 ff63 	bl	8004f54 <USB_ReadInterrupts>
 800208e:	4603      	mov	r3, r0
 8002090:	f003 0310 	and.w	r3, r3, #16
 8002094:	2b10      	cmp	r3, #16
 8002096:	d101      	bne.n	800209c <HAL_HCD_IRQHandler+0x158>
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <HAL_HCD_IRQHandler+0x15a>
 800209c:	2300      	movs	r3, #0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d012      	beq.n	80020c8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	699a      	ldr	r2, [r3, #24]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0210 	bic.w	r2, r2, #16
 80020b0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 ffa1 	bl	8002ffa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699a      	ldr	r2, [r3, #24]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0210 	orr.w	r2, r2, #16
 80020c6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f002 ff41 	bl	8004f54 <USB_ReadInterrupts>
 80020d2:	4603      	mov	r3, r0
 80020d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020dc:	d13a      	bne.n	8002154 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f003 fb6a 	bl	80057bc <USB_HC_ReadInterrupt>
 80020e8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	e025      	b.n	800213c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	fa22 f303 	lsr.w	r3, r2, r3
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d018      	beq.n	8002136 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4413      	add	r3, r2
 800210c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800211a:	d106      	bne.n	800212a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	b2db      	uxtb	r3, r3
 8002120:	4619      	mov	r1, r3
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f8ab 	bl	800227e <HCD_HC_IN_IRQHandler>
 8002128:	e005      	b.n	8002136 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	4619      	mov	r1, r3
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 fbf9 	bl	8002928 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3301      	adds	r3, #1
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	429a      	cmp	r2, r3
 8002144:	d3d4      	bcc.n	80020f0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800214e:	615a      	str	r2, [r3, #20]
 8002150:	e000      	b.n	8002154 <HAL_HCD_IRQHandler+0x210>
      return;
 8002152:	bf00      	nop
    }
  }
}
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_HCD_Start+0x16>
 800216c:	2302      	movs	r3, #2
 800216e:	e013      	b.n	8002198 <HAL_HCD_Start+0x3e>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2101      	movs	r1, #1
 800217e:	4618      	mov	r0, r3
 8002180:	f003 f856 	bl	8005230 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f002 fd7a 	bl	8004c82 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_HCD_Stop+0x16>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e00d      	b.n	80021d2 <HAL_HCD_Stop+0x32>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f003 fc44 	bl	8005a50 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f002 fff8 	bl	80051dc <USB_ResetPort>
 80021ec:	4603      	mov	r3, r0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	460b      	mov	r3, r1
 8002200:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	212c      	movs	r1, #44	; 0x2c
 8002208:	fb01 f303 	mul.w	r3, r1, r3
 800220c:	4413      	add	r3, r2
 800220e:	3360      	adds	r3, #96	; 0x60
 8002210:	781b      	ldrb	r3, [r3, #0]
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800222a:	78fb      	ldrb	r3, [r7, #3]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	212c      	movs	r1, #44	; 0x2c
 8002230:	fb01 f303 	mul.w	r3, r1, r3
 8002234:	4413      	add	r3, r2
 8002236:	3350      	adds	r3, #80	; 0x50
 8002238:	681b      	ldr	r3, [r3, #0]
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f003 f83c 	bl	80052d0 <USB_GetCurrentFrame>
 8002258:	4603      	mov	r3, r0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f003 f817 	bl	80052a2 <USB_GetHostSpeed>
 8002274:	4603      	mov	r3, r0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	460b      	mov	r3, r1
 8002288:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d11a      	bne.n	80022e4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	015a      	lsls	r2, r3, #5
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ba:	461a      	mov	r2, r3
 80022bc:	2304      	movs	r3, #4
 80022be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	212c      	movs	r1, #44	; 0x2c
 80022c6:	fb01 f303 	mul.w	r3, r1, r3
 80022ca:	4413      	add	r3, r2
 80022cc:	3361      	adds	r3, #97	; 0x61
 80022ce:	2206      	movs	r2, #6
 80022d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	4611      	mov	r1, r2
 80022dc:	4618      	mov	r0, r3
 80022de:	f003 fa7e 	bl	80057de <USB_HC_Halt>
 80022e2:	e0af      	b.n	8002444 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022fa:	d11b      	bne.n	8002334 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	015a      	lsls	r2, r3, #5
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	4413      	add	r3, r2
 8002304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002308:	461a      	mov	r2, r3
 800230a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800230e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	212c      	movs	r1, #44	; 0x2c
 8002316:	fb01 f303 	mul.w	r3, r1, r3
 800231a:	4413      	add	r3, r2
 800231c:	3361      	adds	r3, #97	; 0x61
 800231e:	2207      	movs	r2, #7
 8002320:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f003 fa56 	bl	80057de <USB_HC_Halt>
 8002332:	e087      	b.n	8002444 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4413      	add	r3, r2
 800233c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 0320 	and.w	r3, r3, #32
 8002346:	2b20      	cmp	r3, #32
 8002348:	d109      	bne.n	800235e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4413      	add	r3, r2
 8002352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002356:	461a      	mov	r2, r3
 8002358:	2320      	movs	r3, #32
 800235a:	6093      	str	r3, [r2, #8]
 800235c:	e072      	b.n	8002444 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4413      	add	r3, r2
 8002366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b08      	cmp	r3, #8
 8002372:	d11a      	bne.n	80023aa <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	461a      	mov	r2, r3
 8002382:	2308      	movs	r3, #8
 8002384:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	212c      	movs	r1, #44	; 0x2c
 800238c:	fb01 f303 	mul.w	r3, r1, r3
 8002390:	4413      	add	r3, r2
 8002392:	3361      	adds	r3, #97	; 0x61
 8002394:	2205      	movs	r2, #5
 8002396:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	4611      	mov	r1, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 fa1b 	bl	80057de <USB_HC_Halt>
 80023a8:	e04c      	b.n	8002444 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c0:	d11b      	bne.n	80023fa <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ce:	461a      	mov	r2, r3
 80023d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	212c      	movs	r1, #44	; 0x2c
 80023dc:	fb01 f303 	mul.w	r3, r1, r3
 80023e0:	4413      	add	r3, r2
 80023e2:	3361      	adds	r3, #97	; 0x61
 80023e4:	2208      	movs	r2, #8
 80023e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	4611      	mov	r1, r2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f003 f9f3 	bl	80057de <USB_HC_Halt>
 80023f8:	e024      	b.n	8002444 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	015a      	lsls	r2, r3, #5
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4413      	add	r3, r2
 8002402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240c:	2b80      	cmp	r3, #128	; 0x80
 800240e:	d119      	bne.n	8002444 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	015a      	lsls	r2, r3, #5
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4413      	add	r3, r2
 8002418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241c:	461a      	mov	r2, r3
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	212c      	movs	r1, #44	; 0x2c
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	4413      	add	r3, r2
 800242e:	3361      	adds	r3, #97	; 0x61
 8002430:	2206      	movs	r2, #6
 8002432:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	4611      	mov	r1, r2
 800243e:	4618      	mov	r0, r3
 8002440:	f003 f9cd 	bl	80057de <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4413      	add	r3, r2
 800244c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800245a:	d112      	bne.n	8002482 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	4611      	mov	r1, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f003 f9b9 	bl	80057de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4413      	add	r3, r2
 8002474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002478:	461a      	mov	r2, r3
 800247a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800247e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002480:	e24e      	b.n	8002920 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	015a      	lsls	r2, r3, #5
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4413      	add	r3, r2
 800248a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b01      	cmp	r3, #1
 8002496:	f040 80df 	bne.w	8002658 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d019      	beq.n	80024d6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	212c      	movs	r1, #44	; 0x2c
 80024a8:	fb01 f303 	mul.w	r3, r1, r3
 80024ac:	4413      	add	r3, r2
 80024ae:	3348      	adds	r3, #72	; 0x48
 80024b0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	0159      	lsls	r1, r3, #5
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	440b      	add	r3, r1
 80024ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80024c4:	1ad2      	subs	r2, r2, r3
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	202c      	movs	r0, #44	; 0x2c
 80024cc:	fb00 f303 	mul.w	r3, r0, r3
 80024d0:	440b      	add	r3, r1
 80024d2:	3350      	adds	r3, #80	; 0x50
 80024d4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	212c      	movs	r1, #44	; 0x2c
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	3361      	adds	r3, #97	; 0x61
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	212c      	movs	r1, #44	; 0x2c
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	335c      	adds	r3, #92	; 0x5c
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4413      	add	r3, r2
 8002502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002506:	461a      	mov	r2, r3
 8002508:	2301      	movs	r3, #1
 800250a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	212c      	movs	r1, #44	; 0x2c
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	4413      	add	r3, r2
 8002518:	333f      	adds	r3, #63	; 0x3f
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d009      	beq.n	8002534 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	212c      	movs	r1, #44	; 0x2c
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	4413      	add	r3, r2
 800252c:	333f      	adds	r3, #63	; 0x3f
 800252e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002530:	2b02      	cmp	r3, #2
 8002532:	d111      	bne.n	8002558 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	4611      	mov	r1, r2
 800253e:	4618      	mov	r0, r3
 8002540:	f003 f94d 	bl	80057de <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4413      	add	r3, r2
 800254c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002550:	461a      	mov	r2, r3
 8002552:	2310      	movs	r3, #16
 8002554:	6093      	str	r3, [r2, #8]
 8002556:	e03a      	b.n	80025ce <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	212c      	movs	r1, #44	; 0x2c
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	4413      	add	r3, r2
 8002564:	333f      	adds	r3, #63	; 0x3f
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b03      	cmp	r3, #3
 800256a:	d009      	beq.n	8002580 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	212c      	movs	r1, #44	; 0x2c
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	333f      	adds	r3, #63	; 0x3f
 800257a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800257c:	2b01      	cmp	r3, #1
 800257e:	d126      	bne.n	80025ce <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4413      	add	r3, r2
 8002588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	0151      	lsls	r1, r2, #5
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	440a      	add	r2, r1
 8002596:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800259a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800259e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	212c      	movs	r1, #44	; 0x2c
 80025a6:	fb01 f303 	mul.w	r3, r1, r3
 80025aa:	4413      	add	r3, r2
 80025ac:	3360      	adds	r3, #96	; 0x60
 80025ae:	2201      	movs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	b2d9      	uxtb	r1, r3
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	202c      	movs	r0, #44	; 0x2c
 80025bc:	fb00 f303 	mul.w	r3, r0, r3
 80025c0:	4413      	add	r3, r2
 80025c2:	3360      	adds	r3, #96	; 0x60
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f009 fa51 	bl	800ba70 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d12b      	bne.n	800262e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	212c      	movs	r1, #44	; 0x2c
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	3348      	adds	r3, #72	; 0x48
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	202c      	movs	r0, #44	; 0x2c
 80025ec:	fb00 f202 	mul.w	r2, r0, r2
 80025f0:	440a      	add	r2, r1
 80025f2:	3240      	adds	r2, #64	; 0x40
 80025f4:	8812      	ldrh	r2, [r2, #0]
 80025f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 818e 	beq.w	8002920 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	212c      	movs	r1, #44	; 0x2c
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	4413      	add	r3, r2
 8002610:	3354      	adds	r3, #84	; 0x54
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	f083 0301 	eor.w	r3, r3, #1
 8002618:	b2d8      	uxtb	r0, r3
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	212c      	movs	r1, #44	; 0x2c
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	3354      	adds	r3, #84	; 0x54
 8002628:	4602      	mov	r2, r0
 800262a:	701a      	strb	r2, [r3, #0]
}
 800262c:	e178      	b.n	8002920 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	212c      	movs	r1, #44	; 0x2c
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	4413      	add	r3, r2
 800263a:	3354      	adds	r3, #84	; 0x54
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	f083 0301 	eor.w	r3, r3, #1
 8002642:	b2d8      	uxtb	r0, r3
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	212c      	movs	r1, #44	; 0x2c
 800264a:	fb01 f303 	mul.w	r3, r1, r3
 800264e:	4413      	add	r3, r2
 8002650:	3354      	adds	r3, #84	; 0x54
 8002652:	4602      	mov	r2, r0
 8002654:	701a      	strb	r2, [r3, #0]
}
 8002656:	e163      	b.n	8002920 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4413      	add	r3, r2
 8002660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b02      	cmp	r3, #2
 800266c:	f040 80f6 	bne.w	800285c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	212c      	movs	r1, #44	; 0x2c
 8002676:	fb01 f303 	mul.w	r3, r1, r3
 800267a:	4413      	add	r3, r2
 800267c:	3361      	adds	r3, #97	; 0x61
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d109      	bne.n	8002698 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	212c      	movs	r1, #44	; 0x2c
 800268a:	fb01 f303 	mul.w	r3, r1, r3
 800268e:	4413      	add	r3, r2
 8002690:	3360      	adds	r3, #96	; 0x60
 8002692:	2201      	movs	r2, #1
 8002694:	701a      	strb	r2, [r3, #0]
 8002696:	e0c9      	b.n	800282c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	212c      	movs	r1, #44	; 0x2c
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	3361      	adds	r3, #97	; 0x61
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b05      	cmp	r3, #5
 80026aa:	d109      	bne.n	80026c0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	212c      	movs	r1, #44	; 0x2c
 80026b2:	fb01 f303 	mul.w	r3, r1, r3
 80026b6:	4413      	add	r3, r2
 80026b8:	3360      	adds	r3, #96	; 0x60
 80026ba:	2205      	movs	r2, #5
 80026bc:	701a      	strb	r2, [r3, #0]
 80026be:	e0b5      	b.n	800282c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	212c      	movs	r1, #44	; 0x2c
 80026c6:	fb01 f303 	mul.w	r3, r1, r3
 80026ca:	4413      	add	r3, r2
 80026cc:	3361      	adds	r3, #97	; 0x61
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b06      	cmp	r3, #6
 80026d2:	d009      	beq.n	80026e8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	212c      	movs	r1, #44	; 0x2c
 80026da:	fb01 f303 	mul.w	r3, r1, r3
 80026de:	4413      	add	r3, r2
 80026e0:	3361      	adds	r3, #97	; 0x61
 80026e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d150      	bne.n	800278a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	212c      	movs	r1, #44	; 0x2c
 80026ee:	fb01 f303 	mul.w	r3, r1, r3
 80026f2:	4413      	add	r3, r2
 80026f4:	335c      	adds	r3, #92	; 0x5c
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	202c      	movs	r0, #44	; 0x2c
 8002700:	fb00 f303 	mul.w	r3, r0, r3
 8002704:	440b      	add	r3, r1
 8002706:	335c      	adds	r3, #92	; 0x5c
 8002708:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	212c      	movs	r1, #44	; 0x2c
 8002710:	fb01 f303 	mul.w	r3, r1, r3
 8002714:	4413      	add	r3, r2
 8002716:	335c      	adds	r3, #92	; 0x5c
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d912      	bls.n	8002744 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	212c      	movs	r1, #44	; 0x2c
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	4413      	add	r3, r2
 800272a:	335c      	adds	r3, #92	; 0x5c
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	212c      	movs	r1, #44	; 0x2c
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	4413      	add	r3, r2
 800273c:	3360      	adds	r3, #96	; 0x60
 800273e:	2204      	movs	r2, #4
 8002740:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002742:	e073      	b.n	800282c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	212c      	movs	r1, #44	; 0x2c
 800274a:	fb01 f303 	mul.w	r3, r1, r3
 800274e:	4413      	add	r3, r2
 8002750:	3360      	adds	r3, #96	; 0x60
 8002752:	2202      	movs	r2, #2
 8002754:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4413      	add	r3, r2
 800275e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800276c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002774:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4413      	add	r3, r2
 800277e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002782:	461a      	mov	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002788:	e050      	b.n	800282c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	212c      	movs	r1, #44	; 0x2c
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	3361      	adds	r3, #97	; 0x61
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b03      	cmp	r3, #3
 800279c:	d122      	bne.n	80027e4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	212c      	movs	r1, #44	; 0x2c
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	3360      	adds	r3, #96	; 0x60
 80027ac:	2202      	movs	r2, #2
 80027ae:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027c6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027ce:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027dc:	461a      	mov	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	e023      	b.n	800282c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	212c      	movs	r1, #44	; 0x2c
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	3361      	adds	r3, #97	; 0x61
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b07      	cmp	r3, #7
 80027f6:	d119      	bne.n	800282c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	212c      	movs	r1, #44	; 0x2c
 80027fe:	fb01 f303 	mul.w	r3, r1, r3
 8002802:	4413      	add	r3, r2
 8002804:	335c      	adds	r3, #92	; 0x5c
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	202c      	movs	r0, #44	; 0x2c
 8002810:	fb00 f303 	mul.w	r3, r0, r3
 8002814:	440b      	add	r3, r1
 8002816:	335c      	adds	r3, #92	; 0x5c
 8002818:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	212c      	movs	r1, #44	; 0x2c
 8002820:	fb01 f303 	mul.w	r3, r1, r3
 8002824:	4413      	add	r3, r2
 8002826:	3360      	adds	r3, #96	; 0x60
 8002828:	2204      	movs	r2, #4
 800282a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002838:	461a      	mov	r2, r3
 800283a:	2302      	movs	r3, #2
 800283c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	b2d9      	uxtb	r1, r3
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	202c      	movs	r0, #44	; 0x2c
 8002848:	fb00 f303 	mul.w	r3, r0, r3
 800284c:	4413      	add	r3, r2
 800284e:	3360      	adds	r3, #96	; 0x60
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f009 f90b 	bl	800ba70 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800285a:	e061      	b.n	8002920 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4413      	add	r3, r2
 8002864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 0310 	and.w	r3, r3, #16
 800286e:	2b10      	cmp	r3, #16
 8002870:	d156      	bne.n	8002920 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	212c      	movs	r1, #44	; 0x2c
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	4413      	add	r3, r2
 800287e:	333f      	adds	r3, #63	; 0x3f
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b03      	cmp	r3, #3
 8002884:	d111      	bne.n	80028aa <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	212c      	movs	r1, #44	; 0x2c
 800288c:	fb01 f303 	mul.w	r3, r1, r3
 8002890:	4413      	add	r3, r2
 8002892:	335c      	adds	r3, #92	; 0x5c
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	4611      	mov	r1, r2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f002 ff9b 	bl	80057de <USB_HC_Halt>
 80028a8:	e031      	b.n	800290e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	212c      	movs	r1, #44	; 0x2c
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	333f      	adds	r3, #63	; 0x3f
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d009      	beq.n	80028d2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	212c      	movs	r1, #44	; 0x2c
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	4413      	add	r3, r2
 80028ca:	333f      	adds	r3, #63	; 0x3f
 80028cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d11d      	bne.n	800290e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	212c      	movs	r1, #44	; 0x2c
 80028d8:	fb01 f303 	mul.w	r3, r1, r3
 80028dc:	4413      	add	r3, r2
 80028de:	335c      	adds	r3, #92	; 0x5c
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d110      	bne.n	800290e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	3361      	adds	r3, #97	; 0x61
 80028fa:	2203      	movs	r2, #3
 80028fc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	4611      	mov	r1, r2
 8002908:	4618      	mov	r0, r3
 800290a:	f002 ff68 	bl	80057de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4413      	add	r3, r2
 8002916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291a:	461a      	mov	r2, r3
 800291c:	2310      	movs	r3, #16
 800291e:	6093      	str	r3, [r2, #8]
}
 8002920:	bf00      	nop
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800293e:	78fb      	ldrb	r3, [r7, #3]
 8002940:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	015a      	lsls	r2, r3, #5
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	4413      	add	r3, r2
 800294a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b04      	cmp	r3, #4
 8002956:	d11a      	bne.n	800298e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	4413      	add	r3, r2
 8002960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002964:	461a      	mov	r2, r3
 8002966:	2304      	movs	r3, #4
 8002968:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	212c      	movs	r1, #44	; 0x2c
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	4413      	add	r3, r2
 8002976:	3361      	adds	r3, #97	; 0x61
 8002978:	2206      	movs	r2, #6
 800297a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	4611      	mov	r1, r2
 8002986:	4618      	mov	r0, r3
 8002988:	f002 ff29 	bl	80057de <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800298c:	e331      	b.n	8002ff2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	4413      	add	r3, r2
 8002996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 0320 	and.w	r3, r3, #32
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	d12e      	bne.n	8002a02 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	015a      	lsls	r2, r3, #5
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b0:	461a      	mov	r2, r3
 80029b2:	2320      	movs	r3, #32
 80029b4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	212c      	movs	r1, #44	; 0x2c
 80029bc:	fb01 f303 	mul.w	r3, r1, r3
 80029c0:	4413      	add	r3, r2
 80029c2:	333d      	adds	r3, #61	; 0x3d
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	f040 8313 	bne.w	8002ff2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	212c      	movs	r1, #44	; 0x2c
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	333d      	adds	r3, #61	; 0x3d
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	212c      	movs	r1, #44	; 0x2c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	3360      	adds	r3, #96	; 0x60
 80029ec:	2202      	movs	r2, #2
 80029ee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	4611      	mov	r1, r2
 80029fa:	4618      	mov	r0, r3
 80029fc:	f002 feef 	bl	80057de <USB_HC_Halt>
}
 8002a00:	e2f7      	b.n	8002ff2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	015a      	lsls	r2, r3, #5
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a18:	d112      	bne.n	8002a40 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a26:	461a      	mov	r2, r3
 8002a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a2c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f002 fed0 	bl	80057de <USB_HC_Halt>
}
 8002a3e:	e2d8      	b.n	8002ff2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d140      	bne.n	8002ad8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	212c      	movs	r1, #44	; 0x2c
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	4413      	add	r3, r2
 8002a62:	335c      	adds	r3, #92	; 0x5c
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7a:	2b40      	cmp	r3, #64	; 0x40
 8002a7c:	d111      	bne.n	8002aa2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	212c      	movs	r1, #44	; 0x2c
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	333d      	adds	r3, #61	; 0x3d
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	2340      	movs	r3, #64	; 0x40
 8002aa0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aae:	461a      	mov	r2, r3
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	212c      	movs	r1, #44	; 0x2c
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	4413      	add	r3, r2
 8002ac0:	3361      	adds	r3, #97	; 0x61
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f002 fe84 	bl	80057de <USB_HC_Halt>
}
 8002ad6:	e28c      	b.n	8002ff2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	2b40      	cmp	r3, #64	; 0x40
 8002aec:	d12c      	bne.n	8002b48 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	212c      	movs	r1, #44	; 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	3361      	adds	r3, #97	; 0x61
 8002afc:	2204      	movs	r2, #4
 8002afe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	212c      	movs	r1, #44	; 0x2c
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	333d      	adds	r3, #61	; 0x3d
 8002b0e:	2201      	movs	r2, #1
 8002b10:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	212c      	movs	r1, #44	; 0x2c
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	335c      	adds	r3, #92	; 0x5c
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f002 fe55 	bl	80057de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b40:	461a      	mov	r2, r3
 8002b42:	2340      	movs	r3, #64	; 0x40
 8002b44:	6093      	str	r3, [r2, #8]
}
 8002b46:	e254      	b.n	8002ff2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d11a      	bne.n	8002b94 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	2308      	movs	r3, #8
 8002b6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3361      	adds	r3, #97	; 0x61
 8002b7e:	2205      	movs	r2, #5
 8002b80:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f002 fe26 	bl	80057de <USB_HC_Halt>
}
 8002b92:	e22e      	b.n	8002ff2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	2b10      	cmp	r3, #16
 8002ba8:	d140      	bne.n	8002c2c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	335c      	adds	r3, #92	; 0x5c
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	212c      	movs	r1, #44	; 0x2c
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3361      	adds	r3, #97	; 0x61
 8002bca:	2203      	movs	r2, #3
 8002bcc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	212c      	movs	r1, #44	; 0x2c
 8002bd4:	fb01 f303 	mul.w	r3, r1, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	333d      	adds	r3, #61	; 0x3d
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d112      	bne.n	8002c08 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	212c      	movs	r1, #44	; 0x2c
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	333c      	adds	r3, #60	; 0x3c
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d108      	bne.n	8002c08 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	212c      	movs	r1, #44	; 0x2c
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	333d      	adds	r3, #61	; 0x3d
 8002c04:	2201      	movs	r2, #1
 8002c06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f002 fde3 	bl	80057de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c24:	461a      	mov	r2, r3
 8002c26:	2310      	movs	r3, #16
 8002c28:	6093      	str	r3, [r2, #8]
}
 8002c2a:	e1e2      	b.n	8002ff2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3e:	2b80      	cmp	r3, #128	; 0x80
 8002c40:	d164      	bne.n	8002d0c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d111      	bne.n	8002c6e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	212c      	movs	r1, #44	; 0x2c
 8002c50:	fb01 f303 	mul.w	r3, r1, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	3361      	adds	r3, #97	; 0x61
 8002c58:	2206      	movs	r2, #6
 8002c5a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	4611      	mov	r1, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f002 fdb9 	bl	80057de <USB_HC_Halt>
 8002c6c:	e044      	b.n	8002cf8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	335c      	adds	r3, #92	; 0x5c
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	202c      	movs	r0, #44	; 0x2c
 8002c86:	fb00 f303 	mul.w	r3, r0, r3
 8002c8a:	440b      	add	r3, r1
 8002c8c:	335c      	adds	r3, #92	; 0x5c
 8002c8e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	212c      	movs	r1, #44	; 0x2c
 8002c96:	fb01 f303 	mul.w	r3, r1, r3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	335c      	adds	r3, #92	; 0x5c
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d920      	bls.n	8002ce6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	212c      	movs	r1, #44	; 0x2c
 8002caa:	fb01 f303 	mul.w	r3, r1, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	335c      	adds	r3, #92	; 0x5c
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	212c      	movs	r1, #44	; 0x2c
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3360      	adds	r3, #96	; 0x60
 8002cc4:	2204      	movs	r2, #4
 8002cc6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	b2d9      	uxtb	r1, r3
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	202c      	movs	r0, #44	; 0x2c
 8002cd2:	fb00 f303 	mul.w	r3, r0, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3360      	adds	r3, #96	; 0x60
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f008 fec6 	bl	800ba70 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ce4:	e008      	b.n	8002cf8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	212c      	movs	r1, #44	; 0x2c
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3360      	adds	r3, #96	; 0x60
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d04:	461a      	mov	r2, r3
 8002d06:	2380      	movs	r3, #128	; 0x80
 8002d08:	6093      	str	r3, [r2, #8]
}
 8002d0a:	e172      	b.n	8002ff2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d22:	d11b      	bne.n	8002d5c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	212c      	movs	r1, #44	; 0x2c
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	3361      	adds	r3, #97	; 0x61
 8002d32:	2208      	movs	r2, #8
 8002d34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	4611      	mov	r1, r2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f002 fd4c 	bl	80057de <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d52:	461a      	mov	r2, r3
 8002d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d58:	6093      	str	r3, [r2, #8]
}
 8002d5a:	e14a      	b.n	8002ff2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	f040 813f 	bne.w	8002ff2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	3361      	adds	r3, #97	; 0x61
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d17d      	bne.n	8002e84 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	3360      	adds	r3, #96	; 0x60
 8002d96:	2201      	movs	r2, #1
 8002d98:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	212c      	movs	r1, #44	; 0x2c
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	4413      	add	r3, r2
 8002da6:	333f      	adds	r3, #63	; 0x3f
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d00a      	beq.n	8002dc4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	212c      	movs	r1, #44	; 0x2c
 8002db4:	fb01 f303 	mul.w	r3, r1, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	333f      	adds	r3, #63	; 0x3f
 8002dbc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	f040 8100 	bne.w	8002fc4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d113      	bne.n	8002df4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	212c      	movs	r1, #44	; 0x2c
 8002dd2:	fb01 f303 	mul.w	r3, r1, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3355      	adds	r3, #85	; 0x55
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	f083 0301 	eor.w	r3, r3, #1
 8002de0:	b2d8      	uxtb	r0, r3
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	212c      	movs	r1, #44	; 0x2c
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	3355      	adds	r3, #85	; 0x55
 8002df0:	4602      	mov	r2, r0
 8002df2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	f040 80e3 	bne.w	8002fc4 <HCD_HC_OUT_IRQHandler+0x69c>
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	212c      	movs	r1, #44	; 0x2c
 8002e04:	fb01 f303 	mul.w	r3, r1, r3
 8002e08:	4413      	add	r3, r2
 8002e0a:	334c      	adds	r3, #76	; 0x4c
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 80d8 	beq.w	8002fc4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	212c      	movs	r1, #44	; 0x2c
 8002e1a:	fb01 f303 	mul.w	r3, r1, r3
 8002e1e:	4413      	add	r3, r2
 8002e20:	334c      	adds	r3, #76	; 0x4c
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	202c      	movs	r0, #44	; 0x2c
 8002e2a:	fb00 f202 	mul.w	r2, r0, r2
 8002e2e:	440a      	add	r2, r1
 8002e30:	3240      	adds	r2, #64	; 0x40
 8002e32:	8812      	ldrh	r2, [r2, #0]
 8002e34:	4413      	add	r3, r2
 8002e36:	3b01      	subs	r3, #1
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	202c      	movs	r0, #44	; 0x2c
 8002e3e:	fb00 f202 	mul.w	r2, r0, r2
 8002e42:	440a      	add	r2, r1
 8002e44:	3240      	adds	r2, #64	; 0x40
 8002e46:	8812      	ldrh	r2, [r2, #0]
 8002e48:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 80b5 	beq.w	8002fc4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	212c      	movs	r1, #44	; 0x2c
 8002e60:	fb01 f303 	mul.w	r3, r1, r3
 8002e64:	4413      	add	r3, r2
 8002e66:	3355      	adds	r3, #85	; 0x55
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	f083 0301 	eor.w	r3, r3, #1
 8002e6e:	b2d8      	uxtb	r0, r3
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	212c      	movs	r1, #44	; 0x2c
 8002e76:	fb01 f303 	mul.w	r3, r1, r3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3355      	adds	r3, #85	; 0x55
 8002e7e:	4602      	mov	r2, r0
 8002e80:	701a      	strb	r2, [r3, #0]
 8002e82:	e09f      	b.n	8002fc4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	212c      	movs	r1, #44	; 0x2c
 8002e8a:	fb01 f303 	mul.w	r3, r1, r3
 8002e8e:	4413      	add	r3, r2
 8002e90:	3361      	adds	r3, #97	; 0x61
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d109      	bne.n	8002eac <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	212c      	movs	r1, #44	; 0x2c
 8002e9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3360      	adds	r3, #96	; 0x60
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	701a      	strb	r2, [r3, #0]
 8002eaa:	e08b      	b.n	8002fc4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	212c      	movs	r1, #44	; 0x2c
 8002eb2:	fb01 f303 	mul.w	r3, r1, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3361      	adds	r3, #97	; 0x61
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d109      	bne.n	8002ed4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	212c      	movs	r1, #44	; 0x2c
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	3360      	adds	r3, #96	; 0x60
 8002ece:	2202      	movs	r2, #2
 8002ed0:	701a      	strb	r2, [r3, #0]
 8002ed2:	e077      	b.n	8002fc4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	212c      	movs	r1, #44	; 0x2c
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	3361      	adds	r3, #97	; 0x61
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b05      	cmp	r3, #5
 8002ee6:	d109      	bne.n	8002efc <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	212c      	movs	r1, #44	; 0x2c
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3360      	adds	r3, #96	; 0x60
 8002ef6:	2205      	movs	r2, #5
 8002ef8:	701a      	strb	r2, [r3, #0]
 8002efa:	e063      	b.n	8002fc4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	212c      	movs	r1, #44	; 0x2c
 8002f02:	fb01 f303 	mul.w	r3, r1, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	3361      	adds	r3, #97	; 0x61
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b06      	cmp	r3, #6
 8002f0e:	d009      	beq.n	8002f24 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	212c      	movs	r1, #44	; 0x2c
 8002f16:	fb01 f303 	mul.w	r3, r1, r3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3361      	adds	r3, #97	; 0x61
 8002f1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d14f      	bne.n	8002fc4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	212c      	movs	r1, #44	; 0x2c
 8002f2a:	fb01 f303 	mul.w	r3, r1, r3
 8002f2e:	4413      	add	r3, r2
 8002f30:	335c      	adds	r3, #92	; 0x5c
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	202c      	movs	r0, #44	; 0x2c
 8002f3c:	fb00 f303 	mul.w	r3, r0, r3
 8002f40:	440b      	add	r3, r1
 8002f42:	335c      	adds	r3, #92	; 0x5c
 8002f44:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	212c      	movs	r1, #44	; 0x2c
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	335c      	adds	r3, #92	; 0x5c
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d912      	bls.n	8002f80 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	212c      	movs	r1, #44	; 0x2c
 8002f60:	fb01 f303 	mul.w	r3, r1, r3
 8002f64:	4413      	add	r3, r2
 8002f66:	335c      	adds	r3, #92	; 0x5c
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	212c      	movs	r1, #44	; 0x2c
 8002f72:	fb01 f303 	mul.w	r3, r1, r3
 8002f76:	4413      	add	r3, r2
 8002f78:	3360      	adds	r3, #96	; 0x60
 8002f7a:	2204      	movs	r2, #4
 8002f7c:	701a      	strb	r2, [r3, #0]
 8002f7e:	e021      	b.n	8002fc4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	212c      	movs	r1, #44	; 0x2c
 8002f86:	fb01 f303 	mul.w	r3, r1, r3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3360      	adds	r3, #96	; 0x60
 8002f8e:	2202      	movs	r2, #2
 8002f90:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fa8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fb0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	015a      	lsls	r2, r3, #5
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	4413      	add	r3, r2
 8002fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	b2d9      	uxtb	r1, r3
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	202c      	movs	r0, #44	; 0x2c
 8002fe0:	fb00 f303 	mul.w	r3, r0, r3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3360      	adds	r3, #96	; 0x60
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f008 fd3f 	bl	800ba70 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ff2:	bf00      	nop
 8002ff4:	3720      	adds	r7, #32
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b08a      	sub	sp, #40	; 0x28
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	0c5b      	lsrs	r3, r3, #17
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800302e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d004      	beq.n	8003040 <HCD_RXQLVL_IRQHandler+0x46>
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2b05      	cmp	r3, #5
 800303a:	f000 80a9 	beq.w	8003190 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800303e:	e0aa      	b.n	8003196 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 80a6 	beq.w	8003194 <HCD_RXQLVL_IRQHandler+0x19a>
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	212c      	movs	r1, #44	; 0x2c
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	4413      	add	r3, r2
 8003054:	3344      	adds	r3, #68	; 0x44
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 809b 	beq.w	8003194 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	212c      	movs	r1, #44	; 0x2c
 8003064:	fb01 f303 	mul.w	r3, r1, r3
 8003068:	4413      	add	r3, r2
 800306a:	3350      	adds	r3, #80	; 0x50
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	441a      	add	r2, r3
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	202c      	movs	r0, #44	; 0x2c
 8003078:	fb00 f303 	mul.w	r3, r0, r3
 800307c:	440b      	add	r3, r1
 800307e:	334c      	adds	r3, #76	; 0x4c
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d87a      	bhi.n	800317c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	212c      	movs	r1, #44	; 0x2c
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	4413      	add	r3, r2
 8003096:	3344      	adds	r3, #68	; 0x44
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	b292      	uxth	r2, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	f001 ff00 	bl	8004ea4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	212c      	movs	r1, #44	; 0x2c
 80030aa:	fb01 f303 	mul.w	r3, r1, r3
 80030ae:	4413      	add	r3, r2
 80030b0:	3344      	adds	r3, #68	; 0x44
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	441a      	add	r2, r3
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	202c      	movs	r0, #44	; 0x2c
 80030be:	fb00 f303 	mul.w	r3, r0, r3
 80030c2:	440b      	add	r3, r1
 80030c4:	3344      	adds	r3, #68	; 0x44
 80030c6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	212c      	movs	r1, #44	; 0x2c
 80030ce:	fb01 f303 	mul.w	r3, r1, r3
 80030d2:	4413      	add	r3, r2
 80030d4:	3350      	adds	r3, #80	; 0x50
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	441a      	add	r2, r3
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	202c      	movs	r0, #44	; 0x2c
 80030e2:	fb00 f303 	mul.w	r3, r0, r3
 80030e6:	440b      	add	r3, r1
 80030e8:	3350      	adds	r3, #80	; 0x50
 80030ea:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	0cdb      	lsrs	r3, r3, #19
 80030fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003100:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	212c      	movs	r1, #44	; 0x2c
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	4413      	add	r3, r2
 800310e:	3340      	adds	r3, #64	; 0x40
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4293      	cmp	r3, r2
 8003118:	d13c      	bne.n	8003194 <HCD_RXQLVL_IRQHandler+0x19a>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d039      	beq.n	8003194 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	4413      	add	r3, r2
 8003128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003136:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800313e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	4413      	add	r3, r2
 8003148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314c:	461a      	mov	r2, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	212c      	movs	r1, #44	; 0x2c
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	4413      	add	r3, r2
 800315e:	3354      	adds	r3, #84	; 0x54
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	f083 0301 	eor.w	r3, r3, #1
 8003166:	b2d8      	uxtb	r0, r3
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	212c      	movs	r1, #44	; 0x2c
 800316e:	fb01 f303 	mul.w	r3, r1, r3
 8003172:	4413      	add	r3, r2
 8003174:	3354      	adds	r3, #84	; 0x54
 8003176:	4602      	mov	r2, r0
 8003178:	701a      	strb	r2, [r3, #0]
      break;
 800317a:	e00b      	b.n	8003194 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	212c      	movs	r1, #44	; 0x2c
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	4413      	add	r3, r2
 8003188:	3360      	adds	r3, #96	; 0x60
 800318a:	2204      	movs	r2, #4
 800318c:	701a      	strb	r2, [r3, #0]
      break;
 800318e:	e001      	b.n	8003194 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003190:	bf00      	nop
 8003192:	e000      	b.n	8003196 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003194:	bf00      	nop
  }
}
 8003196:	bf00      	nop
 8003198:	3728      	adds	r7, #40	; 0x28
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b086      	sub	sp, #24
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80031ca:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d10b      	bne.n	80031ee <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d102      	bne.n	80031e6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f008 fc29 	bl	800ba38 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f043 0302 	orr.w	r3, r3, #2
 80031ec:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d132      	bne.n	800325e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f043 0308 	orr.w	r3, r3, #8
 80031fe:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	2b04      	cmp	r3, #4
 8003208:	d126      	bne.n	8003258 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	2b02      	cmp	r3, #2
 8003210:	d113      	bne.n	800323a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003218:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800321c:	d106      	bne.n	800322c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2102      	movs	r1, #2
 8003224:	4618      	mov	r0, r3
 8003226:	f001 ff9f 	bl	8005168 <USB_InitFSLSPClkSel>
 800322a:	e011      	b.n	8003250 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2101      	movs	r1, #1
 8003232:	4618      	mov	r0, r3
 8003234:	f001 ff98 	bl	8005168 <USB_InitFSLSPClkSel>
 8003238:	e00a      	b.n	8003250 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d106      	bne.n	8003250 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003248:	461a      	mov	r2, r3
 800324a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800324e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f008 fc1b 	bl	800ba8c <HAL_HCD_PortEnabled_Callback>
 8003256:	e002      	b.n	800325e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f008 fc25 	bl	800baa8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b20      	cmp	r3, #32
 8003266:	d103      	bne.n	8003270 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f043 0320 	orr.w	r3, r3, #32
 800326e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003276:	461a      	mov	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	6013      	str	r3, [r2, #0]
}
 800327c:	bf00      	nop
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	603b      	str	r3, [r7, #0]
 8003292:	4b20      	ldr	r3, [pc, #128]	; (8003314 <HAL_PWREx_EnableOverDrive+0x90>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	4a1f      	ldr	r2, [pc, #124]	; (8003314 <HAL_PWREx_EnableOverDrive+0x90>)
 8003298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800329c:	6413      	str	r3, [r2, #64]	; 0x40
 800329e:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <HAL_PWREx_EnableOverDrive+0x90>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80032aa:	4b1b      	ldr	r3, [pc, #108]	; (8003318 <HAL_PWREx_EnableOverDrive+0x94>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032b0:	f7fd fcb6 	bl	8000c20 <HAL_GetTick>
 80032b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032b6:	e009      	b.n	80032cc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032b8:	f7fd fcb2 	bl	8000c20 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032c6:	d901      	bls.n	80032cc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e01f      	b.n	800330c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032cc:	4b13      	ldr	r3, [pc, #76]	; (800331c <HAL_PWREx_EnableOverDrive+0x98>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d8:	d1ee      	bne.n	80032b8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032da:	4b11      	ldr	r3, [pc, #68]	; (8003320 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032dc:	2201      	movs	r2, #1
 80032de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032e0:	f7fd fc9e 	bl	8000c20 <HAL_GetTick>
 80032e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032e6:	e009      	b.n	80032fc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032e8:	f7fd fc9a 	bl	8000c20 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032f6:	d901      	bls.n	80032fc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e007      	b.n	800330c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032fc:	4b07      	ldr	r3, [pc, #28]	; (800331c <HAL_PWREx_EnableOverDrive+0x98>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003304:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003308:	d1ee      	bne.n	80032e8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40023800 	.word	0x40023800
 8003318:	420e0040 	.word	0x420e0040
 800331c:	40007000 	.word	0x40007000
 8003320:	420e0044 	.word	0x420e0044

08003324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0cc      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003338:	4b68      	ldr	r3, [pc, #416]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 030f 	and.w	r3, r3, #15
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d90c      	bls.n	8003360 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003346:	4b65      	ldr	r3, [pc, #404]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800334e:	4b63      	ldr	r3, [pc, #396]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0b8      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d020      	beq.n	80033ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003378:	4b59      	ldr	r3, [pc, #356]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	4a58      	ldr	r2, [pc, #352]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003382:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003390:	4b53      	ldr	r3, [pc, #332]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	4a52      	ldr	r2, [pc, #328]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800339a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800339c:	4b50      	ldr	r3, [pc, #320]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	494d      	ldr	r1, [pc, #308]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d044      	beq.n	8003444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d107      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c2:	4b47      	ldr	r3, [pc, #284]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d119      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e07f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d107      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e2:	4b3f      	ldr	r3, [pc, #252]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d109      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e06f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f2:	4b3b      	ldr	r3, [pc, #236]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e067      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003402:	4b37      	ldr	r3, [pc, #220]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f023 0203 	bic.w	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	4934      	ldr	r1, [pc, #208]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	4313      	orrs	r3, r2
 8003412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003414:	f7fd fc04 	bl	8000c20 <HAL_GetTick>
 8003418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341a:	e00a      	b.n	8003432 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800341c:	f7fd fc00 	bl	8000c20 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	f241 3288 	movw	r2, #5000	; 0x1388
 800342a:	4293      	cmp	r3, r2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e04f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003432:	4b2b      	ldr	r3, [pc, #172]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 020c 	and.w	r2, r3, #12
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	429a      	cmp	r2, r3
 8003442:	d1eb      	bne.n	800341c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003444:	4b25      	ldr	r3, [pc, #148]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d20c      	bcs.n	800346c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003452:	4b22      	ldr	r3, [pc, #136]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800345a:	4b20      	ldr	r3, [pc, #128]	; (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d001      	beq.n	800346c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e032      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003478:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4916      	ldr	r1, [pc, #88]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	4313      	orrs	r3, r2
 8003488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003496:	4b12      	ldr	r3, [pc, #72]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	490e      	ldr	r1, [pc, #56]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034aa:	f000 fb7f 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 80034ae:	4602      	mov	r2, r0
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	490a      	ldr	r1, [pc, #40]	; (80034e4 <HAL_RCC_ClockConfig+0x1c0>)
 80034bc:	5ccb      	ldrb	r3, [r1, r3]
 80034be:	fa22 f303 	lsr.w	r3, r2, r3
 80034c2:	4a09      	ldr	r2, [pc, #36]	; (80034e8 <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034c6:	4b09      	ldr	r3, [pc, #36]	; (80034ec <HAL_RCC_ClockConfig+0x1c8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fd fb64 	bl	8000b98 <HAL_InitTick>

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40023c00 	.word	0x40023c00
 80034e0:	40023800 	.word	0x40023800
 80034e4:	0800d6a0 	.word	0x0800d6a0
 80034e8:	20000000 	.word	0x20000000
 80034ec:	20000004 	.word	0x20000004

080034f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034f4:	4b03      	ldr	r3, [pc, #12]	; (8003504 <HAL_RCC_GetHCLKFreq+0x14>)
 80034f6:	681b      	ldr	r3, [r3, #0]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000000 	.word	0x20000000

08003508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800350c:	f7ff fff0 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 8003510:	4602      	mov	r2, r0
 8003512:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	0a9b      	lsrs	r3, r3, #10
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	4903      	ldr	r1, [pc, #12]	; (800352c <HAL_RCC_GetPCLK1Freq+0x24>)
 800351e:	5ccb      	ldrb	r3, [r1, r3]
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003524:	4618      	mov	r0, r3
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40023800 	.word	0x40023800
 800352c:	0800d6b0 	.word	0x0800d6b0

08003530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003534:	f7ff ffdc 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 8003538:	4602      	mov	r2, r0
 800353a:	4b05      	ldr	r3, [pc, #20]	; (8003550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	0b5b      	lsrs	r3, r3, #13
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	4903      	ldr	r1, [pc, #12]	; (8003554 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003546:	5ccb      	ldrb	r3, [r1, r3]
 8003548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800354c:	4618      	mov	r0, r3
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40023800 	.word	0x40023800
 8003554:	0800d6b0 	.word	0x0800d6b0

08003558 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08c      	sub	sp, #48	; 0x30
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b00      	cmp	r3, #0
 800358e:	d010      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003590:	4b6f      	ldr	r3, [pc, #444]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003592:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003596:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	496c      	ldr	r1, [pc, #432]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80035ae:	2301      	movs	r3, #1
 80035b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d010      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80035be:	4b64      	ldr	r3, [pc, #400]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035c4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035cc:	4960      	ldr	r1, [pc, #384]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80035dc:	2301      	movs	r3, #1
 80035de:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d017      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035ec:	4b58      	ldr	r3, [pc, #352]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	4955      	ldr	r1, [pc, #340]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800360a:	d101      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800360c:	2301      	movs	r3, #1
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003618:	2301      	movs	r3, #1
 800361a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d017      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003628:	4b49      	ldr	r3, [pc, #292]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800362a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800362e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003636:	4946      	ldr	r1, [pc, #280]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003642:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003646:	d101      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003648:	2301      	movs	r3, #1
 800364a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003654:	2301      	movs	r3, #1
 8003656:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 808a 	beq.w	800377a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003666:	2300      	movs	r3, #0
 8003668:	60bb      	str	r3, [r7, #8]
 800366a:	4b39      	ldr	r3, [pc, #228]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	4a38      	ldr	r2, [pc, #224]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003674:	6413      	str	r3, [r2, #64]	; 0x40
 8003676:	4b36      	ldr	r3, [pc, #216]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367e:	60bb      	str	r3, [r7, #8]
 8003680:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003682:	4b34      	ldr	r3, [pc, #208]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a33      	ldr	r2, [pc, #204]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800368e:	f7fd fac7 	bl	8000c20 <HAL_GetTick>
 8003692:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003694:	e008      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003696:	f7fd fac3 	bl	8000c20 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e278      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80036a8:	4b2a      	ldr	r3, [pc, #168]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0f0      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036b4:	4b26      	ldr	r3, [pc, #152]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036bc:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d02f      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036cc:	6a3a      	ldr	r2, [r7, #32]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d028      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036d2:	4b1f      	ldr	r3, [pc, #124]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036da:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036dc:	4b1e      	ldr	r3, [pc, #120]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80036de:	2201      	movs	r2, #1
 80036e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036e2:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80036e8:	4a19      	ldr	r2, [pc, #100]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036ee:	4b18      	ldr	r3, [pc, #96]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d114      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80036fa:	f7fd fa91 	bl	8000c20 <HAL_GetTick>
 80036fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003700:	e00a      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003702:	f7fd fa8d 	bl	8000c20 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003710:	4293      	cmp	r3, r2
 8003712:	d901      	bls.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e240      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003718:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800371a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0ee      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003730:	d114      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003732:	4b07      	ldr	r3, [pc, #28]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003746:	4902      	ldr	r1, [pc, #8]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003748:	4313      	orrs	r3, r2
 800374a:	608b      	str	r3, [r1, #8]
 800374c:	e00c      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800
 8003754:	40007000 	.word	0x40007000
 8003758:	42470e40 	.word	0x42470e40
 800375c:	4b4a      	ldr	r3, [pc, #296]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	4a49      	ldr	r2, [pc, #292]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003762:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003766:	6093      	str	r3, [r2, #8]
 8003768:	4b47      	ldr	r3, [pc, #284]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800376a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003774:	4944      	ldr	r1, [pc, #272]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003776:	4313      	orrs	r3, r2
 8003778:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0310 	and.w	r3, r3, #16
 8003782:	2b00      	cmp	r3, #0
 8003784:	d004      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800378c:	4b3f      	ldr	r3, [pc, #252]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800378e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00a      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800379c:	4b3a      	ldr	r3, [pc, #232]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800379e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037aa:	4937      	ldr	r1, [pc, #220]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00a      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037be:	4b32      	ldr	r3, [pc, #200]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037c4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037cc:	492e      	ldr	r1, [pc, #184]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d011      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80037e0:	4b29      	ldr	r3, [pc, #164]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ee:	4926      	ldr	r1, [pc, #152]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037fe:	d101      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003800:	2301      	movs	r3, #1
 8003802:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003810:	4b1d      	ldr	r3, [pc, #116]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003816:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381e:	491a      	ldr	r1, [pc, #104]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382e:	2b00      	cmp	r3, #0
 8003830:	d011      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003832:	4b15      	ldr	r3, [pc, #84]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003838:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003840:	4911      	ldr	r1, [pc, #68]	; (8003888 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003850:	d101      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003852:	2301      	movs	r3, #1
 8003854:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003858:	2b01      	cmp	r3, #1
 800385a:	d005      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003864:	f040 80ff 	bne.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003868:	4b09      	ldr	r3, [pc, #36]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800386e:	f7fd f9d7 	bl	8000c20 <HAL_GetTick>
 8003872:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003874:	e00e      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003876:	f7fd f9d3 	bl	8000c20 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d907      	bls.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e188      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003888:	40023800 	.word	0x40023800
 800388c:	424711e0 	.word	0x424711e0
 8003890:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003894:	4b7e      	ldr	r3, [pc, #504]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1ea      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d009      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d028      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d124      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80038c8:	4b71      	ldr	r3, [pc, #452]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ce:	0c1b      	lsrs	r3, r3, #16
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	3301      	adds	r3, #1
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038da:	4b6d      	ldr	r3, [pc, #436]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038e0:	0e1b      	lsrs	r3, r3, #24
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	019b      	lsls	r3, r3, #6
 80038f2:	431a      	orrs	r2, r3
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	085b      	lsrs	r3, r3, #1
 80038f8:	3b01      	subs	r3, #1
 80038fa:	041b      	lsls	r3, r3, #16
 80038fc:	431a      	orrs	r2, r3
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	061b      	lsls	r3, r3, #24
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	071b      	lsls	r3, r3, #28
 800390a:	4961      	ldr	r1, [pc, #388]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b00      	cmp	r3, #0
 800391c:	d004      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003926:	d00a      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003930:	2b00      	cmp	r3, #0
 8003932:	d035      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003938:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800393c:	d130      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800393e:	4b54      	ldr	r3, [pc, #336]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003944:	0c1b      	lsrs	r3, r3, #16
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	3301      	adds	r3, #1
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003950:	4b4f      	ldr	r3, [pc, #316]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003956:	0f1b      	lsrs	r3, r3, #28
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	019b      	lsls	r3, r3, #6
 8003968:	431a      	orrs	r2, r3
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	085b      	lsrs	r3, r3, #1
 800396e:	3b01      	subs	r3, #1
 8003970:	041b      	lsls	r3, r3, #16
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	061b      	lsls	r3, r3, #24
 800397a:	431a      	orrs	r2, r3
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	071b      	lsls	r3, r3, #28
 8003980:	4943      	ldr	r1, [pc, #268]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003988:	4b41      	ldr	r3, [pc, #260]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800398a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800398e:	f023 021f 	bic.w	r2, r3, #31
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003996:	3b01      	subs	r3, #1
 8003998:	493d      	ldr	r1, [pc, #244]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d029      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039b4:	d124      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80039b6:	4b36      	ldr	r3, [pc, #216]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039bc:	0c1b      	lsrs	r3, r3, #16
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	3301      	adds	r3, #1
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039c8:	4b31      	ldr	r3, [pc, #196]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ce:	0f1b      	lsrs	r3, r3, #28
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	019b      	lsls	r3, r3, #6
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	085b      	lsrs	r3, r3, #1
 80039e8:	3b01      	subs	r3, #1
 80039ea:	041b      	lsls	r3, r3, #16
 80039ec:	431a      	orrs	r2, r3
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	061b      	lsls	r3, r3, #24
 80039f2:	431a      	orrs	r2, r3
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	071b      	lsls	r3, r3, #28
 80039f8:	4925      	ldr	r1, [pc, #148]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d016      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	019b      	lsls	r3, r3, #6
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	085b      	lsrs	r3, r3, #1
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	041b      	lsls	r3, r3, #16
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	061b      	lsls	r3, r3, #24
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	071b      	lsls	r3, r3, #28
 8003a32:	4917      	ldr	r1, [pc, #92]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a3a:	4b16      	ldr	r3, [pc, #88]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a40:	f7fd f8ee 	bl	8000c20 <HAL_GetTick>
 8003a44:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a48:	f7fd f8ea 	bl	8000c20 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e09f      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a5a:	4b0d      	ldr	r3, [pc, #52]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	f040 8095 	bne.w	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a6e:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a74:	f7fd f8d4 	bl	8000c20 <HAL_GetTick>
 8003a78:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a7a:	e00f      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003a7c:	f7fd f8d0 	bl	8000c20 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d908      	bls.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e085      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003a8e:	bf00      	nop
 8003a90:	40023800 	.word	0x40023800
 8003a94:	42470068 	.word	0x42470068
 8003a98:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a9c:	4b41      	ldr	r3, [pc, #260]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aa8:	d0e8      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d009      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d02b      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d127      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003ad2:	4b34      	ldr	r3, [pc, #208]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad8:	0c1b      	lsrs	r3, r3, #16
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	3301      	adds	r3, #1
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699a      	ldr	r2, [r3, #24]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	019b      	lsls	r3, r3, #6
 8003aee:	431a      	orrs	r2, r3
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	085b      	lsrs	r3, r3, #1
 8003af4:	3b01      	subs	r3, #1
 8003af6:	041b      	lsls	r3, r3, #16
 8003af8:	431a      	orrs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	061b      	lsls	r3, r3, #24
 8003b00:	4928      	ldr	r1, [pc, #160]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b08:	4b26      	ldr	r3, [pc, #152]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b0e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	3b01      	subs	r3, #1
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	4922      	ldr	r1, [pc, #136]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d01d      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b36:	d118      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b38:	4b1a      	ldr	r3, [pc, #104]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3e:	0e1b      	lsrs	r3, r3, #24
 8003b40:	f003 030f 	and.w	r3, r3, #15
 8003b44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699a      	ldr	r2, [r3, #24]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	019b      	lsls	r3, r3, #6
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	085b      	lsrs	r3, r3, #1
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	041b      	lsls	r3, r3, #16
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	061b      	lsls	r3, r3, #24
 8003b62:	4910      	ldr	r1, [pc, #64]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b70:	f7fd f856 	bl	8000c20 <HAL_GetTick>
 8003b74:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003b78:	f7fd f852 	bl	8000c20 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e007      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b8a:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b96:	d1ef      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3730      	adds	r7, #48	; 0x30
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	42470070 	.word	0x42470070

08003bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb0:	b0a6      	sub	sp, #152	; 0x98
 8003bb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bd2:	4bc8      	ldr	r3, [pc, #800]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
 8003bda:	2b0c      	cmp	r3, #12
 8003bdc:	f200 817e 	bhi.w	8003edc <HAL_RCC_GetSysClockFreq+0x330>
 8003be0:	a201      	add	r2, pc, #4	; (adr r2, 8003be8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be6:	bf00      	nop
 8003be8:	08003c1d 	.word	0x08003c1d
 8003bec:	08003edd 	.word	0x08003edd
 8003bf0:	08003edd 	.word	0x08003edd
 8003bf4:	08003edd 	.word	0x08003edd
 8003bf8:	08003c25 	.word	0x08003c25
 8003bfc:	08003edd 	.word	0x08003edd
 8003c00:	08003edd 	.word	0x08003edd
 8003c04:	08003edd 	.word	0x08003edd
 8003c08:	08003c2d 	.word	0x08003c2d
 8003c0c:	08003edd 	.word	0x08003edd
 8003c10:	08003edd 	.word	0x08003edd
 8003c14:	08003edd 	.word	0x08003edd
 8003c18:	08003d97 	.word	0x08003d97
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c1c:	4bb6      	ldr	r3, [pc, #728]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003c1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003c22:	e15f      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c24:	4bb5      	ldr	r3, [pc, #724]	; (8003efc <HAL_RCC_GetSysClockFreq+0x350>)
 8003c26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003c2a:	e15b      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c2c:	4bb1      	ldr	r3, [pc, #708]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c38:	4bae      	ldr	r3, [pc, #696]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d031      	beq.n	8003ca8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c44:	4bab      	ldr	r3, [pc, #684]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	099b      	lsrs	r3, r3, #6
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c56:	663b      	str	r3, [r7, #96]	; 0x60
 8003c58:	2300      	movs	r3, #0
 8003c5a:	667b      	str	r3, [r7, #100]	; 0x64
 8003c5c:	4ba7      	ldr	r3, [pc, #668]	; (8003efc <HAL_RCC_GetSysClockFreq+0x350>)
 8003c5e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003c62:	462a      	mov	r2, r5
 8003c64:	fb03 f202 	mul.w	r2, r3, r2
 8003c68:	2300      	movs	r3, #0
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	fb01 f303 	mul.w	r3, r1, r3
 8003c70:	4413      	add	r3, r2
 8003c72:	4aa2      	ldr	r2, [pc, #648]	; (8003efc <HAL_RCC_GetSysClockFreq+0x350>)
 8003c74:	4621      	mov	r1, r4
 8003c76:	fba1 1202 	umull	r1, r2, r1, r2
 8003c7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c7c:	460a      	mov	r2, r1
 8003c7e:	67ba      	str	r2, [r7, #120]	; 0x78
 8003c80:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003c82:	4413      	add	r3, r2
 8003c84:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c8e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c94:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003c98:	f7fc fb0a 	bl	80002b0 <__aeabi_uldivmod>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ca6:	e064      	b.n	8003d72 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ca8:	4b92      	ldr	r3, [pc, #584]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	099b      	lsrs	r3, r3, #6
 8003cae:	2200      	movs	r2, #0
 8003cb0:	653b      	str	r3, [r7, #80]	; 0x50
 8003cb2:	657a      	str	r2, [r7, #84]	; 0x54
 8003cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cba:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cc0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003cc4:	4622      	mov	r2, r4
 8003cc6:	462b      	mov	r3, r5
 8003cc8:	f04f 0000 	mov.w	r0, #0
 8003ccc:	f04f 0100 	mov.w	r1, #0
 8003cd0:	0159      	lsls	r1, r3, #5
 8003cd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cd6:	0150      	lsls	r0, r2, #5
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4621      	mov	r1, r4
 8003cde:	1a51      	subs	r1, r2, r1
 8003ce0:	6139      	str	r1, [r7, #16]
 8003ce2:	4629      	mov	r1, r5
 8003ce4:	eb63 0301 	sbc.w	r3, r3, r1
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cf6:	4659      	mov	r1, fp
 8003cf8:	018b      	lsls	r3, r1, #6
 8003cfa:	4651      	mov	r1, sl
 8003cfc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d00:	4651      	mov	r1, sl
 8003d02:	018a      	lsls	r2, r1, #6
 8003d04:	4651      	mov	r1, sl
 8003d06:	ebb2 0801 	subs.w	r8, r2, r1
 8003d0a:	4659      	mov	r1, fp
 8003d0c:	eb63 0901 	sbc.w	r9, r3, r1
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d1c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d20:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d24:	4690      	mov	r8, r2
 8003d26:	4699      	mov	r9, r3
 8003d28:	4623      	mov	r3, r4
 8003d2a:	eb18 0303 	adds.w	r3, r8, r3
 8003d2e:	60bb      	str	r3, [r7, #8]
 8003d30:	462b      	mov	r3, r5
 8003d32:	eb49 0303 	adc.w	r3, r9, r3
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d44:	4629      	mov	r1, r5
 8003d46:	028b      	lsls	r3, r1, #10
 8003d48:	4621      	mov	r1, r4
 8003d4a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d4e:	4621      	mov	r1, r4
 8003d50:	028a      	lsls	r2, r1, #10
 8003d52:	4610      	mov	r0, r2
 8003d54:	4619      	mov	r1, r3
 8003d56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d5e:	647a      	str	r2, [r7, #68]	; 0x44
 8003d60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d64:	f7fc faa4 	bl	80002b0 <__aeabi_uldivmod>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d72:	4b60      	ldr	r3, [pc, #384]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	0c1b      	lsrs	r3, r3, #16
 8003d78:	f003 0303 	and.w	r3, r3, #3
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003d84:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003d94:	e0a6      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d96:	4b57      	ldr	r3, [pc, #348]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003da2:	4b54      	ldr	r3, [pc, #336]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d02a      	beq.n	8003e04 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dae:	4b51      	ldr	r3, [pc, #324]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	099b      	lsrs	r3, r3, #6
 8003db4:	2200      	movs	r2, #0
 8003db6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003db8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	4b4e      	ldr	r3, [pc, #312]	; (8003efc <HAL_RCC_GetSysClockFreq+0x350>)
 8003dc4:	fb03 f201 	mul.w	r2, r3, r1
 8003dc8:	2300      	movs	r3, #0
 8003dca:	fb00 f303 	mul.w	r3, r0, r3
 8003dce:	4413      	add	r3, r2
 8003dd0:	4a4a      	ldr	r2, [pc, #296]	; (8003efc <HAL_RCC_GetSysClockFreq+0x350>)
 8003dd2:	fba0 1202 	umull	r1, r2, r0, r2
 8003dd6:	677a      	str	r2, [r7, #116]	; 0x74
 8003dd8:	460a      	mov	r2, r1
 8003dda:	673a      	str	r2, [r7, #112]	; 0x70
 8003ddc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003dde:	4413      	add	r3, r2
 8003de0:	677b      	str	r3, [r7, #116]	; 0x74
 8003de2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003de6:	2200      	movs	r2, #0
 8003de8:	633b      	str	r3, [r7, #48]	; 0x30
 8003dea:	637a      	str	r2, [r7, #52]	; 0x34
 8003dec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003df0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003df4:	f7fc fa5c 	bl	80002b0 <__aeabi_uldivmod>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e02:	e05b      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e04:	4b3b      	ldr	r3, [pc, #236]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	099b      	lsrs	r3, r3, #6
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e16:	623b      	str	r3, [r7, #32]
 8003e18:	2300      	movs	r3, #0
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e20:	4642      	mov	r2, r8
 8003e22:	464b      	mov	r3, r9
 8003e24:	f04f 0000 	mov.w	r0, #0
 8003e28:	f04f 0100 	mov.w	r1, #0
 8003e2c:	0159      	lsls	r1, r3, #5
 8003e2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e32:	0150      	lsls	r0, r2, #5
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4641      	mov	r1, r8
 8003e3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e3e:	4649      	mov	r1, r9
 8003e40:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e58:	ebb2 040a 	subs.w	r4, r2, sl
 8003e5c:	eb63 050b 	sbc.w	r5, r3, fp
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	00eb      	lsls	r3, r5, #3
 8003e6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e6e:	00e2      	lsls	r2, r4, #3
 8003e70:	4614      	mov	r4, r2
 8003e72:	461d      	mov	r5, r3
 8003e74:	4643      	mov	r3, r8
 8003e76:	18e3      	adds	r3, r4, r3
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	464b      	mov	r3, r9
 8003e7c:	eb45 0303 	adc.w	r3, r5, r3
 8003e80:	607b      	str	r3, [r7, #4]
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e8e:	4629      	mov	r1, r5
 8003e90:	028b      	lsls	r3, r1, #10
 8003e92:	4621      	mov	r1, r4
 8003e94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e98:	4621      	mov	r1, r4
 8003e9a:	028a      	lsls	r2, r1, #10
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	61bb      	str	r3, [r7, #24]
 8003ea8:	61fa      	str	r2, [r7, #28]
 8003eaa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003eae:	f7fc f9ff 	bl	80002b0 <__aeabi_uldivmod>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ebc:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <HAL_RCC_GetSysClockFreq+0x348>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	0f1b      	lsrs	r3, r3, #28
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8003eca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ece:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003eda:	e003      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003edc:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003ede:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003ee2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ee4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3798      	adds	r7, #152	; 0x98
 8003eec:	46bd      	mov	sp, r7
 8003eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	00f42400 	.word	0x00f42400
 8003efc:	00b71b00 	.word	0x00b71b00

08003f00 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e28d      	b.n	800442e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 8083 	beq.w	8004026 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f20:	4b94      	ldr	r3, [pc, #592]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 030c 	and.w	r3, r3, #12
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	d019      	beq.n	8003f60 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f2c:	4b91      	ldr	r3, [pc, #580]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d106      	bne.n	8003f46 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f38:	4b8e      	ldr	r3, [pc, #568]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f44:	d00c      	beq.n	8003f60 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f46:	4b8b      	ldr	r3, [pc, #556]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f4e:	2b0c      	cmp	r3, #12
 8003f50:	d112      	bne.n	8003f78 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f52:	4b88      	ldr	r3, [pc, #544]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f5e:	d10b      	bne.n	8003f78 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f60:	4b84      	ldr	r3, [pc, #528]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d05b      	beq.n	8004024 <HAL_RCC_OscConfig+0x124>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d157      	bne.n	8004024 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e25a      	b.n	800442e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f80:	d106      	bne.n	8003f90 <HAL_RCC_OscConfig+0x90>
 8003f82:	4b7c      	ldr	r3, [pc, #496]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a7b      	ldr	r2, [pc, #492]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8003f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	e01d      	b.n	8003fcc <HAL_RCC_OscConfig+0xcc>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f98:	d10c      	bne.n	8003fb4 <HAL_RCC_OscConfig+0xb4>
 8003f9a:	4b76      	ldr	r3, [pc, #472]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a75      	ldr	r2, [pc, #468]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8003fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	4b73      	ldr	r3, [pc, #460]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a72      	ldr	r2, [pc, #456]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8003fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	e00b      	b.n	8003fcc <HAL_RCC_OscConfig+0xcc>
 8003fb4:	4b6f      	ldr	r3, [pc, #444]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a6e      	ldr	r2, [pc, #440]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8003fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	4b6c      	ldr	r3, [pc, #432]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a6b      	ldr	r2, [pc, #428]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8003fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d013      	beq.n	8003ffc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fc fe24 	bl	8000c20 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fdc:	f7fc fe20 	bl	8000c20 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b64      	cmp	r3, #100	; 0x64
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e21f      	b.n	800442e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fee:	4b61      	ldr	r3, [pc, #388]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0xdc>
 8003ffa:	e014      	b.n	8004026 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7fc fe10 	bl	8000c20 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004004:	f7fc fe0c 	bl	8000c20 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b64      	cmp	r3, #100	; 0x64
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e20b      	b.n	800442e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004016:	4b57      	ldr	r3, [pc, #348]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f0      	bne.n	8004004 <HAL_RCC_OscConfig+0x104>
 8004022:	e000      	b.n	8004026 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d06f      	beq.n	8004112 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004032:	4b50      	ldr	r3, [pc, #320]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 030c 	and.w	r3, r3, #12
 800403a:	2b00      	cmp	r3, #0
 800403c:	d017      	beq.n	800406e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800403e:	4b4d      	ldr	r3, [pc, #308]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004046:	2b08      	cmp	r3, #8
 8004048:	d105      	bne.n	8004056 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800404a:	4b4a      	ldr	r3, [pc, #296]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00b      	beq.n	800406e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004056:	4b47      	ldr	r3, [pc, #284]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800405e:	2b0c      	cmp	r3, #12
 8004060:	d11c      	bne.n	800409c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004062:	4b44      	ldr	r3, [pc, #272]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d116      	bne.n	800409c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800406e:	4b41      	ldr	r3, [pc, #260]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d005      	beq.n	8004086 <HAL_RCC_OscConfig+0x186>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d001      	beq.n	8004086 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e1d3      	b.n	800442e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004086:	4b3b      	ldr	r3, [pc, #236]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4937      	ldr	r1, [pc, #220]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8004096:	4313      	orrs	r3, r2
 8004098:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409a:	e03a      	b.n	8004112 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d020      	beq.n	80040e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a4:	4b34      	ldr	r3, [pc, #208]	; (8004178 <HAL_RCC_OscConfig+0x278>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040aa:	f7fc fdb9 	bl	8000c20 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040b2:	f7fc fdb5 	bl	8000c20 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e1b4      	b.n	800442e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c4:	4b2b      	ldr	r3, [pc, #172]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0f0      	beq.n	80040b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d0:	4b28      	ldr	r3, [pc, #160]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	4925      	ldr	r1, [pc, #148]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	600b      	str	r3, [r1, #0]
 80040e4:	e015      	b.n	8004112 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e6:	4b24      	ldr	r3, [pc, #144]	; (8004178 <HAL_RCC_OscConfig+0x278>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fc fd98 	bl	8000c20 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040f4:	f7fc fd94 	bl	8000c20 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e193      	b.n	800442e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004106:	4b1b      	ldr	r3, [pc, #108]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d036      	beq.n	800418c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d016      	beq.n	8004154 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004126:	4b15      	ldr	r3, [pc, #84]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8004128:	2201      	movs	r2, #1
 800412a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412c:	f7fc fd78 	bl	8000c20 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004134:	f7fc fd74 	bl	8000c20 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e173      	b.n	800442e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004146:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <HAL_RCC_OscConfig+0x274>)
 8004148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCC_OscConfig+0x234>
 8004152:	e01b      	b.n	800418c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004154:	4b09      	ldr	r3, [pc, #36]	; (800417c <HAL_RCC_OscConfig+0x27c>)
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415a:	f7fc fd61 	bl	8000c20 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004160:	e00e      	b.n	8004180 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004162:	f7fc fd5d 	bl	8000c20 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d907      	bls.n	8004180 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e15c      	b.n	800442e <HAL_RCC_OscConfig+0x52e>
 8004174:	40023800 	.word	0x40023800
 8004178:	42470000 	.word	0x42470000
 800417c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004180:	4b8a      	ldr	r3, [pc, #552]	; (80043ac <HAL_RCC_OscConfig+0x4ac>)
 8004182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1ea      	bne.n	8004162 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 8097 	beq.w	80042c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800419a:	2300      	movs	r3, #0
 800419c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800419e:	4b83      	ldr	r3, [pc, #524]	; (80043ac <HAL_RCC_OscConfig+0x4ac>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10f      	bne.n	80041ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041aa:	2300      	movs	r3, #0
 80041ac:	60bb      	str	r3, [r7, #8]
 80041ae:	4b7f      	ldr	r3, [pc, #508]	; (80043ac <HAL_RCC_OscConfig+0x4ac>)
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	4a7e      	ldr	r2, [pc, #504]	; (80043ac <HAL_RCC_OscConfig+0x4ac>)
 80041b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b8:	6413      	str	r3, [r2, #64]	; 0x40
 80041ba:	4b7c      	ldr	r3, [pc, #496]	; (80043ac <HAL_RCC_OscConfig+0x4ac>)
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c2:	60bb      	str	r3, [r7, #8]
 80041c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041c6:	2301      	movs	r3, #1
 80041c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ca:	4b79      	ldr	r3, [pc, #484]	; (80043b0 <HAL_RCC_OscConfig+0x4b0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d118      	bne.n	8004208 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041d6:	4b76      	ldr	r3, [pc, #472]	; (80043b0 <HAL_RCC_OscConfig+0x4b0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a75      	ldr	r2, [pc, #468]	; (80043b0 <HAL_RCC_OscConfig+0x4b0>)
 80041dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041e2:	f7fc fd1d 	bl	8000c20 <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e8:	e008      	b.n	80041fc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ea:	f7fc fd19 	bl	8000c20 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e118      	b.n	800442e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fc:	4b6c      	ldr	r3, [pc, #432]	; (80043b0 <HAL_RCC_OscConfig+0x4b0>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0f0      	beq.n	80041ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d106      	bne.n	800421e <HAL_RCC_OscConfig+0x31e>
 8004210:	4b66      	ldr	r3, [pc, #408]	; (80043ac <HAL_RCC_OscConfig+0x4ac>)
 8004212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004214:	4a65      	ldr	r2, [pc, #404]	; (80043ac <HAL_RCC_OscConfig+0x4ac>)
 8004216:	f043 0301 	orr.w	r3, r3, #1
 800421a:	6713      	str	r3, [r2, #112]	; 0x70
 800421c:	e01c      	b.n	8004258 <HAL_RCC_OscConfig+0x358>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	2b05      	cmp	r3, #5
 8004224:	d10c      	bne.n	8004240 <HAL_RCC_OscConfig+0x340>
 8004226:	4b61      	ldr	r3, [pc, #388]	; (80043ac <HAL_RCC_OscConfig+0x4ac>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	4a60      	ldr	r2, [pc, #384]	; (80043ac <HAL_RCC_OscConfig+0x4ac>)
 800422c:	f043 0304 	orr.w	r3, r3, #4
 8004230:	6713      	str	r3, [r2, #112]	; 0x70
 8004232:	4b5e      	ldr	r3, [pc, #376]	; (80043ac <HAL_RCC_OscConfig+0x4ac>)
 8004234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004236:	4a5d      	ldr	r2, [pc, #372]	; (80043ac <HAL_RCC_OscConfig+0x4ac>)
 8004238:	f043 0301 	orr.w	r3, r3, #1
 800423c:	6713      	str	r3, [r2, #112]	; 0x70
 800423e:	e00b      	b.n	8004258 <HAL_RCC_OscConfig+0x358>
 8004240:	4b5a      	ldr	r3, [pc, #360]	; (80043ac <HAL_RCC_OscConfig+0x4ac>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004244:	4a59      	ldr	r2, [pc, #356]	; (80043ac <HAL_RCC_OscConfig+0x4ac>)
 8004246:	f023 0301 	bic.w	r3, r3, #1
 800424a:	6713      	str	r3, [r2, #112]	; 0x70
 800424c:	4b57      	ldr	r3, [pc, #348]	; (80043ac <HAL_RCC_OscConfig+0x4ac>)
 800424e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004250:	4a56      	ldr	r2, [pc, #344]	; (80043ac <HAL_RCC_OscConfig+0x4ac>)
 8004252:	f023 0304 	bic.w	r3, r3, #4
 8004256:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d015      	beq.n	800428c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004260:	f7fc fcde 	bl	8000c20 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004266:	e00a      	b.n	800427e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004268:	f7fc fcda 	bl	8000c20 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f241 3288 	movw	r2, #5000	; 0x1388
 8004276:	4293      	cmp	r3, r2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e0d7      	b.n	800442e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427e:	4b4b      	ldr	r3, [pc, #300]	; (80043ac <HAL_RCC_OscConfig+0x4ac>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0ee      	beq.n	8004268 <HAL_RCC_OscConfig+0x368>
 800428a:	e014      	b.n	80042b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428c:	f7fc fcc8 	bl	8000c20 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004292:	e00a      	b.n	80042aa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004294:	f7fc fcc4 	bl	8000c20 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e0c1      	b.n	800442e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042aa:	4b40      	ldr	r3, [pc, #256]	; (80043ac <HAL_RCC_OscConfig+0x4ac>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1ee      	bne.n	8004294 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d105      	bne.n	80042c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042bc:	4b3b      	ldr	r3, [pc, #236]	; (80043ac <HAL_RCC_OscConfig+0x4ac>)
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	4a3a      	ldr	r2, [pc, #232]	; (80043ac <HAL_RCC_OscConfig+0x4ac>)
 80042c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80ad 	beq.w	800442c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042d2:	4b36      	ldr	r3, [pc, #216]	; (80043ac <HAL_RCC_OscConfig+0x4ac>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 030c 	and.w	r3, r3, #12
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d060      	beq.n	80043a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d145      	bne.n	8004372 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e6:	4b33      	ldr	r3, [pc, #204]	; (80043b4 <HAL_RCC_OscConfig+0x4b4>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ec:	f7fc fc98 	bl	8000c20 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f4:	f7fc fc94 	bl	8000c20 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e093      	b.n	800442e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004306:	4b29      	ldr	r3, [pc, #164]	; (80043ac <HAL_RCC_OscConfig+0x4ac>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69da      	ldr	r2, [r3, #28]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	019b      	lsls	r3, r3, #6
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004328:	085b      	lsrs	r3, r3, #1
 800432a:	3b01      	subs	r3, #1
 800432c:	041b      	lsls	r3, r3, #16
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004334:	061b      	lsls	r3, r3, #24
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433c:	071b      	lsls	r3, r3, #28
 800433e:	491b      	ldr	r1, [pc, #108]	; (80043ac <HAL_RCC_OscConfig+0x4ac>)
 8004340:	4313      	orrs	r3, r2
 8004342:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004344:	4b1b      	ldr	r3, [pc, #108]	; (80043b4 <HAL_RCC_OscConfig+0x4b4>)
 8004346:	2201      	movs	r2, #1
 8004348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434a:	f7fc fc69 	bl	8000c20 <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004352:	f7fc fc65 	bl	8000c20 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e064      	b.n	800442e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004364:	4b11      	ldr	r3, [pc, #68]	; (80043ac <HAL_RCC_OscConfig+0x4ac>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0f0      	beq.n	8004352 <HAL_RCC_OscConfig+0x452>
 8004370:	e05c      	b.n	800442c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004372:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <HAL_RCC_OscConfig+0x4b4>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004378:	f7fc fc52 	bl	8000c20 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004380:	f7fc fc4e 	bl	8000c20 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e04d      	b.n	800442e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004392:	4b06      	ldr	r3, [pc, #24]	; (80043ac <HAL_RCC_OscConfig+0x4ac>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x480>
 800439e:	e045      	b.n	800442c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d107      	bne.n	80043b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e040      	b.n	800442e <HAL_RCC_OscConfig+0x52e>
 80043ac:	40023800 	.word	0x40023800
 80043b0:	40007000 	.word	0x40007000
 80043b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043b8:	4b1f      	ldr	r3, [pc, #124]	; (8004438 <HAL_RCC_OscConfig+0x538>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d030      	beq.n	8004428 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d129      	bne.n	8004428 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043de:	429a      	cmp	r2, r3
 80043e0:	d122      	bne.n	8004428 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043e8:	4013      	ands	r3, r2
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d119      	bne.n	8004428 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fe:	085b      	lsrs	r3, r3, #1
 8004400:	3b01      	subs	r3, #1
 8004402:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004404:	429a      	cmp	r2, r3
 8004406:	d10f      	bne.n	8004428 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004412:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004414:	429a      	cmp	r2, r3
 8004416:	d107      	bne.n	8004428 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004424:	429a      	cmp	r2, r3
 8004426:	d001      	beq.n	800442c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40023800 	.word	0x40023800

0800443c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e03f      	b.n	80044ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d106      	bne.n	8004468 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fc fb04 	bl	8000a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2224      	movs	r2, #36	; 0x24
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800447e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f929 	bl	80046d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004494:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695a      	ldr	r2, [r3, #20]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68da      	ldr	r2, [r3, #12]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b08a      	sub	sp, #40	; 0x28
 80044da:	af02      	add	r7, sp, #8
 80044dc:	60f8      	str	r0, [r7, #12]
 80044de:	60b9      	str	r1, [r7, #8]
 80044e0:	603b      	str	r3, [r7, #0]
 80044e2:	4613      	mov	r3, r2
 80044e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d17c      	bne.n	80045f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <HAL_UART_Transmit+0x2c>
 80044fc:	88fb      	ldrh	r3, [r7, #6]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e075      	b.n	80045f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800450c:	2b01      	cmp	r3, #1
 800450e:	d101      	bne.n	8004514 <HAL_UART_Transmit+0x3e>
 8004510:	2302      	movs	r3, #2
 8004512:	e06e      	b.n	80045f2 <HAL_UART_Transmit+0x11c>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2221      	movs	r2, #33	; 0x21
 8004526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800452a:	f7fc fb79 	bl	8000c20 <HAL_GetTick>
 800452e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	88fa      	ldrh	r2, [r7, #6]
 8004534:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	88fa      	ldrh	r2, [r7, #6]
 800453a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004544:	d108      	bne.n	8004558 <HAL_UART_Transmit+0x82>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d104      	bne.n	8004558 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800454e:	2300      	movs	r3, #0
 8004550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	61bb      	str	r3, [r7, #24]
 8004556:	e003      	b.n	8004560 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800455c:	2300      	movs	r3, #0
 800455e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004568:	e02a      	b.n	80045c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2200      	movs	r2, #0
 8004572:	2180      	movs	r1, #128	; 0x80
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 f840 	bl	80045fa <UART_WaitOnFlagUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e036      	b.n	80045f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10b      	bne.n	80045a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004598:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	3302      	adds	r3, #2
 800459e:	61bb      	str	r3, [r7, #24]
 80045a0:	e007      	b.n	80045b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	781a      	ldrb	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	3301      	adds	r3, #1
 80045b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1cf      	bne.n	800456a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2200      	movs	r2, #0
 80045d2:	2140      	movs	r1, #64	; 0x40
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 f810 	bl	80045fa <UART_WaitOnFlagUntilTimeout>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e006      	b.n	80045f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	e000      	b.n	80045f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80045f0:	2302      	movs	r3, #2
  }
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3720      	adds	r7, #32
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b090      	sub	sp, #64	; 0x40
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	603b      	str	r3, [r7, #0]
 8004606:	4613      	mov	r3, r2
 8004608:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800460a:	e050      	b.n	80046ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800460c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800460e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004612:	d04c      	beq.n	80046ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004616:	2b00      	cmp	r3, #0
 8004618:	d007      	beq.n	800462a <UART_WaitOnFlagUntilTimeout+0x30>
 800461a:	f7fc fb01 	bl	8000c20 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004626:	429a      	cmp	r2, r3
 8004628:	d241      	bcs.n	80046ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	330c      	adds	r3, #12
 8004630:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004634:	e853 3f00 	ldrex	r3, [r3]
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004640:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	330c      	adds	r3, #12
 8004648:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800464a:	637a      	str	r2, [r7, #52]	; 0x34
 800464c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004650:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004652:	e841 2300 	strex	r3, r2, [r1]
 8004656:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1e5      	bne.n	800462a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	3314      	adds	r3, #20
 8004664:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	e853 3f00 	ldrex	r3, [r3]
 800466c:	613b      	str	r3, [r7, #16]
   return(result);
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f023 0301 	bic.w	r3, r3, #1
 8004674:	63bb      	str	r3, [r7, #56]	; 0x38
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3314      	adds	r3, #20
 800467c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800467e:	623a      	str	r2, [r7, #32]
 8004680:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004682:	69f9      	ldr	r1, [r7, #28]
 8004684:	6a3a      	ldr	r2, [r7, #32]
 8004686:	e841 2300 	strex	r3, r2, [r1]
 800468a:	61bb      	str	r3, [r7, #24]
   return(result);
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1e5      	bne.n	800465e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2220      	movs	r2, #32
 800469e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e00f      	b.n	80046ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4013      	ands	r3, r2
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	bf0c      	ite	eq
 80046be:	2301      	moveq	r3, #1
 80046c0:	2300      	movne	r3, #0
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	461a      	mov	r2, r3
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d09f      	beq.n	800460c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3740      	adds	r7, #64	; 0x40
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046dc:	b0c0      	sub	sp, #256	; 0x100
 80046de:	af00      	add	r7, sp, #0
 80046e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f4:	68d9      	ldr	r1, [r3, #12]
 80046f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	ea40 0301 	orr.w	r3, r0, r1
 8004700:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	431a      	orrs	r2, r3
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	431a      	orrs	r2, r3
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004730:	f021 010c 	bic.w	r1, r1, #12
 8004734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800473e:	430b      	orrs	r3, r1
 8004740:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800474e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004752:	6999      	ldr	r1, [r3, #24]
 8004754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	ea40 0301 	orr.w	r3, r0, r1
 800475e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4b8f      	ldr	r3, [pc, #572]	; (80049a4 <UART_SetConfig+0x2cc>)
 8004768:	429a      	cmp	r2, r3
 800476a:	d005      	beq.n	8004778 <UART_SetConfig+0xa0>
 800476c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	4b8d      	ldr	r3, [pc, #564]	; (80049a8 <UART_SetConfig+0x2d0>)
 8004774:	429a      	cmp	r2, r3
 8004776:	d104      	bne.n	8004782 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004778:	f7fe feda 	bl	8003530 <HAL_RCC_GetPCLK2Freq>
 800477c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004780:	e003      	b.n	800478a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004782:	f7fe fec1 	bl	8003508 <HAL_RCC_GetPCLK1Freq>
 8004786:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800478a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004794:	f040 810c 	bne.w	80049b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800479c:	2200      	movs	r2, #0
 800479e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80047a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047aa:	4622      	mov	r2, r4
 80047ac:	462b      	mov	r3, r5
 80047ae:	1891      	adds	r1, r2, r2
 80047b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80047b2:	415b      	adcs	r3, r3
 80047b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047ba:	4621      	mov	r1, r4
 80047bc:	eb12 0801 	adds.w	r8, r2, r1
 80047c0:	4629      	mov	r1, r5
 80047c2:	eb43 0901 	adc.w	r9, r3, r1
 80047c6:	f04f 0200 	mov.w	r2, #0
 80047ca:	f04f 0300 	mov.w	r3, #0
 80047ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047da:	4690      	mov	r8, r2
 80047dc:	4699      	mov	r9, r3
 80047de:	4623      	mov	r3, r4
 80047e0:	eb18 0303 	adds.w	r3, r8, r3
 80047e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047e8:	462b      	mov	r3, r5
 80047ea:	eb49 0303 	adc.w	r3, r9, r3
 80047ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004802:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004806:	460b      	mov	r3, r1
 8004808:	18db      	adds	r3, r3, r3
 800480a:	653b      	str	r3, [r7, #80]	; 0x50
 800480c:	4613      	mov	r3, r2
 800480e:	eb42 0303 	adc.w	r3, r2, r3
 8004812:	657b      	str	r3, [r7, #84]	; 0x54
 8004814:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004818:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800481c:	f7fb fd48 	bl	80002b0 <__aeabi_uldivmod>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4b61      	ldr	r3, [pc, #388]	; (80049ac <UART_SetConfig+0x2d4>)
 8004826:	fba3 2302 	umull	r2, r3, r3, r2
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	011c      	lsls	r4, r3, #4
 800482e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004832:	2200      	movs	r2, #0
 8004834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004838:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800483c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004840:	4642      	mov	r2, r8
 8004842:	464b      	mov	r3, r9
 8004844:	1891      	adds	r1, r2, r2
 8004846:	64b9      	str	r1, [r7, #72]	; 0x48
 8004848:	415b      	adcs	r3, r3
 800484a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800484c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004850:	4641      	mov	r1, r8
 8004852:	eb12 0a01 	adds.w	sl, r2, r1
 8004856:	4649      	mov	r1, r9
 8004858:	eb43 0b01 	adc.w	fp, r3, r1
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004868:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800486c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004870:	4692      	mov	sl, r2
 8004872:	469b      	mov	fp, r3
 8004874:	4643      	mov	r3, r8
 8004876:	eb1a 0303 	adds.w	r3, sl, r3
 800487a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800487e:	464b      	mov	r3, r9
 8004880:	eb4b 0303 	adc.w	r3, fp, r3
 8004884:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004894:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004898:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800489c:	460b      	mov	r3, r1
 800489e:	18db      	adds	r3, r3, r3
 80048a0:	643b      	str	r3, [r7, #64]	; 0x40
 80048a2:	4613      	mov	r3, r2
 80048a4:	eb42 0303 	adc.w	r3, r2, r3
 80048a8:	647b      	str	r3, [r7, #68]	; 0x44
 80048aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048b2:	f7fb fcfd 	bl	80002b0 <__aeabi_uldivmod>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4611      	mov	r1, r2
 80048bc:	4b3b      	ldr	r3, [pc, #236]	; (80049ac <UART_SetConfig+0x2d4>)
 80048be:	fba3 2301 	umull	r2, r3, r3, r1
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	2264      	movs	r2, #100	; 0x64
 80048c6:	fb02 f303 	mul.w	r3, r2, r3
 80048ca:	1acb      	subs	r3, r1, r3
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80048d2:	4b36      	ldr	r3, [pc, #216]	; (80049ac <UART_SetConfig+0x2d4>)
 80048d4:	fba3 2302 	umull	r2, r3, r3, r2
 80048d8:	095b      	lsrs	r3, r3, #5
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048e0:	441c      	add	r4, r3
 80048e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048f4:	4642      	mov	r2, r8
 80048f6:	464b      	mov	r3, r9
 80048f8:	1891      	adds	r1, r2, r2
 80048fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80048fc:	415b      	adcs	r3, r3
 80048fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004900:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004904:	4641      	mov	r1, r8
 8004906:	1851      	adds	r1, r2, r1
 8004908:	6339      	str	r1, [r7, #48]	; 0x30
 800490a:	4649      	mov	r1, r9
 800490c:	414b      	adcs	r3, r1
 800490e:	637b      	str	r3, [r7, #52]	; 0x34
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800491c:	4659      	mov	r1, fp
 800491e:	00cb      	lsls	r3, r1, #3
 8004920:	4651      	mov	r1, sl
 8004922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004926:	4651      	mov	r1, sl
 8004928:	00ca      	lsls	r2, r1, #3
 800492a:	4610      	mov	r0, r2
 800492c:	4619      	mov	r1, r3
 800492e:	4603      	mov	r3, r0
 8004930:	4642      	mov	r2, r8
 8004932:	189b      	adds	r3, r3, r2
 8004934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004938:	464b      	mov	r3, r9
 800493a:	460a      	mov	r2, r1
 800493c:	eb42 0303 	adc.w	r3, r2, r3
 8004940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004950:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004954:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004958:	460b      	mov	r3, r1
 800495a:	18db      	adds	r3, r3, r3
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
 800495e:	4613      	mov	r3, r2
 8004960:	eb42 0303 	adc.w	r3, r2, r3
 8004964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004966:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800496a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800496e:	f7fb fc9f 	bl	80002b0 <__aeabi_uldivmod>
 8004972:	4602      	mov	r2, r0
 8004974:	460b      	mov	r3, r1
 8004976:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <UART_SetConfig+0x2d4>)
 8004978:	fba3 1302 	umull	r1, r3, r3, r2
 800497c:	095b      	lsrs	r3, r3, #5
 800497e:	2164      	movs	r1, #100	; 0x64
 8004980:	fb01 f303 	mul.w	r3, r1, r3
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	3332      	adds	r3, #50	; 0x32
 800498a:	4a08      	ldr	r2, [pc, #32]	; (80049ac <UART_SetConfig+0x2d4>)
 800498c:	fba2 2303 	umull	r2, r3, r2, r3
 8004990:	095b      	lsrs	r3, r3, #5
 8004992:	f003 0207 	and.w	r2, r3, #7
 8004996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4422      	add	r2, r4
 800499e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049a0:	e105      	b.n	8004bae <UART_SetConfig+0x4d6>
 80049a2:	bf00      	nop
 80049a4:	40011000 	.word	0x40011000
 80049a8:	40011400 	.word	0x40011400
 80049ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049b4:	2200      	movs	r2, #0
 80049b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80049c2:	4642      	mov	r2, r8
 80049c4:	464b      	mov	r3, r9
 80049c6:	1891      	adds	r1, r2, r2
 80049c8:	6239      	str	r1, [r7, #32]
 80049ca:	415b      	adcs	r3, r3
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
 80049ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049d2:	4641      	mov	r1, r8
 80049d4:	1854      	adds	r4, r2, r1
 80049d6:	4649      	mov	r1, r9
 80049d8:	eb43 0501 	adc.w	r5, r3, r1
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	00eb      	lsls	r3, r5, #3
 80049e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049ea:	00e2      	lsls	r2, r4, #3
 80049ec:	4614      	mov	r4, r2
 80049ee:	461d      	mov	r5, r3
 80049f0:	4643      	mov	r3, r8
 80049f2:	18e3      	adds	r3, r4, r3
 80049f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049f8:	464b      	mov	r3, r9
 80049fa:	eb45 0303 	adc.w	r3, r5, r3
 80049fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a1e:	4629      	mov	r1, r5
 8004a20:	008b      	lsls	r3, r1, #2
 8004a22:	4621      	mov	r1, r4
 8004a24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a28:	4621      	mov	r1, r4
 8004a2a:	008a      	lsls	r2, r1, #2
 8004a2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a30:	f7fb fc3e 	bl	80002b0 <__aeabi_uldivmod>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4b60      	ldr	r3, [pc, #384]	; (8004bbc <UART_SetConfig+0x4e4>)
 8004a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a3e:	095b      	lsrs	r3, r3, #5
 8004a40:	011c      	lsls	r4, r3, #4
 8004a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a54:	4642      	mov	r2, r8
 8004a56:	464b      	mov	r3, r9
 8004a58:	1891      	adds	r1, r2, r2
 8004a5a:	61b9      	str	r1, [r7, #24]
 8004a5c:	415b      	adcs	r3, r3
 8004a5e:	61fb      	str	r3, [r7, #28]
 8004a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a64:	4641      	mov	r1, r8
 8004a66:	1851      	adds	r1, r2, r1
 8004a68:	6139      	str	r1, [r7, #16]
 8004a6a:	4649      	mov	r1, r9
 8004a6c:	414b      	adcs	r3, r1
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	f04f 0300 	mov.w	r3, #0
 8004a78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a7c:	4659      	mov	r1, fp
 8004a7e:	00cb      	lsls	r3, r1, #3
 8004a80:	4651      	mov	r1, sl
 8004a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a86:	4651      	mov	r1, sl
 8004a88:	00ca      	lsls	r2, r1, #3
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4603      	mov	r3, r0
 8004a90:	4642      	mov	r2, r8
 8004a92:	189b      	adds	r3, r3, r2
 8004a94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a98:	464b      	mov	r3, r9
 8004a9a:	460a      	mov	r2, r1
 8004a9c:	eb42 0303 	adc.w	r3, r2, r3
 8004aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	67bb      	str	r3, [r7, #120]	; 0x78
 8004aae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004abc:	4649      	mov	r1, r9
 8004abe:	008b      	lsls	r3, r1, #2
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ac6:	4641      	mov	r1, r8
 8004ac8:	008a      	lsls	r2, r1, #2
 8004aca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ace:	f7fb fbef 	bl	80002b0 <__aeabi_uldivmod>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4b39      	ldr	r3, [pc, #228]	; (8004bbc <UART_SetConfig+0x4e4>)
 8004ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8004adc:	095b      	lsrs	r3, r3, #5
 8004ade:	2164      	movs	r1, #100	; 0x64
 8004ae0:	fb01 f303 	mul.w	r3, r1, r3
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	3332      	adds	r3, #50	; 0x32
 8004aea:	4a34      	ldr	r2, [pc, #208]	; (8004bbc <UART_SetConfig+0x4e4>)
 8004aec:	fba2 2303 	umull	r2, r3, r2, r3
 8004af0:	095b      	lsrs	r3, r3, #5
 8004af2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004af6:	441c      	add	r4, r3
 8004af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004afc:	2200      	movs	r2, #0
 8004afe:	673b      	str	r3, [r7, #112]	; 0x70
 8004b00:	677a      	str	r2, [r7, #116]	; 0x74
 8004b02:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b06:	4642      	mov	r2, r8
 8004b08:	464b      	mov	r3, r9
 8004b0a:	1891      	adds	r1, r2, r2
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	415b      	adcs	r3, r3
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b16:	4641      	mov	r1, r8
 8004b18:	1851      	adds	r1, r2, r1
 8004b1a:	6039      	str	r1, [r7, #0]
 8004b1c:	4649      	mov	r1, r9
 8004b1e:	414b      	adcs	r3, r1
 8004b20:	607b      	str	r3, [r7, #4]
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b2e:	4659      	mov	r1, fp
 8004b30:	00cb      	lsls	r3, r1, #3
 8004b32:	4651      	mov	r1, sl
 8004b34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b38:	4651      	mov	r1, sl
 8004b3a:	00ca      	lsls	r2, r1, #3
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4603      	mov	r3, r0
 8004b42:	4642      	mov	r2, r8
 8004b44:	189b      	adds	r3, r3, r2
 8004b46:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b48:	464b      	mov	r3, r9
 8004b4a:	460a      	mov	r2, r1
 8004b4c:	eb42 0303 	adc.w	r3, r2, r3
 8004b50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	663b      	str	r3, [r7, #96]	; 0x60
 8004b5c:	667a      	str	r2, [r7, #100]	; 0x64
 8004b5e:	f04f 0200 	mov.w	r2, #0
 8004b62:	f04f 0300 	mov.w	r3, #0
 8004b66:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b6a:	4649      	mov	r1, r9
 8004b6c:	008b      	lsls	r3, r1, #2
 8004b6e:	4641      	mov	r1, r8
 8004b70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b74:	4641      	mov	r1, r8
 8004b76:	008a      	lsls	r2, r1, #2
 8004b78:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b7c:	f7fb fb98 	bl	80002b0 <__aeabi_uldivmod>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <UART_SetConfig+0x4e4>)
 8004b86:	fba3 1302 	umull	r1, r3, r3, r2
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	2164      	movs	r1, #100	; 0x64
 8004b8e:	fb01 f303 	mul.w	r3, r1, r3
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	3332      	adds	r3, #50	; 0x32
 8004b98:	4a08      	ldr	r2, [pc, #32]	; (8004bbc <UART_SetConfig+0x4e4>)
 8004b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9e:	095b      	lsrs	r3, r3, #5
 8004ba0:	f003 020f 	and.w	r2, r3, #15
 8004ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4422      	add	r2, r4
 8004bac:	609a      	str	r2, [r3, #8]
}
 8004bae:	bf00      	nop
 8004bb0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bba:	bf00      	nop
 8004bbc:	51eb851f 	.word	0x51eb851f

08004bc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bc0:	b084      	sub	sp, #16
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	f107 001c 	add.w	r0, r7, #28
 8004bce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d122      	bne.n	8004c1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d105      	bne.n	8004c12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f9c0 	bl	8004f98 <USB_CoreReset>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	73fb      	strb	r3, [r7, #15]
 8004c1c:	e01a      	b.n	8004c54 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f9b4 	bl	8004f98 <USB_CoreReset>
 8004c30:	4603      	mov	r3, r0
 8004c32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d106      	bne.n	8004c48 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	639a      	str	r2, [r3, #56]	; 0x38
 8004c46:	e005      	b.n	8004c54 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d10b      	bne.n	8004c72 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f043 0206 	orr.w	r2, r3, #6
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f043 0220 	orr.w	r2, r3, #32
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c7e:	b004      	add	sp, #16
 8004c80:	4770      	bx	lr

08004c82 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f043 0201 	orr.w	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f023 0201 	bic.w	r2, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	460b      	mov	r3, r1
 8004cd0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ce2:	78fb      	ldrb	r3, [r7, #3]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d115      	bne.n	8004d14 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004cf4:	2001      	movs	r0, #1
 8004cf6:	f7fb ff9f 	bl	8000c38 <HAL_Delay>
      ms++;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f93a 	bl	8004f7a <USB_GetMode>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d01e      	beq.n	8004d4a <USB_SetCurrentMode+0x84>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b31      	cmp	r3, #49	; 0x31
 8004d10:	d9f0      	bls.n	8004cf4 <USB_SetCurrentMode+0x2e>
 8004d12:	e01a      	b.n	8004d4a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d115      	bne.n	8004d46 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d26:	2001      	movs	r0, #1
 8004d28:	f7fb ff86 	bl	8000c38 <HAL_Delay>
      ms++;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f921 	bl	8004f7a <USB_GetMode>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d005      	beq.n	8004d4a <USB_SetCurrentMode+0x84>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2b31      	cmp	r3, #49	; 0x31
 8004d42:	d9f0      	bls.n	8004d26 <USB_SetCurrentMode+0x60>
 8004d44:	e001      	b.n	8004d4a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e005      	b.n	8004d56 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b32      	cmp	r3, #50	; 0x32
 8004d4e:	d101      	bne.n	8004d54 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e000      	b.n	8004d56 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3301      	adds	r3, #1
 8004d72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4a13      	ldr	r2, [pc, #76]	; (8004dc4 <USB_FlushTxFifo+0x64>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d901      	bls.n	8004d80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e01b      	b.n	8004db8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	daf2      	bge.n	8004d6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	019b      	lsls	r3, r3, #6
 8004d90:	f043 0220 	orr.w	r2, r3, #32
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	4a08      	ldr	r2, [pc, #32]	; (8004dc4 <USB_FlushTxFifo+0x64>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d901      	bls.n	8004daa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e006      	b.n	8004db8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b20      	cmp	r3, #32
 8004db4:	d0f0      	beq.n	8004d98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	00030d40 	.word	0x00030d40

08004dc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4a11      	ldr	r2, [pc, #68]	; (8004e24 <USB_FlushRxFifo+0x5c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d901      	bls.n	8004de6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e018      	b.n	8004e18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	daf2      	bge.n	8004dd4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2210      	movs	r2, #16
 8004df6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4a08      	ldr	r2, [pc, #32]	; (8004e24 <USB_FlushRxFifo+0x5c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d901      	bls.n	8004e0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e006      	b.n	8004e18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f003 0310 	and.w	r3, r3, #16
 8004e12:	2b10      	cmp	r3, #16
 8004e14:	d0f0      	beq.n	8004df8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	00030d40 	.word	0x00030d40

08004e28 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b089      	sub	sp, #36	; 0x24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	4611      	mov	r1, r2
 8004e34:	461a      	mov	r2, r3
 8004e36:	460b      	mov	r3, r1
 8004e38:	71fb      	strb	r3, [r7, #7]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004e46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d123      	bne.n	8004e96 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e4e:	88bb      	ldrh	r3, [r7, #4]
 8004e50:	3303      	adds	r3, #3
 8004e52:	089b      	lsrs	r3, r3, #2
 8004e54:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004e56:	2300      	movs	r3, #0
 8004e58:	61bb      	str	r3, [r7, #24]
 8004e5a:	e018      	b.n	8004e8e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e5c:	79fb      	ldrb	r3, [r7, #7]
 8004e5e:	031a      	lsls	r2, r3, #12
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e68:	461a      	mov	r2, r3
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	3301      	adds	r3, #1
 8004e74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	3301      	adds	r3, #1
 8004e86:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	61bb      	str	r3, [r7, #24]
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d3e2      	bcc.n	8004e5c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3724      	adds	r7, #36	; 0x24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b08b      	sub	sp, #44	; 0x2c
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004eba:	88fb      	ldrh	r3, [r7, #6]
 8004ebc:	089b      	lsrs	r3, r3, #2
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004ec2:	88fb      	ldrh	r3, [r7, #6]
 8004ec4:	f003 0303 	and.w	r3, r3, #3
 8004ec8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004eca:	2300      	movs	r3, #0
 8004ecc:	623b      	str	r3, [r7, #32]
 8004ece:	e014      	b.n	8004efa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	601a      	str	r2, [r3, #0]
    pDest++;
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	3301      	adds	r3, #1
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	3301      	adds	r3, #1
 8004eec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	623b      	str	r3, [r7, #32]
 8004efa:	6a3a      	ldr	r2, [r7, #32]
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d3e6      	bcc.n	8004ed0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f02:	8bfb      	ldrh	r3, [r7, #30]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d01e      	beq.n	8004f46 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f12:	461a      	mov	r2, r3
 8004f14:	f107 0310 	add.w	r3, r7, #16
 8004f18:	6812      	ldr	r2, [r2, #0]
 8004f1a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	fa22 f303 	lsr.w	r3, r2, r3
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	701a      	strb	r2, [r3, #0]
      i++;
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	3301      	adds	r3, #1
 8004f32:	623b      	str	r3, [r7, #32]
      pDest++;
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	3301      	adds	r3, #1
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004f3a:	8bfb      	ldrh	r3, [r7, #30]
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004f40:	8bfb      	ldrh	r3, [r7, #30]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1ea      	bne.n	8004f1c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	372c      	adds	r7, #44	; 0x2c
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	f003 0301 	and.w	r3, r3, #1
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
	...

08004f98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	4a13      	ldr	r2, [pc, #76]	; (8004ffc <USB_CoreReset+0x64>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d901      	bls.n	8004fb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e01b      	b.n	8004fee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	daf2      	bge.n	8004fa4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f043 0201 	orr.w	r2, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4a09      	ldr	r2, [pc, #36]	; (8004ffc <USB_CoreReset+0x64>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d901      	bls.n	8004fe0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e006      	b.n	8004fee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d0f0      	beq.n	8004fce <USB_CoreReset+0x36>

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	00030d40 	.word	0x00030d40

08005000 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005000:	b084      	sub	sp, #16
 8005002:	b580      	push	{r7, lr}
 8005004:	b086      	sub	sp, #24
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800500e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005020:	461a      	mov	r2, r3
 8005022:	2300      	movs	r3, #0
 8005024:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503a:	2b00      	cmp	r3, #0
 800503c:	d018      	beq.n	8005070 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800503e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005040:	2b01      	cmp	r3, #1
 8005042:	d10a      	bne.n	800505a <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005052:	f043 0304 	orr.w	r3, r3, #4
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	e014      	b.n	8005084 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005068:	f023 0304 	bic.w	r3, r3, #4
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	e009      	b.n	8005084 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800507e:	f023 0304 	bic.w	r3, r3, #4
 8005082:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005084:	2110      	movs	r1, #16
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7ff fe6a 	bl	8004d60 <USB_FlushTxFifo>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7ff fe96 	bl	8004dc8 <USB_FlushRxFifo>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80050a6:	2300      	movs	r3, #0
 80050a8:	613b      	str	r3, [r7, #16]
 80050aa:	e015      	b.n	80050d8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b8:	461a      	mov	r2, r3
 80050ba:	f04f 33ff 	mov.w	r3, #4294967295
 80050be:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	015a      	lsls	r2, r3, #5
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4413      	add	r3, r2
 80050c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050cc:	461a      	mov	r2, r3
 80050ce:	2300      	movs	r3, #0
 80050d0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	3301      	adds	r3, #1
 80050d6:	613b      	str	r3, [r7, #16]
 80050d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d3e5      	bcc.n	80050ac <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f04f 32ff 	mov.w	r2, #4294967295
 80050ec:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00b      	beq.n	8005112 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005100:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a13      	ldr	r2, [pc, #76]	; (8005154 <USB_HostInit+0x154>)
 8005106:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a13      	ldr	r2, [pc, #76]	; (8005158 <USB_HostInit+0x158>)
 800510c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005110:	e009      	b.n	8005126 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2280      	movs	r2, #128	; 0x80
 8005116:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a10      	ldr	r2, [pc, #64]	; (800515c <USB_HostInit+0x15c>)
 800511c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a0f      	ldr	r2, [pc, #60]	; (8005160 <USB_HostInit+0x160>)
 8005122:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005128:	2b00      	cmp	r3, #0
 800512a:	d105      	bne.n	8005138 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	f043 0210 	orr.w	r2, r3, #16
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699a      	ldr	r2, [r3, #24]
 800513c:	4b09      	ldr	r3, [pc, #36]	; (8005164 <USB_HostInit+0x164>)
 800513e:	4313      	orrs	r3, r2
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005144:	7dfb      	ldrb	r3, [r7, #23]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005150:	b004      	add	sp, #16
 8005152:	4770      	bx	lr
 8005154:	01000200 	.word	0x01000200
 8005158:	00e00300 	.word	0x00e00300
 800515c:	00600080 	.word	0x00600080
 8005160:	004000e0 	.word	0x004000e0
 8005164:	a3200008 	.word	0xa3200008

08005168 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	460b      	mov	r3, r1
 8005172:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005186:	f023 0303 	bic.w	r3, r3, #3
 800518a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	f003 0303 	and.w	r3, r3, #3
 800519a:	68f9      	ldr	r1, [r7, #12]
 800519c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80051a0:	4313      	orrs	r3, r2
 80051a2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80051a4:	78fb      	ldrb	r3, [r7, #3]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d107      	bne.n	80051ba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051b0:	461a      	mov	r2, r3
 80051b2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80051b6:	6053      	str	r3, [r2, #4]
 80051b8:	e009      	b.n	80051ce <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80051ba:	78fb      	ldrb	r3, [r7, #3]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d106      	bne.n	80051ce <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051c6:	461a      	mov	r2, r3
 80051c8:	f241 7370 	movw	r3, #6000	; 0x1770
 80051cc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80051fc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800520a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800520c:	2064      	movs	r0, #100	; 0x64
 800520e:	f7fb fd13 	bl	8000c38 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800521a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800521e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005220:	200a      	movs	r0, #10
 8005222:	f7fb fd09 	bl	8000c38 <HAL_Delay>

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	460b      	mov	r3, r1
 800523a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005254:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d109      	bne.n	8005274 <USB_DriveVbus+0x44>
 8005260:	78fb      	ldrb	r3, [r7, #3]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d106      	bne.n	8005274 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800526e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005272:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800527a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800527e:	d109      	bne.n	8005294 <USB_DriveVbus+0x64>
 8005280:	78fb      	ldrb	r3, [r7, #3]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d106      	bne.n	8005294 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800528e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005292:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b085      	sub	sp, #20
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	0c5b      	lsrs	r3, r3, #17
 80052c0:	f003 0303 	and.w	r3, r3, #3
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	b29b      	uxth	r3, r3
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
	...

080052f4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b088      	sub	sp, #32
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	4608      	mov	r0, r1
 80052fe:	4611      	mov	r1, r2
 8005300:	461a      	mov	r2, r3
 8005302:	4603      	mov	r3, r0
 8005304:	70fb      	strb	r3, [r7, #3]
 8005306:	460b      	mov	r3, r1
 8005308:	70bb      	strb	r3, [r7, #2]
 800530a:	4613      	mov	r3, r2
 800530c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005316:	78fb      	ldrb	r3, [r7, #3]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	4413      	add	r3, r2
 800531e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005322:	461a      	mov	r2, r3
 8005324:	f04f 33ff 	mov.w	r3, #4294967295
 8005328:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800532a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800532e:	2b03      	cmp	r3, #3
 8005330:	d87e      	bhi.n	8005430 <USB_HC_Init+0x13c>
 8005332:	a201      	add	r2, pc, #4	; (adr r2, 8005338 <USB_HC_Init+0x44>)
 8005334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005338:	08005349 	.word	0x08005349
 800533c:	080053f3 	.word	0x080053f3
 8005340:	08005349 	.word	0x08005349
 8005344:	080053b5 	.word	0x080053b5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005348:	78fb      	ldrb	r3, [r7, #3]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	4413      	add	r3, r2
 8005350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005354:	461a      	mov	r2, r3
 8005356:	f240 439d 	movw	r3, #1181	; 0x49d
 800535a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800535c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005360:	2b00      	cmp	r3, #0
 8005362:	da10      	bge.n	8005386 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	4413      	add	r3, r2
 800536c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	78fa      	ldrb	r2, [r7, #3]
 8005374:	0151      	lsls	r1, r2, #5
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	440a      	add	r2, r1
 800537a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800537e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005382:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005384:	e057      	b.n	8005436 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538e:	2b00      	cmp	r3, #0
 8005390:	d051      	beq.n	8005436 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005392:	78fb      	ldrb	r3, [r7, #3]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	4413      	add	r3, r2
 800539a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	78fa      	ldrb	r2, [r7, #3]
 80053a2:	0151      	lsls	r1, r2, #5
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	440a      	add	r2, r1
 80053a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80053b0:	60d3      	str	r3, [r2, #12]
      break;
 80053b2:	e040      	b.n	8005436 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80053b4:	78fb      	ldrb	r3, [r7, #3]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c0:	461a      	mov	r2, r3
 80053c2:	f240 639d 	movw	r3, #1693	; 0x69d
 80053c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80053c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	da34      	bge.n	800543a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80053d0:	78fb      	ldrb	r3, [r7, #3]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	78fa      	ldrb	r2, [r7, #3]
 80053e0:	0151      	lsls	r1, r2, #5
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	440a      	add	r2, r1
 80053e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ee:	60d3      	str	r3, [r2, #12]
      }

      break;
 80053f0:	e023      	b.n	800543a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80053f2:	78fb      	ldrb	r3, [r7, #3]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053fe:	461a      	mov	r2, r3
 8005400:	f240 2325 	movw	r3, #549	; 0x225
 8005404:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005406:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800540a:	2b00      	cmp	r3, #0
 800540c:	da17      	bge.n	800543e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800540e:	78fb      	ldrb	r3, [r7, #3]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	4413      	add	r3, r2
 8005416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	78fa      	ldrb	r2, [r7, #3]
 800541e:	0151      	lsls	r1, r2, #5
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	440a      	add	r2, r1
 8005424:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005428:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800542c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800542e:	e006      	b.n	800543e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	77fb      	strb	r3, [r7, #31]
      break;
 8005434:	e004      	b.n	8005440 <USB_HC_Init+0x14c>
      break;
 8005436:	bf00      	nop
 8005438:	e002      	b.n	8005440 <USB_HC_Init+0x14c>
      break;
 800543a:	bf00      	nop
 800543c:	e000      	b.n	8005440 <USB_HC_Init+0x14c>
      break;
 800543e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	4413      	add	r3, r2
 8005448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	78fa      	ldrb	r2, [r7, #3]
 8005450:	0151      	lsls	r1, r2, #5
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	440a      	add	r2, r1
 8005456:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800545a:	f043 0302 	orr.w	r3, r3, #2
 800545e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005466:	699a      	ldr	r2, [r3, #24]
 8005468:	78fb      	ldrb	r3, [r7, #3]
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	2101      	movs	r1, #1
 8005470:	fa01 f303 	lsl.w	r3, r1, r3
 8005474:	6939      	ldr	r1, [r7, #16]
 8005476:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800547a:	4313      	orrs	r3, r2
 800547c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800548a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800548e:	2b00      	cmp	r3, #0
 8005490:	da03      	bge.n	800549a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005496:	61bb      	str	r3, [r7, #24]
 8005498:	e001      	b.n	800549e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7ff feff 	bl	80052a2 <USB_GetHostSpeed>
 80054a4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80054a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d106      	bne.n	80054bc <USB_HC_Init+0x1c8>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d003      	beq.n	80054bc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80054b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	e001      	b.n	80054c0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054c0:	787b      	ldrb	r3, [r7, #1]
 80054c2:	059b      	lsls	r3, r3, #22
 80054c4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80054c8:	78bb      	ldrb	r3, [r7, #2]
 80054ca:	02db      	lsls	r3, r3, #11
 80054cc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054d0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80054d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80054d6:	049b      	lsls	r3, r3, #18
 80054d8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80054dc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80054de:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80054e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80054e4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054ea:	78fb      	ldrb	r3, [r7, #3]
 80054ec:	0159      	lsls	r1, r3, #5
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	440b      	add	r3, r1
 80054f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054fc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80054fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005502:	2b03      	cmp	r3, #3
 8005504:	d003      	beq.n	800550e <USB_HC_Init+0x21a>
 8005506:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800550a:	2b01      	cmp	r3, #1
 800550c:	d10f      	bne.n	800552e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800550e:	78fb      	ldrb	r3, [r7, #3]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	4413      	add	r3, r2
 8005516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	78fa      	ldrb	r2, [r7, #3]
 800551e:	0151      	lsls	r1, r2, #5
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	440a      	add	r2, r1
 8005524:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005528:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800552c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800552e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3720      	adds	r7, #32
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08c      	sub	sp, #48	; 0x30
 800553c:	af02      	add	r7, sp, #8
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	4613      	mov	r3, r2
 8005544:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	785b      	ldrb	r3, [r3, #1]
 800554e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005550:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005554:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555e:	2b00      	cmp	r3, #0
 8005560:	d02d      	beq.n	80055be <USB_HC_StartXfer+0x86>
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	791b      	ldrb	r3, [r3, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d129      	bne.n	80055be <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d117      	bne.n	80055a0 <USB_HC_StartXfer+0x68>
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	79db      	ldrb	r3, [r3, #7]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <USB_HC_StartXfer+0x48>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	79db      	ldrb	r3, [r3, #7]
 800557c:	2b02      	cmp	r3, #2
 800557e:	d10f      	bne.n	80055a0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	4413      	add	r3, r2
 8005588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	69fa      	ldr	r2, [r7, #28]
 8005590:	0151      	lsls	r1, r2, #5
 8005592:	6a3a      	ldr	r2, [r7, #32]
 8005594:	440a      	add	r2, r1
 8005596:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800559a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800559e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80055a0:	79fb      	ldrb	r3, [r7, #7]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10b      	bne.n	80055be <USB_HC_StartXfer+0x86>
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	795b      	ldrb	r3, [r3, #5]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d107      	bne.n	80055be <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	785b      	ldrb	r3, [r3, #1]
 80055b2:	4619      	mov	r1, r3
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 fa0f 	bl	80059d8 <USB_DoPing>
      return HAL_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	e0f8      	b.n	80057b0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d018      	beq.n	80055f8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	8912      	ldrh	r2, [r2, #8]
 80055ce:	4413      	add	r3, r2
 80055d0:	3b01      	subs	r3, #1
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	8912      	ldrh	r2, [r2, #8]
 80055d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80055da:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80055dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80055de:	8b7b      	ldrh	r3, [r7, #26]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d90b      	bls.n	80055fc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80055e4:	8b7b      	ldrh	r3, [r7, #26]
 80055e6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80055e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	8912      	ldrh	r2, [r2, #8]
 80055ee:	fb03 f202 	mul.w	r2, r3, r2
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	611a      	str	r2, [r3, #16]
 80055f6:	e001      	b.n	80055fc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80055f8:	2301      	movs	r3, #1
 80055fa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	78db      	ldrb	r3, [r3, #3]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d007      	beq.n	8005614 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005604:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	8912      	ldrh	r2, [r2, #8]
 800560a:	fb03 f202 	mul.w	r2, r3, r2
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	611a      	str	r2, [r3, #16]
 8005612:	e003      	b.n	800561c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	695a      	ldr	r2, [r3, #20]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005624:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005626:	04d9      	lsls	r1, r3, #19
 8005628:	4b63      	ldr	r3, [pc, #396]	; (80057b8 <USB_HC_StartXfer+0x280>)
 800562a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800562c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	7a9b      	ldrb	r3, [r3, #10]
 8005632:	075b      	lsls	r3, r3, #29
 8005634:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005638:	69f9      	ldr	r1, [r7, #28]
 800563a:	0148      	lsls	r0, r1, #5
 800563c:	6a39      	ldr	r1, [r7, #32]
 800563e:	4401      	add	r1, r0
 8005640:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005644:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005646:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005648:	79fb      	ldrb	r3, [r7, #7]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d009      	beq.n	8005662 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	68d9      	ldr	r1, [r3, #12]
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	4413      	add	r3, r2
 800565a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800565e:	460a      	mov	r2, r1
 8005660:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	bf0c      	ite	eq
 8005672:	2301      	moveq	r3, #1
 8005674:	2300      	movne	r3, #0
 8005676:	b2db      	uxtb	r3, r3
 8005678:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	4413      	add	r3, r2
 8005682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	69fa      	ldr	r2, [r7, #28]
 800568a:	0151      	lsls	r1, r2, #5
 800568c:	6a3a      	ldr	r2, [r7, #32]
 800568e:	440a      	add	r2, r1
 8005690:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005694:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005698:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	7e7b      	ldrb	r3, [r7, #25]
 80056aa:	075b      	lsls	r3, r3, #29
 80056ac:	69f9      	ldr	r1, [r7, #28]
 80056ae:	0148      	lsls	r0, r1, #5
 80056b0:	6a39      	ldr	r1, [r7, #32]
 80056b2:	4401      	add	r1, r0
 80056b4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80056b8:	4313      	orrs	r3, r2
 80056ba:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056d2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	78db      	ldrb	r3, [r3, #3]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d004      	beq.n	80056e6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e2:	613b      	str	r3, [r7, #16]
 80056e4:	e003      	b.n	80056ee <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056ec:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056f4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005702:	461a      	mov	r2, r3
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005708:	79fb      	ldrb	r3, [r7, #7]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	e04e      	b.n	80057b0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	78db      	ldrb	r3, [r3, #3]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d149      	bne.n	80057ae <USB_HC_StartXfer+0x276>
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d045      	beq.n	80057ae <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	79db      	ldrb	r3, [r3, #7]
 8005726:	2b03      	cmp	r3, #3
 8005728:	d830      	bhi.n	800578c <USB_HC_StartXfer+0x254>
 800572a:	a201      	add	r2, pc, #4	; (adr r2, 8005730 <USB_HC_StartXfer+0x1f8>)
 800572c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005730:	08005741 	.word	0x08005741
 8005734:	08005765 	.word	0x08005765
 8005738:	08005741 	.word	0x08005741
 800573c:	08005765 	.word	0x08005765
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	3303      	adds	r3, #3
 8005746:	089b      	lsrs	r3, r3, #2
 8005748:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800574a:	8afa      	ldrh	r2, [r7, #22]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	b29b      	uxth	r3, r3
 8005752:	429a      	cmp	r2, r3
 8005754:	d91c      	bls.n	8005790 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	f043 0220 	orr.w	r2, r3, #32
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	619a      	str	r2, [r3, #24]
        }
        break;
 8005762:	e015      	b.n	8005790 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	3303      	adds	r3, #3
 800576a:	089b      	lsrs	r3, r3, #2
 800576c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800576e:	8afa      	ldrh	r2, [r7, #22]
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	b29b      	uxth	r3, r3
 800577a:	429a      	cmp	r2, r3
 800577c:	d90a      	bls.n	8005794 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	619a      	str	r2, [r3, #24]
        }
        break;
 800578a:	e003      	b.n	8005794 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800578c:	bf00      	nop
 800578e:	e002      	b.n	8005796 <USB_HC_StartXfer+0x25e>
        break;
 8005790:	bf00      	nop
 8005792:	e000      	b.n	8005796 <USB_HC_StartXfer+0x25e>
        break;
 8005794:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	68d9      	ldr	r1, [r3, #12]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	785a      	ldrb	r2, [r3, #1]
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2000      	movs	r0, #0
 80057a6:	9000      	str	r0, [sp, #0]
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f7ff fb3d 	bl	8004e28 <USB_WritePacket>
  }

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3728      	adds	r7, #40	; 0x28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	1ff80000 	.word	0x1ff80000

080057bc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	b29b      	uxth	r3, r3
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80057de:	b480      	push	{r7}
 80057e0:	b089      	sub	sp, #36	; 0x24
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	460b      	mov	r3, r1
 80057e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80057ee:	78fb      	ldrb	r3, [r7, #3]
 80057f0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	0c9b      	lsrs	r3, r3, #18
 8005806:	f003 0303 	and.w	r3, r3, #3
 800580a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	4413      	add	r3, r2
 8005814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	0fdb      	lsrs	r3, r3, #31
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f003 0320 	and.w	r3, r3, #32
 800582a:	2b20      	cmp	r3, #32
 800582c:	d104      	bne.n	8005838 <USB_HC_Halt+0x5a>
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005834:	2300      	movs	r3, #0
 8005836:	e0c8      	b.n	80059ca <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <USB_HC_Halt+0x66>
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2b02      	cmp	r3, #2
 8005842:	d163      	bne.n	800590c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	4413      	add	r3, r2
 800584c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	0151      	lsls	r1, r2, #5
 8005856:	69fa      	ldr	r2, [r7, #28]
 8005858:	440a      	add	r2, r1
 800585a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800585e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005862:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f003 0320 	and.w	r3, r3, #32
 800586c:	2b00      	cmp	r3, #0
 800586e:	f040 80ab 	bne.w	80059c8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005876:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d133      	bne.n	80058e6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	015a      	lsls	r2, r3, #5
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	4413      	add	r3, r2
 8005886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	0151      	lsls	r1, r2, #5
 8005890:	69fa      	ldr	r2, [r7, #28]
 8005892:	440a      	add	r2, r1
 8005894:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005898:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800589c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	0151      	lsls	r1, r2, #5
 80058b0:	69fa      	ldr	r2, [r7, #28]
 80058b2:	440a      	add	r2, r1
 80058b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058bc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	3301      	adds	r3, #1
 80058c2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058ca:	d81d      	bhi.n	8005908 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058e2:	d0ec      	beq.n	80058be <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80058e4:	e070      	b.n	80059c8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	0151      	lsls	r1, r2, #5
 80058f8:	69fa      	ldr	r2, [r7, #28]
 80058fa:	440a      	add	r2, r1
 80058fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005900:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005904:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005906:	e05f      	b.n	80059c8 <USB_HC_Halt+0x1ea>
            break;
 8005908:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800590a:	e05d      	b.n	80059c8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	4413      	add	r3, r2
 8005914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	0151      	lsls	r1, r2, #5
 800591e:	69fa      	ldr	r2, [r7, #28]
 8005920:	440a      	add	r2, r1
 8005922:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005926:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800592a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d133      	bne.n	80059a4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	4413      	add	r3, r2
 8005944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	0151      	lsls	r1, r2, #5
 800594e:	69fa      	ldr	r2, [r7, #28]
 8005950:	440a      	add	r2, r1
 8005952:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005956:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800595a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	4413      	add	r3, r2
 8005964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	0151      	lsls	r1, r2, #5
 800596e:	69fa      	ldr	r2, [r7, #28]
 8005970:	440a      	add	r2, r1
 8005972:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800597a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	3301      	adds	r3, #1
 8005980:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005988:	d81d      	bhi.n	80059c6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	4413      	add	r3, r2
 8005992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800599c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059a0:	d0ec      	beq.n	800597c <USB_HC_Halt+0x19e>
 80059a2:	e011      	b.n	80059c8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	0151      	lsls	r1, r2, #5
 80059b6:	69fa      	ldr	r2, [r7, #28]
 80059b8:	440a      	add	r2, r1
 80059ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059c2:	6013      	str	r3, [r2, #0]
 80059c4:	e000      	b.n	80059c8 <USB_HC_Halt+0x1ea>
          break;
 80059c6:	bf00      	nop
    }
  }

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3724      	adds	r7, #36	; 0x24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
	...

080059d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	460b      	mov	r3, r1
 80059e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80059e8:	78fb      	ldrb	r3, [r7, #3]
 80059ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80059ec:	2301      	movs	r3, #1
 80059ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	04da      	lsls	r2, r3, #19
 80059f4:	4b15      	ldr	r3, [pc, #84]	; (8005a4c <USB_DoPing+0x74>)
 80059f6:	4013      	ands	r3, r2
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	0151      	lsls	r1, r2, #5
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	440a      	add	r2, r1
 8005a00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a08:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a20:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a28:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	015a      	lsls	r2, r3, #5
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	4413      	add	r3, r2
 8005a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a36:	461a      	mov	r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	371c      	adds	r7, #28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	1ff80000 	.word	0x1ff80000

08005a50 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7ff f91d 	bl	8004ca4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a6a:	2110      	movs	r1, #16
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff f977 	bl	8004d60 <USB_FlushTxFifo>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7ff f9a3 	bl	8004dc8 <USB_FlushRxFifo>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	61bb      	str	r3, [r7, #24]
 8005a90:	e01f      	b.n	8005ad2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005aa8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ab0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ab8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	61bb      	str	r3, [r7, #24]
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	2b0f      	cmp	r3, #15
 8005ad6:	d9dc      	bls.n	8005a92 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005ad8:	2300      	movs	r3, #0
 8005ada:	61bb      	str	r3, [r7, #24]
 8005adc:	e034      	b.n	8005b48 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005af4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005afc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b04:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b12:	461a      	mov	r2, r3
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b24:	d80c      	bhi.n	8005b40 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b3c:	d0ec      	beq.n	8005b18 <USB_StopHost+0xc8>
 8005b3e:	e000      	b.n	8005b42 <USB_StopHost+0xf2>
        break;
 8005b40:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	3301      	adds	r3, #1
 8005b46:	61bb      	str	r3, [r7, #24]
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	2b0f      	cmp	r3, #15
 8005b4c:	d9c7      	bls.n	8005ade <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b54:	461a      	mov	r2, r3
 8005b56:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b62:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7ff f88c 	bl	8004c82 <USB_EnableGlobalInt>

  return ret;
 8005b6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3720      	adds	r7, #32
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8005b78:	4904      	ldr	r1, [pc, #16]	; (8005b8c <MX_FATFS_Init+0x18>)
 8005b7a:	4805      	ldr	r0, [pc, #20]	; (8005b90 <MX_FATFS_Init+0x1c>)
 8005b7c:	f005 fe46 	bl	800b80c <FATFS_LinkDriver>
 8005b80:	4603      	mov	r3, r0
 8005b82:	461a      	mov	r2, r3
 8005b84:	4b03      	ldr	r3, [pc, #12]	; (8005b94 <MX_FATFS_Init+0x20>)
 8005b86:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005b88:	bf00      	nop
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	20000124 	.word	0x20000124
 8005b90:	0800d6b8 	.word	0x0800d6b8
 8005b94:	20000120 	.word	0x20000120

08005b98 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005b9c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	4603      	mov	r3, r0
 8005bb0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8005bce:	79fb      	ldrb	r3, [r7, #7]
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	4808      	ldr	r0, [pc, #32]	; (8005bf4 <USBH_status+0x34>)
 8005bd4:	f000 fe32 	bl	800683c <USBH_MSC_UnitIsReady>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <USBH_status+0x24>
  {
    res = RES_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	73fb      	strb	r3, [r7, #15]
 8005be2:	e001      	b.n	8005be8 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	200005bc 	.word	0x200005bc

08005bf8 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b094      	sub	sp, #80	; 0x50
 8005bfc:	af02      	add	r7, sp, #8
 8005bfe:	60b9      	str	r1, [r7, #8]
 8005c00:	607a      	str	r2, [r7, #4]
 8005c02:	603b      	str	r3, [r7, #0]
 8005c04:	4603      	mov	r3, r0
 8005c06:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8005c0e:	7bf9      	ldrb	r1, [r7, #15]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	4813      	ldr	r0, [pc, #76]	; (8005c68 <USBH_read+0x70>)
 8005c1a:	f000 fe59 	bl	80068d0 <USBH_MSC_Read>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d103      	bne.n	8005c2c <USBH_read+0x34>
  {
    res = RES_OK;
 8005c24:	2300      	movs	r3, #0
 8005c26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005c2a:	e017      	b.n	8005c5c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005c2c:	f107 0210 	add.w	r2, r7, #16
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
 8005c32:	4619      	mov	r1, r3
 8005c34:	480c      	ldr	r0, [pc, #48]	; (8005c68 <USBH_read+0x70>)
 8005c36:	f000 fe27 	bl	8006888 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005c3a:	7f7b      	ldrb	r3, [r7, #29]
 8005c3c:	2b3a      	cmp	r3, #58	; 0x3a
 8005c3e:	d005      	beq.n	8005c4c <USBH_read+0x54>
 8005c40:	2b3a      	cmp	r3, #58	; 0x3a
 8005c42:	dc07      	bgt.n	8005c54 <USBH_read+0x5c>
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d001      	beq.n	8005c4c <USBH_read+0x54>
 8005c48:	2b28      	cmp	r3, #40	; 0x28
 8005c4a:	d103      	bne.n	8005c54 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005c52:	e003      	b.n	8005c5c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005c5a:	bf00      	nop
    }
  }

  return res;
 8005c5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3748      	adds	r7, #72	; 0x48
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	200005bc 	.word	0x200005bc

08005c6c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b094      	sub	sp, #80	; 0x50
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	60b9      	str	r1, [r7, #8]
 8005c74:	607a      	str	r2, [r7, #4]
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	4603      	mov	r3, r0
 8005c7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8005c82:	7bf9      	ldrb	r1, [r7, #15]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	4817      	ldr	r0, [pc, #92]	; (8005cec <USBH_write+0x80>)
 8005c8e:	f000 fe88 	bl	80069a2 <USBH_MSC_Write>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d103      	bne.n	8005ca0 <USBH_write+0x34>
  {
    res = RES_OK;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005c9e:	e01f      	b.n	8005ce0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005ca0:	f107 0210 	add.w	r2, r7, #16
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	4810      	ldr	r0, [pc, #64]	; (8005cec <USBH_write+0x80>)
 8005caa:	f000 fded 	bl	8006888 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005cae:	7f7b      	ldrb	r3, [r7, #29]
 8005cb0:	2b3a      	cmp	r3, #58	; 0x3a
 8005cb2:	d00d      	beq.n	8005cd0 <USBH_write+0x64>
 8005cb4:	2b3a      	cmp	r3, #58	; 0x3a
 8005cb6:	dc0f      	bgt.n	8005cd8 <USBH_write+0x6c>
 8005cb8:	2b28      	cmp	r3, #40	; 0x28
 8005cba:	d009      	beq.n	8005cd0 <USBH_write+0x64>
 8005cbc:	2b28      	cmp	r3, #40	; 0x28
 8005cbe:	dc0b      	bgt.n	8005cd8 <USBH_write+0x6c>
 8005cc0:	2b04      	cmp	r3, #4
 8005cc2:	d005      	beq.n	8005cd0 <USBH_write+0x64>
 8005cc4:	2b27      	cmp	r3, #39	; 0x27
 8005cc6:	d107      	bne.n	8005cd8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8005cc8:	2302      	movs	r3, #2
 8005cca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005cce:	e007      	b.n	8005ce0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005cd6:	e003      	b.n	8005ce0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005cde:	bf00      	nop
    }
  }

  return res;
 8005ce0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3748      	adds	r7, #72	; 0x48
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	200005bc 	.word	0x200005bc

08005cf0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b090      	sub	sp, #64	; 0x40
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	603a      	str	r2, [r7, #0]
 8005cfa:	71fb      	strb	r3, [r7, #7]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8005d06:	79bb      	ldrb	r3, [r7, #6]
 8005d08:	2b03      	cmp	r3, #3
 8005d0a:	d852      	bhi.n	8005db2 <USBH_ioctl+0xc2>
 8005d0c:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <USBH_ioctl+0x24>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005d25 	.word	0x08005d25
 8005d18:	08005d2d 	.word	0x08005d2d
 8005d1c:	08005d57 	.word	0x08005d57
 8005d20:	08005d83 	.word	0x08005d83
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005d2a:	e045      	b.n	8005db8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005d2c:	f107 0208 	add.w	r2, r7, #8
 8005d30:	79fb      	ldrb	r3, [r7, #7]
 8005d32:	4619      	mov	r1, r3
 8005d34:	4823      	ldr	r0, [pc, #140]	; (8005dc4 <USBH_ioctl+0xd4>)
 8005d36:	f000 fda7 	bl	8006888 <USBH_MSC_GetLUNInfo>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d106      	bne.n	8005d4e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005d4c:	e034      	b.n	8005db8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005d54:	e030      	b.n	8005db8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005d56:	f107 0208 	add.w	r2, r7, #8
 8005d5a:	79fb      	ldrb	r3, [r7, #7]
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4819      	ldr	r0, [pc, #100]	; (8005dc4 <USBH_ioctl+0xd4>)
 8005d60:	f000 fd92 	bl	8006888 <USBH_MSC_GetLUNInfo>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d107      	bne.n	8005d7a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8005d6a:	8a3b      	ldrh	r3, [r7, #16]
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005d78:	e01e      	b.n	8005db8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005d80:	e01a      	b.n	8005db8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005d82:	f107 0208 	add.w	r2, r7, #8
 8005d86:	79fb      	ldrb	r3, [r7, #7]
 8005d88:	4619      	mov	r1, r3
 8005d8a:	480e      	ldr	r0, [pc, #56]	; (8005dc4 <USBH_ioctl+0xd4>)
 8005d8c:	f000 fd7c 	bl	8006888 <USBH_MSC_GetLUNInfo>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d109      	bne.n	8005daa <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8005d96:	8a3b      	ldrh	r3, [r7, #16]
 8005d98:	0a5b      	lsrs	r3, r3, #9
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005da8:	e006      	b.n	8005db8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005db0:	e002      	b.n	8005db8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8005db2:	2304      	movs	r3, #4
 8005db4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8005db8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3740      	adds	r7, #64	; 0x40
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	200005bc 	.word	0x200005bc

08005dc8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005dc8:	b590      	push	{r4, r7, lr}
 8005dca:	b089      	sub	sp, #36	; 0x24
 8005dcc:	af04      	add	r7, sp, #16
 8005dce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005dd6:	7919      	ldrb	r1, [r3, #4]
 8005dd8:	2350      	movs	r3, #80	; 0x50
 8005dda:	2206      	movs	r2, #6
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f001 fc6b 	bl	80076b8 <USBH_FindInterface>
 8005de2:	4603      	mov	r3, r0
 8005de4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
 8005de8:	2bff      	cmp	r3, #255	; 0xff
 8005dea:	d002      	beq.n	8005df2 <USBH_MSC_InterfaceInit+0x2a>
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d901      	bls.n	8005df6 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005df2:	2302      	movs	r3, #2
 8005df4:	e106      	b.n	8006004 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8005df6:	7bfb      	ldrb	r3, [r7, #15]
 8005df8:	4619      	mov	r1, r3
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f001 fc40 	bl	8007680 <USBH_SelectInterface>
 8005e00:	4603      	mov	r3, r0
 8005e02:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005e04:	7bbb      	ldrb	r3, [r7, #14]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	e0fa      	b.n	8006004 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005e14:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005e18:	f006 fb2a 	bl	800c470 <malloc>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e26:	69db      	ldr	r3, [r3, #28]
 8005e28:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8005e30:	2302      	movs	r3, #2
 8005e32:	e0e7      	b.n	8006004 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8005e34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e38:	2100      	movs	r1, #0
 8005e3a:	68b8      	ldr	r0, [r7, #8]
 8005e3c:	f006 fb36 	bl	800c4ac <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	211a      	movs	r1, #26
 8005e46:	fb01 f303 	mul.w	r3, r1, r3
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	b25b      	sxtb	r3, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	da16      	bge.n	8005e86 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	211a      	movs	r1, #26
 8005e5e:	fb01 f303 	mul.w	r3, r1, r3
 8005e62:	4413      	add	r3, r2
 8005e64:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e68:	781a      	ldrb	r2, [r3, #0]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	211a      	movs	r1, #26
 8005e74:	fb01 f303 	mul.w	r3, r1, r3
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e7e:	881a      	ldrh	r2, [r3, #0]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	815a      	strh	r2, [r3, #10]
 8005e84:	e015      	b.n	8005eb2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	211a      	movs	r1, #26
 8005e8c:	fb01 f303 	mul.w	r3, r1, r3
 8005e90:	4413      	add	r3, r2
 8005e92:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e96:	781a      	ldrb	r2, [r3, #0]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	211a      	movs	r1, #26
 8005ea2:	fb01 f303 	mul.w	r3, r1, r3
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005eac:	881a      	ldrh	r2, [r3, #0]
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	211a      	movs	r1, #26
 8005eb8:	fb01 f303 	mul.w	r3, r1, r3
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	b25b      	sxtb	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	da16      	bge.n	8005ef8 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005eca:	7bfb      	ldrb	r3, [r7, #15]
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	211a      	movs	r1, #26
 8005ed0:	fb01 f303 	mul.w	r3, r1, r3
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005eda:	781a      	ldrb	r2, [r3, #0]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	211a      	movs	r1, #26
 8005ee6:	fb01 f303 	mul.w	r3, r1, r3
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005ef0:	881a      	ldrh	r2, [r3, #0]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	815a      	strh	r2, [r3, #10]
 8005ef6:	e015      	b.n	8005f24 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005ef8:	7bfb      	ldrb	r3, [r7, #15]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	211a      	movs	r1, #26
 8005efe:	fb01 f303 	mul.w	r3, r1, r3
 8005f02:	4413      	add	r3, r2
 8005f04:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f08:	781a      	ldrb	r2, [r3, #0]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	211a      	movs	r1, #26
 8005f14:	fb01 f303 	mul.w	r3, r1, r3
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005f1e:	881a      	ldrh	r2, [r3, #0]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2200      	movs	r2, #0
 8005f28:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2200      	movs	r2, #0
 8005f34:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	799b      	ldrb	r3, [r3, #6]
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f002 fed6 	bl	8008cee <USBH_AllocPipe>
 8005f42:	4603      	mov	r3, r0
 8005f44:	461a      	mov	r2, r3
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	79db      	ldrb	r3, [r3, #7]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f002 fecc 	bl	8008cee <USBH_AllocPipe>
 8005f56:	4603      	mov	r3, r0
 8005f58:	461a      	mov	r2, r3
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fdc4 	bl	8006aec <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	799b      	ldrb	r3, [r3, #6]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01e      	beq.n	8005faa <USBH_MSC_InterfaceInit+0x1e2>
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	891b      	ldrh	r3, [r3, #8]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d01a      	beq.n	8005faa <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	7959      	ldrb	r1, [r3, #5]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	7998      	ldrb	r0, [r3, #6]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	8912      	ldrh	r2, [r2, #8]
 8005f8c:	9202      	str	r2, [sp, #8]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	9201      	str	r2, [sp, #4]
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	4623      	mov	r3, r4
 8005f96:	4602      	mov	r2, r0
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f002 fe79 	bl	8008c90 <USBH_OpenPipe>
 8005f9e:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	79db      	ldrb	r3, [r3, #7]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d02c      	beq.n	8006002 <USBH_MSC_InterfaceInit+0x23a>
 8005fa8:	e001      	b.n	8005fae <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e02a      	b.n	8006004 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	895b      	ldrh	r3, [r3, #10]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d025      	beq.n	8006002 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	7919      	ldrb	r1, [r3, #4]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	79d8      	ldrb	r0, [r3, #7]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	8952      	ldrh	r2, [r2, #10]
 8005fce:	9202      	str	r2, [sp, #8]
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	9201      	str	r2, [sp, #4]
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	4623      	mov	r3, r4
 8005fd8:	4602      	mov	r2, r0
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f002 fe58 	bl	8008c90 <USBH_OpenPipe>
 8005fe0:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	791b      	ldrb	r3, [r3, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	4619      	mov	r1, r3
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f005 fef5 	bl	800bdda <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	795b      	ldrb	r3, [r3, #5]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f005 feee 	bl	800bdda <USBH_LL_SetToggle>

  return USBH_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	e000      	b.n	8006004 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8006002:	2303      	movs	r3, #3
}
 8006004:	4618      	mov	r0, r3
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	bd90      	pop	{r4, r7, pc}

0800600c <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	795b      	ldrb	r3, [r3, #5]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00e      	beq.n	8006044 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	795b      	ldrb	r3, [r3, #5]
 800602a:	4619      	mov	r1, r3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f002 fe4e 	bl	8008cce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	795b      	ldrb	r3, [r3, #5]
 8006036:	4619      	mov	r1, r3
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f002 fe79 	bl	8008d30 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	791b      	ldrb	r3, [r3, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00e      	beq.n	800606a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	791b      	ldrb	r3, [r3, #4]
 8006050:	4619      	mov	r1, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f002 fe3b 	bl	8008cce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	791b      	ldrb	r3, [r3, #4]
 800605c:	4619      	mov	r1, r3
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f002 fe66 	bl	8008d30 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00b      	beq.n	800608e <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	4618      	mov	r0, r3
 8006080:	f006 f9fe 	bl	800c480 <free>
    phost->pActiveClass->pData = 0U;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800608a:	2200      	movs	r2, #0
 800608c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060a6:	69db      	ldr	r3, [r3, #28]
 80060a8:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80060aa:	2301      	movs	r3, #1
 80060ac:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	7b9b      	ldrb	r3, [r3, #14]
 80060b2:	2b03      	cmp	r3, #3
 80060b4:	d041      	beq.n	800613a <USBH_MSC_ClassRequest+0xa2>
 80060b6:	2b03      	cmp	r3, #3
 80060b8:	dc4b      	bgt.n	8006152 <USBH_MSC_ClassRequest+0xba>
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <USBH_MSC_ClassRequest+0x2a>
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d147      	bne.n	8006152 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	4619      	mov	r1, r3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fcf1 	bl	8006aae <USBH_MSC_BOT_REQ_GetMaxLUN>
 80060cc:	4603      	mov	r3, r0
 80060ce:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
 80060d2:	2b03      	cmp	r3, #3
 80060d4:	d104      	bne.n	80060e0 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2200      	movs	r2, #0
 80060da:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80060dc:	2300      	movs	r3, #0
 80060de:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d137      	bne.n	8006156 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d804      	bhi.n	80060f8 <USBH_MSC_ClassRequest+0x60>
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	3301      	adds	r3, #1
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	e000      	b.n	80060fa <USBH_MSC_ClassRequest+0x62>
 80060f8:	2202      	movs	r2, #2
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80060fe:	2300      	movs	r3, #0
 8006100:	73bb      	strb	r3, [r7, #14]
 8006102:	e014      	b.n	800612e <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8006104:	7bbb      	ldrb	r3, [r7, #14]
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	2134      	movs	r1, #52	; 0x34
 800610a:	fb01 f303 	mul.w	r3, r1, r3
 800610e:	4413      	add	r3, r2
 8006110:	3392      	adds	r3, #146	; 0x92
 8006112:	2202      	movs	r2, #2
 8006114:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8006116:	7bbb      	ldrb	r3, [r7, #14]
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	2134      	movs	r1, #52	; 0x34
 800611c:	fb01 f303 	mul.w	r3, r1, r3
 8006120:	4413      	add	r3, r2
 8006122:	33c1      	adds	r3, #193	; 0xc1
 8006124:	2200      	movs	r2, #0
 8006126:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8006128:	7bbb      	ldrb	r3, [r7, #14]
 800612a:	3301      	adds	r3, #1
 800612c:	73bb      	strb	r3, [r7, #14]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	7bba      	ldrb	r2, [r7, #14]
 8006134:	429a      	cmp	r2, r3
 8006136:	d3e5      	bcc.n	8006104 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8006138:	e00d      	b.n	8006156 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800613a:	2100      	movs	r1, #0
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f002 f888 	bl	8008252 <USBH_ClrFeature>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d108      	bne.n	800615a <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	7bda      	ldrb	r2, [r3, #15]
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	739a      	strb	r2, [r3, #14]
      }
      break;
 8006150:	e003      	b.n	800615a <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8006152:	bf00      	nop
 8006154:	e002      	b.n	800615c <USBH_MSC_ClassRequest+0xc4>
      break;
 8006156:	bf00      	nop
 8006158:	e000      	b.n	800615c <USBH_MSC_ClassRequest+0xc4>
      break;
 800615a:	bf00      	nop
  }

  return status;
 800615c:	7bfb      	ldrb	r3, [r7, #15]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
	...

08006168 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800617a:	2301      	movs	r3, #1
 800617c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800617e:	2301      	movs	r3, #1
 8006180:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8006182:	2301      	movs	r3, #1
 8006184:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	7b1b      	ldrb	r3, [r3, #12]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <USBH_MSC_Process+0x2e>
 800618e:	2b01      	cmp	r3, #1
 8006190:	f000 8271 	beq.w	8006676 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8006194:	e272      	b.n	800667c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	429a      	cmp	r2, r3
 80061a4:	f080 824f 	bcs.w	8006646 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061ae:	4619      	mov	r1, r3
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	2334      	movs	r3, #52	; 0x34
 80061b4:	fb01 f303 	mul.w	r3, r1, r3
 80061b8:	4413      	add	r3, r2
 80061ba:	3391      	adds	r3, #145	; 0x91
 80061bc:	2201      	movs	r2, #1
 80061be:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061c6:	4619      	mov	r1, r3
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	2334      	movs	r3, #52	; 0x34
 80061cc:	fb01 f303 	mul.w	r3, r1, r3
 80061d0:	4413      	add	r3, r2
 80061d2:	3390      	adds	r3, #144	; 0x90
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	2b08      	cmp	r3, #8
 80061d8:	f200 8243 	bhi.w	8006662 <USBH_MSC_Process+0x4fa>
 80061dc:	a201      	add	r2, pc, #4	; (adr r2, 80061e4 <USBH_MSC_Process+0x7c>)
 80061de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e2:	bf00      	nop
 80061e4:	08006209 	.word	0x08006209
 80061e8:	08006663 	.word	0x08006663
 80061ec:	080062d1 	.word	0x080062d1
 80061f0:	08006455 	.word	0x08006455
 80061f4:	0800622f 	.word	0x0800622f
 80061f8:	08006521 	.word	0x08006521
 80061fc:	08006663 	.word	0x08006663
 8006200:	08006663 	.word	0x08006663
 8006204:	08006635 	.word	0x08006635
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800620e:	4619      	mov	r1, r3
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	2334      	movs	r3, #52	; 0x34
 8006214:	fb01 f303 	mul.w	r3, r1, r3
 8006218:	4413      	add	r3, r2
 800621a:	3390      	adds	r3, #144	; 0x90
 800621c:	2204      	movs	r2, #4
 800621e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800622c:	e222      	b.n	8006674 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006234:	b2d9      	uxtb	r1, r3
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800623c:	461a      	mov	r2, r3
 800623e:	2334      	movs	r3, #52	; 0x34
 8006240:	fb02 f303 	mul.w	r3, r2, r3
 8006244:	3398      	adds	r3, #152	; 0x98
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	4413      	add	r3, r2
 800624a:	3307      	adds	r3, #7
 800624c:	461a      	mov	r2, r3
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 ff6a 	bl	8007128 <USBH_MSC_SCSI_Inquiry>
 8006254:	4603      	mov	r3, r0
 8006256:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006258:	7bfb      	ldrb	r3, [r7, #15]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10b      	bne.n	8006276 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006264:	4619      	mov	r1, r3
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	2334      	movs	r3, #52	; 0x34
 800626a:	fb01 f303 	mul.w	r3, r1, r3
 800626e:	4413      	add	r3, r2
 8006270:	3390      	adds	r3, #144	; 0x90
 8006272:	2202      	movs	r2, #2
 8006274:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8006276:	7bfb      	ldrb	r3, [r7, #15]
 8006278:	2b02      	cmp	r3, #2
 800627a:	d10c      	bne.n	8006296 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006282:	4619      	mov	r1, r3
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	2334      	movs	r3, #52	; 0x34
 8006288:	fb01 f303 	mul.w	r3, r1, r3
 800628c:	4413      	add	r3, r2
 800628e:	3390      	adds	r3, #144	; 0x90
 8006290:	2205      	movs	r2, #5
 8006292:	701a      	strb	r2, [r3, #0]
            break;
 8006294:	e1e7      	b.n	8006666 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006296:	7bfb      	ldrb	r3, [r7, #15]
 8006298:	2b04      	cmp	r3, #4
 800629a:	f040 81e4 	bne.w	8006666 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062a4:	4619      	mov	r1, r3
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	2334      	movs	r3, #52	; 0x34
 80062aa:	fb01 f303 	mul.w	r3, r1, r3
 80062ae:	4413      	add	r3, r2
 80062b0:	3390      	adds	r3, #144	; 0x90
 80062b2:	2201      	movs	r2, #1
 80062b4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062bc:	4619      	mov	r1, r3
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	2334      	movs	r3, #52	; 0x34
 80062c2:	fb01 f303 	mul.w	r3, r1, r3
 80062c6:	4413      	add	r3, r2
 80062c8:	3391      	adds	r3, #145	; 0x91
 80062ca:	2202      	movs	r2, #2
 80062cc:	701a      	strb	r2, [r3, #0]
            break;
 80062ce:	e1ca      	b.n	8006666 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	4619      	mov	r1, r3
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fe66 	bl	8006fac <USBH_MSC_SCSI_TestUnitReady>
 80062e0:	4603      	mov	r3, r0
 80062e2:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80062e4:	7bbb      	ldrb	r3, [r7, #14]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d149      	bne.n	800637e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062f0:	4619      	mov	r1, r3
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	2334      	movs	r3, #52	; 0x34
 80062f6:	fb01 f303 	mul.w	r3, r1, r3
 80062fa:	4413      	add	r3, r2
 80062fc:	3392      	adds	r3, #146	; 0x92
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00c      	beq.n	800631e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800630a:	4619      	mov	r1, r3
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	2334      	movs	r3, #52	; 0x34
 8006310:	fb01 f303 	mul.w	r3, r1, r3
 8006314:	4413      	add	r3, r2
 8006316:	33c1      	adds	r3, #193	; 0xc1
 8006318:	2201      	movs	r2, #1
 800631a:	701a      	strb	r2, [r3, #0]
 800631c:	e00b      	b.n	8006336 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006324:	4619      	mov	r1, r3
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	2334      	movs	r3, #52	; 0x34
 800632a:	fb01 f303 	mul.w	r3, r1, r3
 800632e:	4413      	add	r3, r2
 8006330:	33c1      	adds	r3, #193	; 0xc1
 8006332:	2200      	movs	r2, #0
 8006334:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800633c:	4619      	mov	r1, r3
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	2334      	movs	r3, #52	; 0x34
 8006342:	fb01 f303 	mul.w	r3, r1, r3
 8006346:	4413      	add	r3, r2
 8006348:	3390      	adds	r3, #144	; 0x90
 800634a:	2203      	movs	r2, #3
 800634c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006354:	4619      	mov	r1, r3
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	2334      	movs	r3, #52	; 0x34
 800635a:	fb01 f303 	mul.w	r3, r1, r3
 800635e:	4413      	add	r3, r2
 8006360:	3391      	adds	r3, #145	; 0x91
 8006362:	2200      	movs	r2, #0
 8006364:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800636c:	4619      	mov	r1, r3
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	2334      	movs	r3, #52	; 0x34
 8006372:	fb01 f303 	mul.w	r3, r1, r3
 8006376:	4413      	add	r3, r2
 8006378:	3392      	adds	r3, #146	; 0x92
 800637a:	2200      	movs	r2, #0
 800637c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800637e:	7bbb      	ldrb	r3, [r7, #14]
 8006380:	2b02      	cmp	r3, #2
 8006382:	d14a      	bne.n	800641a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800638a:	4619      	mov	r1, r3
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	2334      	movs	r3, #52	; 0x34
 8006390:	fb01 f303 	mul.w	r3, r1, r3
 8006394:	4413      	add	r3, r2
 8006396:	3392      	adds	r3, #146	; 0x92
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	2b02      	cmp	r3, #2
 800639c:	d00c      	beq.n	80063b8 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063a4:	4619      	mov	r1, r3
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	2334      	movs	r3, #52	; 0x34
 80063aa:	fb01 f303 	mul.w	r3, r1, r3
 80063ae:	4413      	add	r3, r2
 80063b0:	33c1      	adds	r3, #193	; 0xc1
 80063b2:	2201      	movs	r2, #1
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	e00b      	b.n	80063d0 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063be:	4619      	mov	r1, r3
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	2334      	movs	r3, #52	; 0x34
 80063c4:	fb01 f303 	mul.w	r3, r1, r3
 80063c8:	4413      	add	r3, r2
 80063ca:	33c1      	adds	r3, #193	; 0xc1
 80063cc:	2200      	movs	r2, #0
 80063ce:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063d6:	4619      	mov	r1, r3
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	2334      	movs	r3, #52	; 0x34
 80063dc:	fb01 f303 	mul.w	r3, r1, r3
 80063e0:	4413      	add	r3, r2
 80063e2:	3390      	adds	r3, #144	; 0x90
 80063e4:	2205      	movs	r2, #5
 80063e6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063ee:	4619      	mov	r1, r3
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	2334      	movs	r3, #52	; 0x34
 80063f4:	fb01 f303 	mul.w	r3, r1, r3
 80063f8:	4413      	add	r3, r2
 80063fa:	3391      	adds	r3, #145	; 0x91
 80063fc:	2201      	movs	r2, #1
 80063fe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006406:	4619      	mov	r1, r3
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	2334      	movs	r3, #52	; 0x34
 800640c:	fb01 f303 	mul.w	r3, r1, r3
 8006410:	4413      	add	r3, r2
 8006412:	3392      	adds	r3, #146	; 0x92
 8006414:	2202      	movs	r2, #2
 8006416:	701a      	strb	r2, [r3, #0]
            break;
 8006418:	e127      	b.n	800666a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800641a:	7bbb      	ldrb	r3, [r7, #14]
 800641c:	2b04      	cmp	r3, #4
 800641e:	f040 8124 	bne.w	800666a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006428:	4619      	mov	r1, r3
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	2334      	movs	r3, #52	; 0x34
 800642e:	fb01 f303 	mul.w	r3, r1, r3
 8006432:	4413      	add	r3, r2
 8006434:	3390      	adds	r3, #144	; 0x90
 8006436:	2201      	movs	r2, #1
 8006438:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006440:	4619      	mov	r1, r3
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	2334      	movs	r3, #52	; 0x34
 8006446:	fb01 f303 	mul.w	r3, r1, r3
 800644a:	4413      	add	r3, r2
 800644c:	3391      	adds	r3, #145	; 0x91
 800644e:	2202      	movs	r2, #2
 8006450:	701a      	strb	r2, [r3, #0]
            break;
 8006452:	e10a      	b.n	800666a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800645a:	b2d9      	uxtb	r1, r3
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006462:	461a      	mov	r2, r3
 8006464:	2334      	movs	r3, #52	; 0x34
 8006466:	fb02 f303 	mul.w	r3, r2, r3
 800646a:	3390      	adds	r3, #144	; 0x90
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	4413      	add	r3, r2
 8006470:	3304      	adds	r3, #4
 8006472:	461a      	mov	r2, r3
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fddc 	bl	8007032 <USBH_MSC_SCSI_ReadCapacity>
 800647a:	4603      	mov	r3, r0
 800647c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d120      	bne.n	80064c6 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800648a:	4619      	mov	r1, r3
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	2334      	movs	r3, #52	; 0x34
 8006490:	fb01 f303 	mul.w	r3, r1, r3
 8006494:	4413      	add	r3, r2
 8006496:	3390      	adds	r3, #144	; 0x90
 8006498:	2201      	movs	r2, #1
 800649a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80064a2:	4619      	mov	r1, r3
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	2334      	movs	r3, #52	; 0x34
 80064a8:	fb01 f303 	mul.w	r3, r1, r3
 80064ac:	4413      	add	r3, r2
 80064ae:	3391      	adds	r3, #145	; 0x91
 80064b0:	2200      	movs	r2, #0
 80064b2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80064ba:	3301      	adds	r3, #1
 80064bc:	b29a      	uxth	r2, r3
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80064c4:	e0d3      	b.n	800666e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80064c6:	7bfb      	ldrb	r3, [r7, #15]
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d10c      	bne.n	80064e6 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80064d2:	4619      	mov	r1, r3
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	2334      	movs	r3, #52	; 0x34
 80064d8:	fb01 f303 	mul.w	r3, r1, r3
 80064dc:	4413      	add	r3, r2
 80064de:	3390      	adds	r3, #144	; 0x90
 80064e0:	2205      	movs	r2, #5
 80064e2:	701a      	strb	r2, [r3, #0]
            break;
 80064e4:	e0c3      	b.n	800666e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
 80064e8:	2b04      	cmp	r3, #4
 80064ea:	f040 80c0 	bne.w	800666e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80064f4:	4619      	mov	r1, r3
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	2334      	movs	r3, #52	; 0x34
 80064fa:	fb01 f303 	mul.w	r3, r1, r3
 80064fe:	4413      	add	r3, r2
 8006500:	3390      	adds	r3, #144	; 0x90
 8006502:	2201      	movs	r2, #1
 8006504:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800650c:	4619      	mov	r1, r3
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	2334      	movs	r3, #52	; 0x34
 8006512:	fb01 f303 	mul.w	r3, r1, r3
 8006516:	4413      	add	r3, r2
 8006518:	3391      	adds	r3, #145	; 0x91
 800651a:	2202      	movs	r2, #2
 800651c:	701a      	strb	r2, [r3, #0]
            break;
 800651e:	e0a6      	b.n	800666e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006526:	b2d9      	uxtb	r1, r3
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800652e:	461a      	mov	r2, r3
 8006530:	2334      	movs	r3, #52	; 0x34
 8006532:	fb02 f303 	mul.w	r3, r2, r3
 8006536:	3398      	adds	r3, #152	; 0x98
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	4413      	add	r3, r2
 800653c:	3304      	adds	r3, #4
 800653e:	461a      	mov	r2, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fe96 	bl	8007272 <USBH_MSC_SCSI_RequestSense>
 8006546:	4603      	mov	r3, r0
 8006548:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800654a:	7bfb      	ldrb	r3, [r7, #15]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d145      	bne.n	80065dc <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006556:	4619      	mov	r1, r3
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	2334      	movs	r3, #52	; 0x34
 800655c:	fb01 f303 	mul.w	r3, r1, r3
 8006560:	4413      	add	r3, r2
 8006562:	339c      	adds	r3, #156	; 0x9c
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	2b06      	cmp	r3, #6
 8006568:	d00c      	beq.n	8006584 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006570:	4619      	mov	r1, r3
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	2334      	movs	r3, #52	; 0x34
 8006576:	fb01 f303 	mul.w	r3, r1, r3
 800657a:	4413      	add	r3, r2
 800657c:	339c      	adds	r3, #156	; 0x9c
 800657e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006580:	2b02      	cmp	r3, #2
 8006582:	d117      	bne.n	80065b4 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	f242 720f 	movw	r2, #9999	; 0x270f
 8006596:	4293      	cmp	r3, r2
 8006598:	d80c      	bhi.n	80065b4 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80065a0:	4619      	mov	r1, r3
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	2334      	movs	r3, #52	; 0x34
 80065a6:	fb01 f303 	mul.w	r3, r1, r3
 80065aa:	4413      	add	r3, r2
 80065ac:	3390      	adds	r3, #144	; 0x90
 80065ae:	2202      	movs	r2, #2
 80065b0:	701a      	strb	r2, [r3, #0]
                  break;
 80065b2:	e05f      	b.n	8006674 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80065ba:	4619      	mov	r1, r3
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	2334      	movs	r3, #52	; 0x34
 80065c0:	fb01 f303 	mul.w	r3, r1, r3
 80065c4:	4413      	add	r3, r2
 80065c6:	3390      	adds	r3, #144	; 0x90
 80065c8:	2201      	movs	r2, #1
 80065ca:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80065d2:	3301      	adds	r3, #1
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d10c      	bne.n	80065fc <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80065e8:	4619      	mov	r1, r3
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	2334      	movs	r3, #52	; 0x34
 80065ee:	fb01 f303 	mul.w	r3, r1, r3
 80065f2:	4413      	add	r3, r2
 80065f4:	3390      	adds	r3, #144	; 0x90
 80065f6:	2208      	movs	r2, #8
 80065f8:	701a      	strb	r2, [r3, #0]
            break;
 80065fa:	e03a      	b.n	8006672 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80065fc:	7bfb      	ldrb	r3, [r7, #15]
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d137      	bne.n	8006672 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006608:	4619      	mov	r1, r3
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	2334      	movs	r3, #52	; 0x34
 800660e:	fb01 f303 	mul.w	r3, r1, r3
 8006612:	4413      	add	r3, r2
 8006614:	3390      	adds	r3, #144	; 0x90
 8006616:	2201      	movs	r2, #1
 8006618:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006620:	4619      	mov	r1, r3
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	2334      	movs	r3, #52	; 0x34
 8006626:	fb01 f303 	mul.w	r3, r1, r3
 800662a:	4413      	add	r3, r2
 800662c:	3391      	adds	r3, #145	; 0x91
 800662e:	2202      	movs	r2, #2
 8006630:	701a      	strb	r2, [r3, #0]
            break;
 8006632:	e01e      	b.n	8006672 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800663a:	3301      	adds	r3, #1
 800663c:	b29a      	uxth	r2, r3
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8006644:	e016      	b.n	8006674 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	2200      	movs	r2, #0
 800664a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	2201      	movs	r2, #1
 8006652:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800665a:	2102      	movs	r1, #2
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	4798      	blx	r3
      break;
 8006660:	e00c      	b.n	800667c <USBH_MSC_Process+0x514>
            break;
 8006662:	bf00      	nop
 8006664:	e00a      	b.n	800667c <USBH_MSC_Process+0x514>
            break;
 8006666:	bf00      	nop
 8006668:	e008      	b.n	800667c <USBH_MSC_Process+0x514>
            break;
 800666a:	bf00      	nop
 800666c:	e006      	b.n	800667c <USBH_MSC_Process+0x514>
            break;
 800666e:	bf00      	nop
 8006670:	e004      	b.n	800667c <USBH_MSC_Process+0x514>
            break;
 8006672:	bf00      	nop
      break;
 8006674:	e002      	b.n	800667c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8006676:	2300      	movs	r3, #0
 8006678:	75fb      	strb	r3, [r7, #23]
      break;
 800667a:	bf00      	nop
  }
  return error;
 800667c:	7dfb      	ldrb	r3, [r7, #23]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop

08006688 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b088      	sub	sp, #32
 80066a2:	af02      	add	r7, sp, #8
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	460b      	mov	r3, r1
 80066a8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80066b4:	2301      	movs	r3, #1
 80066b6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80066b8:	2301      	movs	r3, #1
 80066ba:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80066bc:	78fb      	ldrb	r3, [r7, #3]
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	2134      	movs	r1, #52	; 0x34
 80066c2:	fb01 f303 	mul.w	r3, r1, r3
 80066c6:	4413      	add	r3, r2
 80066c8:	3390      	adds	r3, #144	; 0x90
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	2b07      	cmp	r3, #7
 80066ce:	d03c      	beq.n	800674a <USBH_MSC_RdWrProcess+0xac>
 80066d0:	2b07      	cmp	r3, #7
 80066d2:	f300 80a7 	bgt.w	8006824 <USBH_MSC_RdWrProcess+0x186>
 80066d6:	2b05      	cmp	r3, #5
 80066d8:	d06c      	beq.n	80067b4 <USBH_MSC_RdWrProcess+0x116>
 80066da:	2b06      	cmp	r3, #6
 80066dc:	f040 80a2 	bne.w	8006824 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80066e0:	78f9      	ldrb	r1, [r7, #3]
 80066e2:	2300      	movs	r3, #0
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	2300      	movs	r3, #0
 80066e8:	2200      	movs	r2, #0
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fea5 	bl	800743a <USBH_MSC_SCSI_Read>
 80066f0:	4603      	mov	r3, r0
 80066f2:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10b      	bne.n	8006712 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80066fa:	78fb      	ldrb	r3, [r7, #3]
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	2134      	movs	r1, #52	; 0x34
 8006700:	fb01 f303 	mul.w	r3, r1, r3
 8006704:	4413      	add	r3, r2
 8006706:	3390      	adds	r3, #144	; 0x90
 8006708:	2201      	movs	r2, #1
 800670a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006710:	e08a      	b.n	8006828 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8006712:	7bfb      	ldrb	r3, [r7, #15]
 8006714:	2b02      	cmp	r3, #2
 8006716:	d109      	bne.n	800672c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006718:	78fb      	ldrb	r3, [r7, #3]
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	2134      	movs	r1, #52	; 0x34
 800671e:	fb01 f303 	mul.w	r3, r1, r3
 8006722:	4413      	add	r3, r2
 8006724:	3390      	adds	r3, #144	; 0x90
 8006726:	2205      	movs	r2, #5
 8006728:	701a      	strb	r2, [r3, #0]
      break;
 800672a:	e07d      	b.n	8006828 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800672c:	7bfb      	ldrb	r3, [r7, #15]
 800672e:	2b04      	cmp	r3, #4
 8006730:	d17a      	bne.n	8006828 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006732:	78fb      	ldrb	r3, [r7, #3]
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	2134      	movs	r1, #52	; 0x34
 8006738:	fb01 f303 	mul.w	r3, r1, r3
 800673c:	4413      	add	r3, r2
 800673e:	3390      	adds	r3, #144	; 0x90
 8006740:	2208      	movs	r2, #8
 8006742:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006744:	2302      	movs	r3, #2
 8006746:	75fb      	strb	r3, [r7, #23]
      break;
 8006748:	e06e      	b.n	8006828 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800674a:	78f9      	ldrb	r1, [r7, #3]
 800674c:	2300      	movs	r3, #0
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	2300      	movs	r3, #0
 8006752:	2200      	movs	r2, #0
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fe05 	bl	8007364 <USBH_MSC_SCSI_Write>
 800675a:	4603      	mov	r3, r0
 800675c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800675e:	7bfb      	ldrb	r3, [r7, #15]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10b      	bne.n	800677c <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006764:	78fb      	ldrb	r3, [r7, #3]
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	2134      	movs	r1, #52	; 0x34
 800676a:	fb01 f303 	mul.w	r3, r1, r3
 800676e:	4413      	add	r3, r2
 8006770:	3390      	adds	r3, #144	; 0x90
 8006772:	2201      	movs	r2, #1
 8006774:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800677a:	e057      	b.n	800682c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800677c:	7bfb      	ldrb	r3, [r7, #15]
 800677e:	2b02      	cmp	r3, #2
 8006780:	d109      	bne.n	8006796 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006782:	78fb      	ldrb	r3, [r7, #3]
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	2134      	movs	r1, #52	; 0x34
 8006788:	fb01 f303 	mul.w	r3, r1, r3
 800678c:	4413      	add	r3, r2
 800678e:	3390      	adds	r3, #144	; 0x90
 8006790:	2205      	movs	r2, #5
 8006792:	701a      	strb	r2, [r3, #0]
      break;
 8006794:	e04a      	b.n	800682c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006796:	7bfb      	ldrb	r3, [r7, #15]
 8006798:	2b04      	cmp	r3, #4
 800679a:	d147      	bne.n	800682c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800679c:	78fb      	ldrb	r3, [r7, #3]
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	2134      	movs	r1, #52	; 0x34
 80067a2:	fb01 f303 	mul.w	r3, r1, r3
 80067a6:	4413      	add	r3, r2
 80067a8:	3390      	adds	r3, #144	; 0x90
 80067aa:	2208      	movs	r2, #8
 80067ac:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80067ae:	2302      	movs	r3, #2
 80067b0:	75fb      	strb	r3, [r7, #23]
      break;
 80067b2:	e03b      	b.n	800682c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80067b4:	78fb      	ldrb	r3, [r7, #3]
 80067b6:	2234      	movs	r2, #52	; 0x34
 80067b8:	fb02 f303 	mul.w	r3, r2, r3
 80067bc:	3398      	adds	r3, #152	; 0x98
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4413      	add	r3, r2
 80067c2:	1d1a      	adds	r2, r3, #4
 80067c4:	78fb      	ldrb	r3, [r7, #3]
 80067c6:	4619      	mov	r1, r3
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fd52 	bl	8007272 <USBH_MSC_SCSI_RequestSense>
 80067ce:	4603      	mov	r3, r0
 80067d0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80067d2:	7bfb      	ldrb	r3, [r7, #15]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d113      	bne.n	8006800 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80067d8:	78fb      	ldrb	r3, [r7, #3]
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	2134      	movs	r1, #52	; 0x34
 80067de:	fb01 f303 	mul.w	r3, r1, r3
 80067e2:	4413      	add	r3, r2
 80067e4:	3390      	adds	r3, #144	; 0x90
 80067e6:	2201      	movs	r2, #1
 80067e8:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80067ea:	78fb      	ldrb	r3, [r7, #3]
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	2134      	movs	r1, #52	; 0x34
 80067f0:	fb01 f303 	mul.w	r3, r1, r3
 80067f4:	4413      	add	r3, r2
 80067f6:	3391      	adds	r3, #145	; 0x91
 80067f8:	2202      	movs	r2, #2
 80067fa:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 80067fc:	2302      	movs	r3, #2
 80067fe:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8006800:	7bfb      	ldrb	r3, [r7, #15]
 8006802:	2b02      	cmp	r3, #2
 8006804:	d014      	beq.n	8006830 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006806:	7bfb      	ldrb	r3, [r7, #15]
 8006808:	2b04      	cmp	r3, #4
 800680a:	d111      	bne.n	8006830 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800680c:	78fb      	ldrb	r3, [r7, #3]
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	2134      	movs	r1, #52	; 0x34
 8006812:	fb01 f303 	mul.w	r3, r1, r3
 8006816:	4413      	add	r3, r2
 8006818:	3390      	adds	r3, #144	; 0x90
 800681a:	2208      	movs	r2, #8
 800681c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800681e:	2302      	movs	r3, #2
 8006820:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006822:	e005      	b.n	8006830 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8006824:	bf00      	nop
 8006826:	e004      	b.n	8006832 <USBH_MSC_RdWrProcess+0x194>
      break;
 8006828:	bf00      	nop
 800682a:	e002      	b.n	8006832 <USBH_MSC_RdWrProcess+0x194>
      break;
 800682c:	bf00      	nop
 800682e:	e000      	b.n	8006832 <USBH_MSC_RdWrProcess+0x194>
      break;
 8006830:	bf00      	nop

  }
  return error;
 8006832:	7dfb      	ldrb	r3, [r7, #23]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	460b      	mov	r3, r1
 8006846:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b0b      	cmp	r3, #11
 800685a:	d10c      	bne.n	8006876 <USBH_MSC_UnitIsReady+0x3a>
 800685c:	78fb      	ldrb	r3, [r7, #3]
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	2134      	movs	r1, #52	; 0x34
 8006862:	fb01 f303 	mul.w	r3, r1, r3
 8006866:	4413      	add	r3, r2
 8006868:	3391      	adds	r3, #145	; 0x91
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d102      	bne.n	8006876 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8006870:	2301      	movs	r3, #1
 8006872:	73fb      	strb	r3, [r7, #15]
 8006874:	e001      	b.n	800687a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800687a:	7bfb      	ldrb	r3, [r7, #15]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	460b      	mov	r3, r1
 8006892:	607a      	str	r2, [r7, #4]
 8006894:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b0b      	cmp	r3, #11
 80068a8:	d10d      	bne.n	80068c6 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80068aa:	7afb      	ldrb	r3, [r7, #11]
 80068ac:	2234      	movs	r2, #52	; 0x34
 80068ae:	fb02 f303 	mul.w	r3, r2, r3
 80068b2:	3390      	adds	r3, #144	; 0x90
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	4413      	add	r3, r2
 80068b8:	2234      	movs	r2, #52	; 0x34
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f005 fde7 	bl	800c490 <memcpy>
    return USBH_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	e000      	b.n	80068c8 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80068c6:	2302      	movs	r3, #2
  }
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3718      	adds	r7, #24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b088      	sub	sp, #32
 80068d4:	af02      	add	r7, sp, #8
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	607a      	str	r2, [r7, #4]
 80068da:	603b      	str	r3, [r7, #0]
 80068dc:	460b      	mov	r3, r1
 80068de:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068e6:	69db      	ldr	r3, [r3, #28]
 80068e8:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00e      	beq.n	8006914 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80068fc:	2b0b      	cmp	r3, #11
 80068fe:	d109      	bne.n	8006914 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006900:	7afb      	ldrb	r3, [r7, #11]
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	2134      	movs	r1, #52	; 0x34
 8006906:	fb01 f303 	mul.w	r3, r1, r3
 800690a:	4413      	add	r3, r2
 800690c:	3390      	adds	r3, #144	; 0x90
 800690e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8006910:	2b01      	cmp	r3, #1
 8006912:	d001      	beq.n	8006918 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8006914:	2302      	movs	r3, #2
 8006916:	e040      	b.n	800699a <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	2206      	movs	r2, #6
 800691c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800691e:	7afb      	ldrb	r3, [r7, #11]
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	2134      	movs	r1, #52	; 0x34
 8006924:	fb01 f303 	mul.w	r3, r1, r3
 8006928:	4413      	add	r3, r2
 800692a:	3390      	adds	r3, #144	; 0x90
 800692c:	2206      	movs	r2, #6
 800692e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8006930:	7afb      	ldrb	r3, [r7, #11]
 8006932:	b29a      	uxth	r2, r3
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800693a:	7af9      	ldrb	r1, [r7, #11]
 800693c:	6a3b      	ldr	r3, [r7, #32]
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 fd78 	bl	800743a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006950:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006952:	e016      	b.n	8006982 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	1ad2      	subs	r2, r2, r3
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	f242 7110 	movw	r1, #10000	; 0x2710
 8006964:	fb01 f303 	mul.w	r3, r1, r3
 8006968:	429a      	cmp	r2, r3
 800696a:	d805      	bhi.n	8006978 <USBH_MSC_Read+0xa8>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b00      	cmp	r3, #0
 8006976:	d104      	bne.n	8006982 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	2201      	movs	r2, #1
 800697c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800697e:	2302      	movs	r3, #2
 8006980:	e00b      	b.n	800699a <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006982:	7afb      	ldrb	r3, [r7, #11]
 8006984:	4619      	mov	r1, r3
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f7ff fe89 	bl	800669e <USBH_MSC_RdWrProcess>
 800698c:	4603      	mov	r3, r0
 800698e:	2b01      	cmp	r3, #1
 8006990:	d0e0      	beq.n	8006954 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2201      	movs	r2, #1
 8006996:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3718      	adds	r7, #24
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b088      	sub	sp, #32
 80069a6:	af02      	add	r7, sp, #8
 80069a8:	60f8      	str	r0, [r7, #12]
 80069aa:	607a      	str	r2, [r7, #4]
 80069ac:	603b      	str	r3, [r7, #0]
 80069ae:	460b      	mov	r3, r1
 80069b0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00e      	beq.n	80069e6 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80069ce:	2b0b      	cmp	r3, #11
 80069d0:	d109      	bne.n	80069e6 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80069d2:	7afb      	ldrb	r3, [r7, #11]
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	2134      	movs	r1, #52	; 0x34
 80069d8:	fb01 f303 	mul.w	r3, r1, r3
 80069dc:	4413      	add	r3, r2
 80069de:	3390      	adds	r3, #144	; 0x90
 80069e0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d001      	beq.n	80069ea <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80069e6:	2302      	movs	r3, #2
 80069e8:	e040      	b.n	8006a6c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	2207      	movs	r2, #7
 80069ee:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80069f0:	7afb      	ldrb	r3, [r7, #11]
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	2134      	movs	r1, #52	; 0x34
 80069f6:	fb01 f303 	mul.w	r3, r1, r3
 80069fa:	4413      	add	r3, r2
 80069fc:	3390      	adds	r3, #144	; 0x90
 80069fe:	2207      	movs	r2, #7
 8006a00:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8006a02:	7afb      	ldrb	r3, [r7, #11]
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8006a0c:	7af9      	ldrb	r1, [r7, #11]
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f000 fca4 	bl	8007364 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006a22:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006a24:	e016      	b.n	8006a54 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	1ad2      	subs	r2, r2, r3
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	f242 7110 	movw	r1, #10000	; 0x2710
 8006a36:	fb01 f303 	mul.w	r3, r1, r3
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d805      	bhi.n	8006a4a <USBH_MSC_Write+0xa8>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d104      	bne.n	8006a54 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8006a50:	2302      	movs	r3, #2
 8006a52:	e00b      	b.n	8006a6c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006a54:	7afb      	ldrb	r3, [r7, #11]
 8006a56:	4619      	mov	r1, r3
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f7ff fe20 	bl	800669e <USBH_MSC_RdWrProcess>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d0e0      	beq.n	8006a26 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	2201      	movs	r2, #1
 8006a68:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3718      	adds	r7, #24
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2221      	movs	r2, #33	; 0x21
 8006a80:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	22ff      	movs	r2, #255	; 0xff
 8006a86:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f001 fea4 	bl	80087ec <USBH_CtlReq>
 8006aa4:	4603      	mov	r3, r0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b082      	sub	sp, #8
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	22a1      	movs	r2, #161	; 0xa1
 8006abc:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	22fe      	movs	r2, #254	; 0xfe
 8006ac2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f001 fe86 	bl	80087ec <USBH_CtlReq>
 8006ae0:	4603      	mov	r3, r0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	4a09      	ldr	r2, [pc, #36]	; (8006b28 <USBH_MSC_BOT_Init+0x3c>)
 8006b02:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4a09      	ldr	r2, [pc, #36]	; (8006b2c <USBH_MSC_BOT_Init+0x40>)
 8006b08:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	43425355 	.word	0x43425355
 8006b2c:	20304050 	.word	0x20304050

08006b30 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b088      	sub	sp, #32
 8006b34:	af02      	add	r7, sp, #8
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	460b      	mov	r3, r1
 8006b3a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8006b40:	2301      	movs	r3, #1
 8006b42:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8006b44:	2301      	movs	r3, #1
 8006b46:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8006b56:	2300      	movs	r3, #0
 8006b58:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b60:	3b01      	subs	r3, #1
 8006b62:	2b0a      	cmp	r3, #10
 8006b64:	f200 819e 	bhi.w	8006ea4 <USBH_MSC_BOT_Process+0x374>
 8006b68:	a201      	add	r2, pc, #4	; (adr r2, 8006b70 <USBH_MSC_BOT_Process+0x40>)
 8006b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6e:	bf00      	nop
 8006b70:	08006b9d 	.word	0x08006b9d
 8006b74:	08006bc5 	.word	0x08006bc5
 8006b78:	08006c2f 	.word	0x08006c2f
 8006b7c:	08006c4d 	.word	0x08006c4d
 8006b80:	08006cd1 	.word	0x08006cd1
 8006b84:	08006cf3 	.word	0x08006cf3
 8006b88:	08006d8b 	.word	0x08006d8b
 8006b8c:	08006da7 	.word	0x08006da7
 8006b90:	08006df9 	.word	0x08006df9
 8006b94:	08006e29 	.word	0x08006e29
 8006b98:	08006e8b 	.word	0x08006e8b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	78fa      	ldrb	r2, [r7, #3]
 8006ba0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	795b      	ldrb	r3, [r3, #5]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	9200      	str	r2, [sp, #0]
 8006bba:	221f      	movs	r2, #31
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f002 f824 	bl	8008c0a <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8006bc2:	e17e      	b.n	8006ec2 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	795b      	ldrb	r3, [r3, #5]
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f005 f8db 	bl	800bd86 <USBH_LL_GetURBState>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006bd4:	7d3b      	ldrb	r3, [r7, #20]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d118      	bne.n	8006c0c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00f      	beq.n	8006c02 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006be8:	b25b      	sxtb	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	da04      	bge.n	8006bf8 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	2203      	movs	r2, #3
 8006bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006bf6:	e157      	b.n	8006ea8 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	2205      	movs	r2, #5
 8006bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006c00:	e152      	b.n	8006ea8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	2207      	movs	r2, #7
 8006c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006c0a:	e14d      	b.n	8006ea8 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006c0c:	7d3b      	ldrb	r3, [r7, #20]
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d104      	bne.n	8006c1c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006c1a:	e145      	b.n	8006ea8 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8006c1c:	7d3b      	ldrb	r3, [r7, #20]
 8006c1e:	2b05      	cmp	r3, #5
 8006c20:	f040 8142 	bne.w	8006ea8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	220a      	movs	r2, #10
 8006c28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006c2c:	e13c      	b.n	8006ea8 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	895a      	ldrh	r2, [r3, #10]
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	791b      	ldrb	r3, [r3, #4]
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f002 f809 	bl	8008c54 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	2204      	movs	r2, #4
 8006c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8006c4a:	e13a      	b.n	8006ec2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	791b      	ldrb	r3, [r3, #4]
 8006c50:	4619      	mov	r1, r3
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f005 f897 	bl	800bd86 <USBH_LL_GetURBState>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006c5c:	7d3b      	ldrb	r3, [r7, #20]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d12d      	bne.n	8006cbe <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	8952      	ldrh	r2, [r2, #10]
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d910      	bls.n	8006c90 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	8952      	ldrh	r2, [r2, #10]
 8006c78:	441a      	add	r2, r3
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	8952      	ldrh	r2, [r2, #10]
 8006c88:	1a9a      	subs	r2, r3, r2
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8006c8e:	e002      	b.n	8006c96 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	2200      	movs	r2, #0
 8006c94:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00a      	beq.n	8006cb4 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	895a      	ldrh	r2, [r3, #10]
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	791b      	ldrb	r3, [r3, #4]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 ffd1 	bl	8008c54 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8006cb2:	e0fb      	b.n	8006eac <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	2207      	movs	r2, #7
 8006cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006cbc:	e0f6      	b.n	8006eac <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8006cbe:	7d3b      	ldrb	r3, [r7, #20]
 8006cc0:	2b05      	cmp	r3, #5
 8006cc2:	f040 80f3 	bne.w	8006eac <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	2209      	movs	r2, #9
 8006cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006cce:	e0ed      	b.n	8006eac <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	891a      	ldrh	r2, [r3, #8]
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	795b      	ldrb	r3, [r3, #5]
 8006cde:	2001      	movs	r0, #1
 8006ce0:	9000      	str	r0, [sp, #0]
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f001 ff91 	bl	8008c0a <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	2206      	movs	r2, #6
 8006cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006cf0:	e0e7      	b.n	8006ec2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	795b      	ldrb	r3, [r3, #5]
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f005 f844 	bl	800bd86 <USBH_LL_GetURBState>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006d02:	7d3b      	ldrb	r3, [r7, #20]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d12f      	bne.n	8006d68 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	8912      	ldrh	r2, [r2, #8]
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d910      	bls.n	8006d36 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	8912      	ldrh	r2, [r2, #8]
 8006d1e:	441a      	add	r2, r3
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	8912      	ldrh	r2, [r2, #8]
 8006d2e:	1a9a      	subs	r2, r3, r2
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	65da      	str	r2, [r3, #92]	; 0x5c
 8006d34:	e002      	b.n	8006d3c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00c      	beq.n	8006d5e <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	891a      	ldrh	r2, [r3, #8]
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	795b      	ldrb	r3, [r3, #5]
 8006d52:	2001      	movs	r0, #1
 8006d54:	9000      	str	r0, [sp, #0]
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 ff57 	bl	8008c0a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8006d5c:	e0a8      	b.n	8006eb0 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	2207      	movs	r2, #7
 8006d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006d66:	e0a3      	b.n	8006eb0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006d68:	7d3b      	ldrb	r3, [r7, #20]
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d104      	bne.n	8006d78 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	2205      	movs	r2, #5
 8006d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006d76:	e09b      	b.n	8006eb0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8006d78:	7d3b      	ldrb	r3, [r7, #20]
 8006d7a:	2b05      	cmp	r3, #5
 8006d7c:	f040 8098 	bne.w	8006eb0 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	220a      	movs	r2, #10
 8006d84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006d88:	e092      	b.n	8006eb0 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	791b      	ldrb	r3, [r3, #4]
 8006d94:	220d      	movs	r2, #13
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f001 ff5c 	bl	8008c54 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	2208      	movs	r2, #8
 8006da0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006da4:	e08d      	b.n	8006ec2 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	791b      	ldrb	r3, [r3, #4]
 8006daa:	4619      	mov	r1, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f004 ffea 	bl	800bd86 <USBH_LL_GetURBState>
 8006db2:	4603      	mov	r3, r0
 8006db4:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8006db6:	7d3b      	ldrb	r3, [r7, #20]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d115      	bne.n	8006de8 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f8a9 	bl	8006f24 <USBH_MSC_DecodeCSW>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8006dd6:	7d7b      	ldrb	r3, [r7, #21]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d102      	bne.n	8006de2 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8006de0:	e068      	b.n	8006eb4 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8006de2:	2302      	movs	r3, #2
 8006de4:	75fb      	strb	r3, [r7, #23]
      break;
 8006de6:	e065      	b.n	8006eb4 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8006de8:	7d3b      	ldrb	r3, [r7, #20]
 8006dea:	2b05      	cmp	r3, #5
 8006dec:	d162      	bne.n	8006eb4 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	2209      	movs	r2, #9
 8006df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006df6:	e05d      	b.n	8006eb4 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8006df8:	78fb      	ldrb	r3, [r7, #3]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f864 	bl	8006ecc <USBH_MSC_BOT_Abort>
 8006e04:	4603      	mov	r3, r0
 8006e06:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006e08:	7dbb      	ldrb	r3, [r7, #22]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d104      	bne.n	8006e18 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	2207      	movs	r2, #7
 8006e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8006e16:	e04f      	b.n	8006eb8 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8006e18:	7dbb      	ldrb	r3, [r7, #22]
 8006e1a:	2b04      	cmp	r3, #4
 8006e1c:	d14c      	bne.n	8006eb8 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	220b      	movs	r2, #11
 8006e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006e26:	e047      	b.n	8006eb8 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8006e28:	78fb      	ldrb	r3, [r7, #3]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f84c 	bl	8006ecc <USBH_MSC_BOT_Abort>
 8006e34:	4603      	mov	r3, r0
 8006e36:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006e38:	7dbb      	ldrb	r3, [r7, #22]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d11d      	bne.n	8006e7a <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	795b      	ldrb	r3, [r3, #5]
 8006e42:	4619      	mov	r1, r3
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f004 fff8 	bl	800be3a <USBH_LL_GetToggle>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	7959      	ldrb	r1, [r3, #5]
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
 8006e54:	f1c3 0301 	rsb	r3, r3, #1
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f004 ffbc 	bl	800bdda <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	791b      	ldrb	r3, [r3, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f004 ffb5 	bl	800bdda <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	2209      	movs	r2, #9
 8006e74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8006e78:	e020      	b.n	8006ebc <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8006e7a:	7dbb      	ldrb	r3, [r7, #22]
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d11d      	bne.n	8006ebc <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	220b      	movs	r2, #11
 8006e84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006e88:	e018      	b.n	8006ebc <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7ff fdf2 	bl	8006a74 <USBH_MSC_BOT_REQ_Reset>
 8006e90:	4603      	mov	r3, r0
 8006e92:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8006e94:	7dfb      	ldrb	r3, [r7, #23]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d112      	bne.n	8006ec0 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8006ea2:	e00d      	b.n	8006ec0 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8006ea4:	bf00      	nop
 8006ea6:	e00c      	b.n	8006ec2 <USBH_MSC_BOT_Process+0x392>
      break;
 8006ea8:	bf00      	nop
 8006eaa:	e00a      	b.n	8006ec2 <USBH_MSC_BOT_Process+0x392>
      break;
 8006eac:	bf00      	nop
 8006eae:	e008      	b.n	8006ec2 <USBH_MSC_BOT_Process+0x392>
      break;
 8006eb0:	bf00      	nop
 8006eb2:	e006      	b.n	8006ec2 <USBH_MSC_BOT_Process+0x392>
      break;
 8006eb4:	bf00      	nop
 8006eb6:	e004      	b.n	8006ec2 <USBH_MSC_BOT_Process+0x392>
      break;
 8006eb8:	bf00      	nop
 8006eba:	e002      	b.n	8006ec2 <USBH_MSC_BOT_Process+0x392>
      break;
 8006ebc:	bf00      	nop
 8006ebe:	e000      	b.n	8006ec2 <USBH_MSC_BOT_Process+0x392>
      break;
 8006ec0:	bf00      	nop
  }
  return status;
 8006ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	70fb      	strb	r3, [r7, #3]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8006edc:	2302      	movs	r3, #2
 8006ede:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8006eea:	78bb      	ldrb	r3, [r7, #2]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d002      	beq.n	8006ef6 <USBH_MSC_BOT_Abort+0x2a>
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d009      	beq.n	8006f08 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8006ef4:	e011      	b.n	8006f1a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	79db      	ldrb	r3, [r3, #7]
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 f9a8 	bl	8008252 <USBH_ClrFeature>
 8006f02:	4603      	mov	r3, r0
 8006f04:	73fb      	strb	r3, [r7, #15]
      break;
 8006f06:	e008      	b.n	8006f1a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	799b      	ldrb	r3, [r3, #6]
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f001 f99f 	bl	8008252 <USBH_ClrFeature>
 8006f14:	4603      	mov	r3, r0
 8006f16:	73fb      	strb	r3, [r7, #15]
      break;
 8006f18:	bf00      	nop
  }
  return status;
 8006f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8006f36:	2301      	movs	r3, #1
 8006f38:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	791b      	ldrb	r3, [r3, #4]
 8006f3e:	4619      	mov	r1, r3
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f004 fe8e 	bl	800bc62 <USBH_LL_GetLastXferSize>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b0d      	cmp	r3, #13
 8006f4a:	d002      	beq.n	8006f52 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	73fb      	strb	r3, [r7, #15]
 8006f50:	e024      	b.n	8006f9c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f56:	4a14      	ldr	r2, [pc, #80]	; (8006fa8 <USBH_MSC_DecodeCSW+0x84>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d11d      	bne.n	8006f98 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d119      	bne.n	8006f9c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d102      	bne.n	8006f78 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8006f72:	2300      	movs	r3, #0
 8006f74:	73fb      	strb	r3, [r7, #15]
 8006f76:	e011      	b.n	8006f9c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d102      	bne.n	8006f88 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8006f82:	2301      	movs	r3, #1
 8006f84:	73fb      	strb	r3, [r7, #15]
 8006f86:	e009      	b.n	8006f9c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d104      	bne.n	8006f9c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8006f92:	2302      	movs	r3, #2
 8006f94:	73fb      	strb	r3, [r7, #15]
 8006f96:	e001      	b.n	8006f9c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8006f98:	2302      	movs	r3, #2
 8006f9a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8006f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	53425355 	.word	0x53425355

08006fac <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006fb8:	2302      	movs	r3, #2
 8006fba:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d002      	beq.n	8006fd6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d021      	beq.n	8007018 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006fd4:	e028      	b.n	8007028 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	220a      	movs	r2, #10
 8006fe8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	3363      	adds	r3, #99	; 0x63
 8006ff0:	2210      	movs	r2, #16
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f005 fa59 	bl	800c4ac <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	2202      	movs	r2, #2
 800700e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8007012:	2301      	movs	r3, #1
 8007014:	73fb      	strb	r3, [r7, #15]
      break;
 8007016:	e007      	b.n	8007028 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007018:	78fb      	ldrb	r3, [r7, #3]
 800701a:	4619      	mov	r1, r3
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7ff fd87 	bl	8006b30 <USBH_MSC_BOT_Process>
 8007022:	4603      	mov	r3, r0
 8007024:	73fb      	strb	r3, [r7, #15]
      break;
 8007026:	bf00      	nop
  }

  return error;
 8007028:	7bfb      	ldrb	r3, [r7, #15]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b086      	sub	sp, #24
 8007036:	af00      	add	r7, sp, #0
 8007038:	60f8      	str	r0, [r7, #12]
 800703a:	460b      	mov	r3, r1
 800703c:	607a      	str	r2, [r7, #4]
 800703e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8007040:	2301      	movs	r3, #1
 8007042:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800704a:	69db      	ldr	r3, [r3, #28]
 800704c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007054:	2b01      	cmp	r3, #1
 8007056:	d002      	beq.n	800705e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8007058:	2b02      	cmp	r3, #2
 800705a:	d027      	beq.n	80070ac <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800705c:	e05f      	b.n	800711e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	2208      	movs	r2, #8
 8007062:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	2280      	movs	r2, #128	; 0x80
 8007068:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	220a      	movs	r2, #10
 8007070:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	3363      	adds	r3, #99	; 0x63
 8007078:	2210      	movs	r2, #16
 800707a:	2100      	movs	r1, #0
 800707c:	4618      	mov	r0, r3
 800707e:	f005 fa15 	bl	800c4ac <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2225      	movs	r2, #37	; 0x25
 8007086:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	2202      	movs	r2, #2
 8007096:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	f103 0210 	add.w	r2, r3, #16
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80070a6:	2301      	movs	r3, #1
 80070a8:	75fb      	strb	r3, [r7, #23]
      break;
 80070aa:	e038      	b.n	800711e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80070ac:	7afb      	ldrb	r3, [r7, #11]
 80070ae:	4619      	mov	r1, r3
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f7ff fd3d 	bl	8006b30 <USBH_MSC_BOT_Process>
 80070b6:	4603      	mov	r3, r0
 80070b8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d12d      	bne.n	800711c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070c6:	3303      	adds	r3, #3
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070d2:	3302      	adds	r3, #2
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	021b      	lsls	r3, r3, #8
 80070d8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070e0:	3301      	adds	r3, #1
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80070e6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	061b      	lsls	r3, r3, #24
 80070f2:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070fe:	3307      	adds	r3, #7
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	b29a      	uxth	r2, r3
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800710a:	3306      	adds	r3, #6
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	b29b      	uxth	r3, r3
 8007110:	021b      	lsls	r3, r3, #8
 8007112:	b29b      	uxth	r3, r3
 8007114:	4313      	orrs	r3, r2
 8007116:	b29a      	uxth	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	809a      	strh	r2, [r3, #4]
      break;
 800711c:	bf00      	nop
  }

  return error;
 800711e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3718      	adds	r7, #24
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	460b      	mov	r3, r1
 8007132:	607a      	str	r2, [r7, #4]
 8007134:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8007136:	2302      	movs	r3, #2
 8007138:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800714a:	2b01      	cmp	r3, #1
 800714c:	d002      	beq.n	8007154 <USBH_MSC_SCSI_Inquiry+0x2c>
 800714e:	2b02      	cmp	r3, #2
 8007150:	d03d      	beq.n	80071ce <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8007152:	e089      	b.n	8007268 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	2224      	movs	r2, #36	; 0x24
 8007158:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	2280      	movs	r2, #128	; 0x80
 800715e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	220a      	movs	r2, #10
 8007166:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	3363      	adds	r3, #99	; 0x63
 800716e:	220a      	movs	r2, #10
 8007170:	2100      	movs	r1, #0
 8007172:	4618      	mov	r0, r3
 8007174:	f005 f99a 	bl	800c4ac <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	2212      	movs	r2, #18
 800717c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8007180:	7afb      	ldrb	r3, [r7, #11]
 8007182:	015b      	lsls	r3, r3, #5
 8007184:	b2da      	uxtb	r2, r3
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	2224      	movs	r2, #36	; 0x24
 80071a0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	2202      	movs	r2, #2
 80071b8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f103 0210 	add.w	r2, r3, #16
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80071c8:	2301      	movs	r3, #1
 80071ca:	75fb      	strb	r3, [r7, #23]
      break;
 80071cc:	e04c      	b.n	8007268 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80071ce:	7afb      	ldrb	r3, [r7, #11]
 80071d0:	4619      	mov	r1, r3
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f7ff fcac 	bl	8006b30 <USBH_MSC_BOT_Process>
 80071d8:	4603      	mov	r3, r0
 80071da:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d141      	bne.n	8007266 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80071e2:	2222      	movs	r2, #34	; 0x22
 80071e4:	2100      	movs	r1, #0
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f005 f960 	bl	800c4ac <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	f003 031f 	and.w	r3, r3, #31
 80071f8:	b2da      	uxtb	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	095b      	lsrs	r3, r3, #5
 8007208:	b2da      	uxtb	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007214:	3301      	adds	r3, #1
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	b25b      	sxtb	r3, r3
 800721a:	2b00      	cmp	r3, #0
 800721c:	da03      	bge.n	8007226 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	709a      	strb	r2, [r3, #2]
 8007224:	e002      	b.n	800722c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	1cd8      	adds	r0, r3, #3
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007236:	3308      	adds	r3, #8
 8007238:	2208      	movs	r2, #8
 800723a:	4619      	mov	r1, r3
 800723c:	f005 f928 	bl	800c490 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f103 000c 	add.w	r0, r3, #12
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800724c:	3310      	adds	r3, #16
 800724e:	2210      	movs	r2, #16
 8007250:	4619      	mov	r1, r3
 8007252:	f005 f91d 	bl	800c490 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	331d      	adds	r3, #29
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8007260:	3220      	adds	r2, #32
 8007262:	6812      	ldr	r2, [r2, #0]
 8007264:	601a      	str	r2, [r3, #0]
      break;
 8007266:	bf00      	nop
  }

  return error;
 8007268:	7dfb      	ldrb	r3, [r7, #23]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3718      	adds	r7, #24
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b086      	sub	sp, #24
 8007276:	af00      	add	r7, sp, #0
 8007278:	60f8      	str	r0, [r7, #12]
 800727a:	460b      	mov	r3, r1
 800727c:	607a      	str	r2, [r7, #4]
 800727e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007280:	2302      	movs	r3, #2
 8007282:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007294:	2b01      	cmp	r3, #1
 8007296:	d002      	beq.n	800729e <USBH_MSC_SCSI_RequestSense+0x2c>
 8007298:	2b02      	cmp	r3, #2
 800729a:	d03d      	beq.n	8007318 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800729c:	e05d      	b.n	800735a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	220e      	movs	r2, #14
 80072a2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	2280      	movs	r2, #128	; 0x80
 80072a8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	220a      	movs	r2, #10
 80072b0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	3363      	adds	r3, #99	; 0x63
 80072b8:	2210      	movs	r2, #16
 80072ba:	2100      	movs	r1, #0
 80072bc:	4618      	mov	r0, r3
 80072be:	f005 f8f5 	bl	800c4ac <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	2203      	movs	r2, #3
 80072c6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80072ca:	7afb      	ldrb	r3, [r7, #11]
 80072cc:	015b      	lsls	r3, r3, #5
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	220e      	movs	r2, #14
 80072ea:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	2202      	movs	r2, #2
 8007302:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	f103 0210 	add.w	r2, r3, #16
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007312:	2301      	movs	r3, #1
 8007314:	75fb      	strb	r3, [r7, #23]
      break;
 8007316:	e020      	b.n	800735a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007318:	7afb      	ldrb	r3, [r7, #11]
 800731a:	4619      	mov	r1, r3
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f7ff fc07 	bl	8006b30 <USBH_MSC_BOT_Process>
 8007322:	4603      	mov	r3, r0
 8007324:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007326:	7dfb      	ldrb	r3, [r7, #23]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d115      	bne.n	8007358 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007332:	3302      	adds	r3, #2
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	f003 030f 	and.w	r3, r3, #15
 800733a:	b2da      	uxtb	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007346:	7b1a      	ldrb	r2, [r3, #12]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007352:	7b5a      	ldrb	r2, [r3, #13]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	709a      	strb	r2, [r3, #2]
      break;
 8007358:	bf00      	nop
  }

  return error;
 800735a:	7dfb      	ldrb	r3, [r7, #23]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3718      	adds	r7, #24
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	607a      	str	r2, [r7, #4]
 800736e:	603b      	str	r3, [r7, #0]
 8007370:	460b      	mov	r3, r1
 8007372:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007374:	2302      	movs	r3, #2
 8007376:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007388:	2b01      	cmp	r3, #1
 800738a:	d002      	beq.n	8007392 <USBH_MSC_SCSI_Write+0x2e>
 800738c:	2b02      	cmp	r3, #2
 800738e:	d047      	beq.n	8007420 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007390:	e04e      	b.n	8007430 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8007398:	461a      	mov	r2, r3
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	fb03 f202 	mul.w	r2, r3, r2
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	220a      	movs	r2, #10
 80073b0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	3363      	adds	r3, #99	; 0x63
 80073b8:	2210      	movs	r2, #16
 80073ba:	2100      	movs	r1, #0
 80073bc:	4618      	mov	r0, r3
 80073be:	f005 f875 	bl	800c4ac <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	222a      	movs	r2, #42	; 0x2a
 80073c6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80073ca:	79fa      	ldrb	r2, [r7, #7]
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80073d2:	79ba      	ldrb	r2, [r7, #6]
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80073da:	797a      	ldrb	r2, [r7, #5]
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80073e2:	1d3b      	adds	r3, r7, #4
 80073e4:	781a      	ldrb	r2, [r3, #0]
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80073ec:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80073f6:	f107 0320 	add.w	r3, r7, #32
 80073fa:	781a      	ldrb	r2, [r3, #0]
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	2202      	movs	r2, #2
 800740e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	683a      	ldr	r2, [r7, #0]
 8007416:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800741a:	2301      	movs	r3, #1
 800741c:	75fb      	strb	r3, [r7, #23]
      break;
 800741e:	e007      	b.n	8007430 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007420:	7afb      	ldrb	r3, [r7, #11]
 8007422:	4619      	mov	r1, r3
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f7ff fb83 	bl	8006b30 <USBH_MSC_BOT_Process>
 800742a:	4603      	mov	r3, r0
 800742c:	75fb      	strb	r3, [r7, #23]
      break;
 800742e:	bf00      	nop
  }

  return error;
 8007430:	7dfb      	ldrb	r3, [r7, #23]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b086      	sub	sp, #24
 800743e:	af00      	add	r7, sp, #0
 8007440:	60f8      	str	r0, [r7, #12]
 8007442:	607a      	str	r2, [r7, #4]
 8007444:	603b      	str	r3, [r7, #0]
 8007446:	460b      	mov	r3, r1
 8007448:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800744a:	2302      	movs	r3, #2
 800744c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800745e:	2b01      	cmp	r3, #1
 8007460:	d002      	beq.n	8007468 <USBH_MSC_SCSI_Read+0x2e>
 8007462:	2b02      	cmp	r3, #2
 8007464:	d047      	beq.n	80074f6 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007466:	e04e      	b.n	8007506 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800746e:	461a      	mov	r2, r3
 8007470:	6a3b      	ldr	r3, [r7, #32]
 8007472:	fb03 f202 	mul.w	r2, r3, r2
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	2280      	movs	r2, #128	; 0x80
 800747e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	220a      	movs	r2, #10
 8007486:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	3363      	adds	r3, #99	; 0x63
 800748e:	2210      	movs	r2, #16
 8007490:	2100      	movs	r1, #0
 8007492:	4618      	mov	r0, r3
 8007494:	f005 f80a 	bl	800c4ac <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	2228      	movs	r2, #40	; 0x28
 800749c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80074a0:	79fa      	ldrb	r2, [r7, #7]
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80074a8:	79ba      	ldrb	r2, [r7, #6]
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80074b0:	797a      	ldrb	r2, [r7, #5]
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80074b8:	1d3b      	adds	r3, r7, #4
 80074ba:	781a      	ldrb	r2, [r3, #0]
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80074c2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80074cc:	f107 0320 	add.w	r3, r7, #32
 80074d0:	781a      	ldrb	r2, [r3, #0]
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	2202      	movs	r2, #2
 80074e4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80074f0:	2301      	movs	r3, #1
 80074f2:	75fb      	strb	r3, [r7, #23]
      break;
 80074f4:	e007      	b.n	8007506 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80074f6:	7afb      	ldrb	r3, [r7, #11]
 80074f8:	4619      	mov	r1, r3
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f7ff fb18 	bl	8006b30 <USBH_MSC_BOT_Process>
 8007500:	4603      	mov	r3, r0
 8007502:	75fb      	strb	r3, [r7, #23]
      break;
 8007504:	bf00      	nop
  }

  return error;
 8007506:	7dfb      	ldrb	r3, [r7, #23]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3718      	adds	r7, #24
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	4613      	mov	r3, r2
 800751c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007524:	2302      	movs	r3, #2
 8007526:	e029      	b.n	800757c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	79fa      	ldrb	r2, [r7, #7]
 800752c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 f81f 	bl	8007584 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f004 faa5 	bl	800bac4 <USBH_LL_Init>

  return USBH_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800758c:	2300      	movs	r3, #0
 800758e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007590:	2300      	movs	r3, #0
 8007592:	60fb      	str	r3, [r7, #12]
 8007594:	e009      	b.n	80075aa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	33e0      	adds	r3, #224	; 0xe0
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	2200      	movs	r2, #0
 80075a2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	3301      	adds	r3, #1
 80075a8:	60fb      	str	r3, [r7, #12]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2b0f      	cmp	r3, #15
 80075ae:	d9f2      	bls.n	8007596 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80075b0:	2300      	movs	r3, #0
 80075b2:	60fb      	str	r3, [r7, #12]
 80075b4:	e009      	b.n	80075ca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80075c0:	2200      	movs	r2, #0
 80075c2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	3301      	adds	r3, #1
 80075c8:	60fb      	str	r3, [r7, #12]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075d0:	d3f1      	bcc.n	80075b6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2240      	movs	r2, #64	; 0x40
 80075f6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007636:	2300      	movs	r3, #0
 8007638:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d016      	beq.n	800766e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10e      	bne.n	8007668 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007650:	1c59      	adds	r1, r3, #1
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	33de      	adds	r3, #222	; 0xde
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007662:	2300      	movs	r3, #0
 8007664:	73fb      	strb	r3, [r7, #15]
 8007666:	e004      	b.n	8007672 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007668:	2302      	movs	r3, #2
 800766a:	73fb      	strb	r3, [r7, #15]
 800766c:	e001      	b.n	8007672 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800766e:	2302      	movs	r3, #2
 8007670:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007672:	7bfb      	ldrb	r3, [r7, #15]
}
 8007674:	4618      	mov	r0, r3
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	460b      	mov	r3, r1
 800768a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800768c:	2300      	movs	r3, #0
 800768e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007696:	78fa      	ldrb	r2, [r7, #3]
 8007698:	429a      	cmp	r2, r3
 800769a:	d204      	bcs.n	80076a6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	78fa      	ldrb	r2, [r7, #3]
 80076a0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80076a4:	e001      	b.n	80076aa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80076a6:	2302      	movs	r3, #2
 80076a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80076aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b087      	sub	sp, #28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	4608      	mov	r0, r1
 80076c2:	4611      	mov	r1, r2
 80076c4:	461a      	mov	r2, r3
 80076c6:	4603      	mov	r3, r0
 80076c8:	70fb      	strb	r3, [r7, #3]
 80076ca:	460b      	mov	r3, r1
 80076cc:	70bb      	strb	r3, [r7, #2]
 80076ce:	4613      	mov	r3, r2
 80076d0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80076d2:	2300      	movs	r3, #0
 80076d4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80076d6:	2300      	movs	r3, #0
 80076d8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80076e0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80076e2:	e025      	b.n	8007730 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80076e4:	7dfb      	ldrb	r3, [r7, #23]
 80076e6:	221a      	movs	r2, #26
 80076e8:	fb02 f303 	mul.w	r3, r2, r3
 80076ec:	3308      	adds	r3, #8
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	4413      	add	r3, r2
 80076f2:	3302      	adds	r3, #2
 80076f4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	795b      	ldrb	r3, [r3, #5]
 80076fa:	78fa      	ldrb	r2, [r7, #3]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d002      	beq.n	8007706 <USBH_FindInterface+0x4e>
 8007700:	78fb      	ldrb	r3, [r7, #3]
 8007702:	2bff      	cmp	r3, #255	; 0xff
 8007704:	d111      	bne.n	800772a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800770a:	78ba      	ldrb	r2, [r7, #2]
 800770c:	429a      	cmp	r2, r3
 800770e:	d002      	beq.n	8007716 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007710:	78bb      	ldrb	r3, [r7, #2]
 8007712:	2bff      	cmp	r3, #255	; 0xff
 8007714:	d109      	bne.n	800772a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800771a:	787a      	ldrb	r2, [r7, #1]
 800771c:	429a      	cmp	r2, r3
 800771e:	d002      	beq.n	8007726 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007720:	787b      	ldrb	r3, [r7, #1]
 8007722:	2bff      	cmp	r3, #255	; 0xff
 8007724:	d101      	bne.n	800772a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007726:	7dfb      	ldrb	r3, [r7, #23]
 8007728:	e006      	b.n	8007738 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800772a:	7dfb      	ldrb	r3, [r7, #23]
 800772c:	3301      	adds	r3, #1
 800772e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d9d6      	bls.n	80076e4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007736:	23ff      	movs	r3, #255	; 0xff
}
 8007738:	4618      	mov	r0, r3
 800773a:	371c      	adds	r7, #28
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f004 fa10 	bl	800bb72 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007752:	2101      	movs	r1, #1
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f004 fb29 	bl	800bdac <USBH_LL_DriverVBUS>

  return USBH_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b088      	sub	sp, #32
 8007768:	af04      	add	r7, sp, #16
 800776a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800776c:	2302      	movs	r3, #2
 800776e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b01      	cmp	r3, #1
 800777e:	d102      	bne.n	8007786 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2203      	movs	r2, #3
 8007784:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b0b      	cmp	r3, #11
 800778e:	f200 81be 	bhi.w	8007b0e <USBH_Process+0x3aa>
 8007792:	a201      	add	r2, pc, #4	; (adr r2, 8007798 <USBH_Process+0x34>)
 8007794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007798:	080077c9 	.word	0x080077c9
 800779c:	080077fb 	.word	0x080077fb
 80077a0:	08007863 	.word	0x08007863
 80077a4:	08007aa9 	.word	0x08007aa9
 80077a8:	08007b0f 	.word	0x08007b0f
 80077ac:	08007907 	.word	0x08007907
 80077b0:	08007a4f 	.word	0x08007a4f
 80077b4:	0800793d 	.word	0x0800793d
 80077b8:	0800795d 	.word	0x0800795d
 80077bc:	0800797d 	.word	0x0800797d
 80077c0:	080079c1 	.word	0x080079c1
 80077c4:	08007a91 	.word	0x08007a91
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 819e 	beq.w	8007b12 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80077dc:	20c8      	movs	r0, #200	; 0xc8
 80077de:	f004 fb5c 	bl	800be9a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f004 fa22 	bl	800bc2c <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80077f8:	e18b      	b.n	8007b12 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007800:	2b01      	cmp	r3, #1
 8007802:	d107      	bne.n	8007814 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2202      	movs	r2, #2
 8007810:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007812:	e18d      	b.n	8007b30 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800781a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800781e:	d914      	bls.n	800784a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007826:	3301      	adds	r3, #1
 8007828:	b2da      	uxtb	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007836:	2b03      	cmp	r3, #3
 8007838:	d903      	bls.n	8007842 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	220d      	movs	r2, #13
 800783e:	701a      	strb	r2, [r3, #0]
      break;
 8007840:	e176      	b.n	8007b30 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	701a      	strb	r2, [r3, #0]
      break;
 8007848:	e172      	b.n	8007b30 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007850:	f103 020a 	add.w	r2, r3, #10
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800785a:	200a      	movs	r0, #10
 800785c:	f004 fb1d 	bl	800be9a <USBH_Delay>
      break;
 8007860:	e166      	b.n	8007b30 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007868:	2b00      	cmp	r3, #0
 800786a:	d005      	beq.n	8007878 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007872:	2104      	movs	r1, #4
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007878:	2064      	movs	r0, #100	; 0x64
 800787a:	f004 fb0e 	bl	800be9a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f004 f9ad 	bl	800bbde <USBH_LL_GetSpeed>
 8007884:	4603      	mov	r3, r0
 8007886:	461a      	mov	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2205      	movs	r2, #5
 8007892:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007894:	2100      	movs	r1, #0
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f001 fa29 	bl	8008cee <USBH_AllocPipe>
 800789c:	4603      	mov	r3, r0
 800789e:	461a      	mov	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80078a4:	2180      	movs	r1, #128	; 0x80
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f001 fa21 	bl	8008cee <USBH_AllocPipe>
 80078ac:	4603      	mov	r3, r0
 80078ae:	461a      	mov	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	7919      	ldrb	r1, [r3, #4]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80078c8:	b292      	uxth	r2, r2
 80078ca:	9202      	str	r2, [sp, #8]
 80078cc:	2200      	movs	r2, #0
 80078ce:	9201      	str	r2, [sp, #4]
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	4603      	mov	r3, r0
 80078d4:	2280      	movs	r2, #128	; 0x80
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f001 f9da 	bl	8008c90 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	7959      	ldrb	r1, [r3, #5]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80078f0:	b292      	uxth	r2, r2
 80078f2:	9202      	str	r2, [sp, #8]
 80078f4:	2200      	movs	r2, #0
 80078f6:	9201      	str	r2, [sp, #4]
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	4603      	mov	r3, r0
 80078fc:	2200      	movs	r2, #0
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f001 f9c6 	bl	8008c90 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007904:	e114      	b.n	8007b30 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f918 	bl	8007b3c <USBH_HandleEnum>
 800790c:	4603      	mov	r3, r0
 800790e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007910:	7bbb      	ldrb	r3, [r7, #14]
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b00      	cmp	r3, #0
 8007916:	f040 80fe 	bne.w	8007b16 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007928:	2b01      	cmp	r3, #1
 800792a:	d103      	bne.n	8007934 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2208      	movs	r2, #8
 8007930:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007932:	e0f0      	b.n	8007b16 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2207      	movs	r2, #7
 8007938:	701a      	strb	r2, [r3, #0]
      break;
 800793a:	e0ec      	b.n	8007b16 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 80e9 	beq.w	8007b1a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800794e:	2101      	movs	r1, #1
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2208      	movs	r2, #8
 8007958:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800795a:	e0de      	b.n	8007b1a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007962:	b29b      	uxth	r3, r3
 8007964:	4619      	mov	r1, r3
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fc2c 	bl	80081c4 <USBH_SetCfg>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	f040 80d5 	bne.w	8007b1e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2209      	movs	r2, #9
 8007978:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800797a:	e0d0      	b.n	8007b1e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007982:	f003 0320 	and.w	r3, r3, #32
 8007986:	2b00      	cmp	r3, #0
 8007988:	d016      	beq.n	80079b8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800798a:	2101      	movs	r1, #1
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fc3c 	bl	800820a <USBH_SetFeature>
 8007992:	4603      	mov	r3, r0
 8007994:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007996:	7bbb      	ldrb	r3, [r7, #14]
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b00      	cmp	r3, #0
 800799c:	d103      	bne.n	80079a6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	220a      	movs	r2, #10
 80079a2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80079a4:	e0bd      	b.n	8007b22 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b03      	cmp	r3, #3
 80079ac:	f040 80b9 	bne.w	8007b22 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	220a      	movs	r2, #10
 80079b4:	701a      	strb	r2, [r3, #0]
      break;
 80079b6:	e0b4      	b.n	8007b22 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	220a      	movs	r2, #10
 80079bc:	701a      	strb	r2, [r3, #0]
      break;
 80079be:	e0b0      	b.n	8007b22 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f000 80ad 	beq.w	8007b26 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80079d4:	2300      	movs	r3, #0
 80079d6:	73fb      	strb	r3, [r7, #15]
 80079d8:	e016      	b.n	8007a08 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80079da:	7bfa      	ldrb	r2, [r7, #15]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	32de      	adds	r2, #222	; 0xde
 80079e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e4:	791a      	ldrb	r2, [r3, #4]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d108      	bne.n	8007a02 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80079f0:	7bfa      	ldrb	r2, [r7, #15]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	32de      	adds	r2, #222	; 0xde
 80079f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007a00:	e005      	b.n	8007a0e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
 8007a04:	3301      	adds	r3, #1
 8007a06:	73fb      	strb	r3, [r7, #15]
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d0e5      	beq.n	80079da <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d016      	beq.n	8007a46 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	4798      	blx	r3
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d109      	bne.n	8007a3e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2206      	movs	r2, #6
 8007a2e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a36:	2103      	movs	r1, #3
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a3c:	e073      	b.n	8007b26 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	220d      	movs	r2, #13
 8007a42:	701a      	strb	r2, [r3, #0]
      break;
 8007a44:	e06f      	b.n	8007b26 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	220d      	movs	r2, #13
 8007a4a:	701a      	strb	r2, [r3, #0]
      break;
 8007a4c:	e06b      	b.n	8007b26 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d017      	beq.n	8007a88 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	4798      	blx	r3
 8007a64:	4603      	mov	r3, r0
 8007a66:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007a68:	7bbb      	ldrb	r3, [r7, #14]
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d103      	bne.n	8007a78 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	220b      	movs	r2, #11
 8007a74:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a76:	e058      	b.n	8007b2a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007a78:	7bbb      	ldrb	r3, [r7, #14]
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d154      	bne.n	8007b2a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	220d      	movs	r2, #13
 8007a84:	701a      	strb	r2, [r3, #0]
      break;
 8007a86:	e050      	b.n	8007b2a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	220d      	movs	r2, #13
 8007a8c:	701a      	strb	r2, [r3, #0]
      break;
 8007a8e:	e04c      	b.n	8007b2a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d049      	beq.n	8007b2e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007aa0:	695b      	ldr	r3, [r3, #20]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	4798      	blx	r3
      }
      break;
 8007aa6:	e042      	b.n	8007b2e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7ff fd67 	bl	8007584 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d009      	beq.n	8007ad4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d005      	beq.n	8007aea <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ae4:	2105      	movs	r1, #5
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d107      	bne.n	8007b06 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7ff fe20 	bl	8007744 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007b04:	e014      	b.n	8007b30 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f004 f833 	bl	800bb72 <USBH_LL_Start>
      break;
 8007b0c:	e010      	b.n	8007b30 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007b0e:	bf00      	nop
 8007b10:	e00e      	b.n	8007b30 <USBH_Process+0x3cc>
      break;
 8007b12:	bf00      	nop
 8007b14:	e00c      	b.n	8007b30 <USBH_Process+0x3cc>
      break;
 8007b16:	bf00      	nop
 8007b18:	e00a      	b.n	8007b30 <USBH_Process+0x3cc>
    break;
 8007b1a:	bf00      	nop
 8007b1c:	e008      	b.n	8007b30 <USBH_Process+0x3cc>
      break;
 8007b1e:	bf00      	nop
 8007b20:	e006      	b.n	8007b30 <USBH_Process+0x3cc>
      break;
 8007b22:	bf00      	nop
 8007b24:	e004      	b.n	8007b30 <USBH_Process+0x3cc>
      break;
 8007b26:	bf00      	nop
 8007b28:	e002      	b.n	8007b30 <USBH_Process+0x3cc>
      break;
 8007b2a:	bf00      	nop
 8007b2c:	e000      	b.n	8007b30 <USBH_Process+0x3cc>
      break;
 8007b2e:	bf00      	nop
  }
  return USBH_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop

08007b3c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b088      	sub	sp, #32
 8007b40:	af04      	add	r7, sp, #16
 8007b42:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007b44:	2301      	movs	r3, #1
 8007b46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	785b      	ldrb	r3, [r3, #1]
 8007b50:	2b07      	cmp	r3, #7
 8007b52:	f200 81c1 	bhi.w	8007ed8 <USBH_HandleEnum+0x39c>
 8007b56:	a201      	add	r2, pc, #4	; (adr r2, 8007b5c <USBH_HandleEnum+0x20>)
 8007b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5c:	08007b7d 	.word	0x08007b7d
 8007b60:	08007c3b 	.word	0x08007c3b
 8007b64:	08007ca5 	.word	0x08007ca5
 8007b68:	08007d33 	.word	0x08007d33
 8007b6c:	08007d9d 	.word	0x08007d9d
 8007b70:	08007e0d 	.word	0x08007e0d
 8007b74:	08007e53 	.word	0x08007e53
 8007b78:	08007e99 	.word	0x08007e99
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007b7c:	2108      	movs	r1, #8
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fa50 	bl	8008024 <USBH_Get_DevDesc>
 8007b84:	4603      	mov	r3, r0
 8007b86:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b88:	7bbb      	ldrb	r3, [r7, #14]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d130      	bne.n	8007bf0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	7919      	ldrb	r1, [r3, #4]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007bb2:	b292      	uxth	r2, r2
 8007bb4:	9202      	str	r2, [sp, #8]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	9201      	str	r2, [sp, #4]
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2280      	movs	r2, #128	; 0x80
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f001 f865 	bl	8008c90 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	7959      	ldrb	r1, [r3, #5]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007bda:	b292      	uxth	r2, r2
 8007bdc:	9202      	str	r2, [sp, #8]
 8007bde:	2200      	movs	r2, #0
 8007be0:	9201      	str	r2, [sp, #4]
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	4603      	mov	r3, r0
 8007be6:	2200      	movs	r2, #0
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f001 f851 	bl	8008c90 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007bee:	e175      	b.n	8007edc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bf0:	7bbb      	ldrb	r3, [r7, #14]
 8007bf2:	2b03      	cmp	r3, #3
 8007bf4:	f040 8172 	bne.w	8007edc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bfe:	3301      	adds	r3, #1
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c0e:	2b03      	cmp	r3, #3
 8007c10:	d903      	bls.n	8007c1a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	220d      	movs	r2, #13
 8007c16:	701a      	strb	r2, [r3, #0]
      break;
 8007c18:	e160      	b.n	8007edc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	795b      	ldrb	r3, [r3, #5]
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f001 f885 	bl	8008d30 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	791b      	ldrb	r3, [r3, #4]
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f001 f87f 	bl	8008d30 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	701a      	strb	r2, [r3, #0]
      break;
 8007c38:	e150      	b.n	8007edc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007c3a:	2112      	movs	r1, #18
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f9f1 	bl	8008024 <USBH_Get_DevDesc>
 8007c42:	4603      	mov	r3, r0
 8007c44:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c46:	7bbb      	ldrb	r3, [r7, #14]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d103      	bne.n	8007c54 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c52:	e145      	b.n	8007ee0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c54:	7bbb      	ldrb	r3, [r7, #14]
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	f040 8142 	bne.w	8007ee0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c62:	3301      	adds	r3, #1
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	d903      	bls.n	8007c7e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	220d      	movs	r2, #13
 8007c7a:	701a      	strb	r2, [r3, #0]
      break;
 8007c7c:	e130      	b.n	8007ee0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	795b      	ldrb	r3, [r3, #5]
 8007c82:	4619      	mov	r1, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f001 f853 	bl	8008d30 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	791b      	ldrb	r3, [r3, #4]
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f001 f84d 	bl	8008d30 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	701a      	strb	r2, [r3, #0]
      break;
 8007ca2:	e11d      	b.n	8007ee0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fa68 	bl	800817c <USBH_SetAddress>
 8007cac:	4603      	mov	r3, r0
 8007cae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007cb0:	7bbb      	ldrb	r3, [r7, #14]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d132      	bne.n	8007d1c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007cb6:	2002      	movs	r0, #2
 8007cb8:	f004 f8ef 	bl	800be9a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2203      	movs	r2, #3
 8007cc8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	7919      	ldrb	r1, [r3, #4]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007cde:	b292      	uxth	r2, r2
 8007ce0:	9202      	str	r2, [sp, #8]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	9201      	str	r2, [sp, #4]
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2280      	movs	r2, #128	; 0x80
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 ffcf 	bl	8008c90 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	7959      	ldrb	r1, [r3, #5]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d06:	b292      	uxth	r2, r2
 8007d08:	9202      	str	r2, [sp, #8]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	9201      	str	r2, [sp, #4]
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	4603      	mov	r3, r0
 8007d12:	2200      	movs	r2, #0
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 ffbb 	bl	8008c90 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007d1a:	e0e3      	b.n	8007ee4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d1c:	7bbb      	ldrb	r3, [r7, #14]
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	f040 80e0 	bne.w	8007ee4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	220d      	movs	r2, #13
 8007d28:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	705a      	strb	r2, [r3, #1]
      break;
 8007d30:	e0d8      	b.n	8007ee4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007d32:	2109      	movs	r1, #9
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f99d 	bl	8008074 <USBH_Get_CfgDesc>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d3e:	7bbb      	ldrb	r3, [r7, #14]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d103      	bne.n	8007d4c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2204      	movs	r2, #4
 8007d48:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007d4a:	e0cd      	b.n	8007ee8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d4c:	7bbb      	ldrb	r3, [r7, #14]
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	f040 80ca 	bne.w	8007ee8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	b2da      	uxtb	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	d903      	bls.n	8007d76 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	220d      	movs	r2, #13
 8007d72:	701a      	strb	r2, [r3, #0]
      break;
 8007d74:	e0b8      	b.n	8007ee8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	795b      	ldrb	r3, [r3, #5]
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 ffd7 	bl	8008d30 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	791b      	ldrb	r3, [r3, #4]
 8007d86:	4619      	mov	r1, r3
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 ffd1 	bl	8008d30 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	701a      	strb	r2, [r3, #0]
      break;
 8007d9a:	e0a5      	b.n	8007ee8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007da2:	4619      	mov	r1, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f965 	bl	8008074 <USBH_Get_CfgDesc>
 8007daa:	4603      	mov	r3, r0
 8007dac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007dae:	7bbb      	ldrb	r3, [r7, #14]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d103      	bne.n	8007dbc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2205      	movs	r2, #5
 8007db8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007dba:	e097      	b.n	8007eec <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dbc:	7bbb      	ldrb	r3, [r7, #14]
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	f040 8094 	bne.w	8007eec <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007dca:	3301      	adds	r3, #1
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007dda:	2b03      	cmp	r3, #3
 8007ddc:	d903      	bls.n	8007de6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	220d      	movs	r2, #13
 8007de2:	701a      	strb	r2, [r3, #0]
      break;
 8007de4:	e082      	b.n	8007eec <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	795b      	ldrb	r3, [r3, #5]
 8007dea:	4619      	mov	r1, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 ff9f 	bl	8008d30 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	791b      	ldrb	r3, [r3, #4]
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 ff99 	bl	8008d30 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	701a      	strb	r2, [r3, #0]
      break;
 8007e0a:	e06f      	b.n	8007eec <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d019      	beq.n	8007e4a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007e22:	23ff      	movs	r3, #255	; 0xff
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f949 	bl	80080bc <USBH_Get_StringDesc>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007e2e:	7bbb      	ldrb	r3, [r7, #14]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d103      	bne.n	8007e3c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2206      	movs	r2, #6
 8007e38:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007e3a:	e059      	b.n	8007ef0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d156      	bne.n	8007ef0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2206      	movs	r2, #6
 8007e46:	705a      	strb	r2, [r3, #1]
      break;
 8007e48:	e052      	b.n	8007ef0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2206      	movs	r2, #6
 8007e4e:	705a      	strb	r2, [r3, #1]
      break;
 8007e50:	e04e      	b.n	8007ef0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d019      	beq.n	8007e90 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007e68:	23ff      	movs	r3, #255	; 0xff
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f926 	bl	80080bc <USBH_Get_StringDesc>
 8007e70:	4603      	mov	r3, r0
 8007e72:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007e74:	7bbb      	ldrb	r3, [r7, #14]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d103      	bne.n	8007e82 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2207      	movs	r2, #7
 8007e7e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007e80:	e038      	b.n	8007ef4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e82:	7bbb      	ldrb	r3, [r7, #14]
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d135      	bne.n	8007ef4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2207      	movs	r2, #7
 8007e8c:	705a      	strb	r2, [r3, #1]
      break;
 8007e8e:	e031      	b.n	8007ef4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2207      	movs	r2, #7
 8007e94:	705a      	strb	r2, [r3, #1]
      break;
 8007e96:	e02d      	b.n	8007ef4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d017      	beq.n	8007ed2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007eae:	23ff      	movs	r3, #255	; 0xff
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f903 	bl	80080bc <USBH_Get_StringDesc>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007eba:	7bbb      	ldrb	r3, [r7, #14]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d102      	bne.n	8007ec6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007ec4:	e018      	b.n	8007ef8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ec6:	7bbb      	ldrb	r3, [r7, #14]
 8007ec8:	2b03      	cmp	r3, #3
 8007eca:	d115      	bne.n	8007ef8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	73fb      	strb	r3, [r7, #15]
      break;
 8007ed0:	e012      	b.n	8007ef8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ed6:	e00f      	b.n	8007ef8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007ed8:	bf00      	nop
 8007eda:	e00e      	b.n	8007efa <USBH_HandleEnum+0x3be>
      break;
 8007edc:	bf00      	nop
 8007ede:	e00c      	b.n	8007efa <USBH_HandleEnum+0x3be>
      break;
 8007ee0:	bf00      	nop
 8007ee2:	e00a      	b.n	8007efa <USBH_HandleEnum+0x3be>
      break;
 8007ee4:	bf00      	nop
 8007ee6:	e008      	b.n	8007efa <USBH_HandleEnum+0x3be>
      break;
 8007ee8:	bf00      	nop
 8007eea:	e006      	b.n	8007efa <USBH_HandleEnum+0x3be>
      break;
 8007eec:	bf00      	nop
 8007eee:	e004      	b.n	8007efa <USBH_HandleEnum+0x3be>
      break;
 8007ef0:	bf00      	nop
 8007ef2:	e002      	b.n	8007efa <USBH_HandleEnum+0x3be>
      break;
 8007ef4:	bf00      	nop
 8007ef6:	e000      	b.n	8007efa <USBH_HandleEnum+0x3be>
      break;
 8007ef8:	bf00      	nop
  }
  return Status;
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	683a      	ldr	r2, [r7, #0]
 8007f12:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007f16:	bf00      	nop
 8007f18:	370c      	adds	r7, #12
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b082      	sub	sp, #8
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f30:	1c5a      	adds	r2, r3, #1
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f804 	bl	8007f46 <USBH_HandleSof>
}
 8007f3e:	bf00      	nop
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b082      	sub	sp, #8
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	2b0b      	cmp	r3, #11
 8007f56:	d10a      	bne.n	8007f6e <USBH_HandleSof+0x28>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d005      	beq.n	8007f6e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f68:	699b      	ldr	r3, [r3, #24]
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	4798      	blx	r3
  }
}
 8007f6e:	bf00      	nop
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007f76:	b480      	push	{r7}
 8007f78:	b083      	sub	sp, #12
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007f86:	bf00      	nop
}
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b083      	sub	sp, #12
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007fa2:	bf00      	nop
}
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b083      	sub	sp, #12
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f003 fdd3 	bl	800bba8 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	791b      	ldrb	r3, [r3, #4]
 8008006:	4619      	mov	r1, r3
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fe91 	bl	8008d30 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	795b      	ldrb	r3, [r3, #5]
 8008012:	4619      	mov	r1, r3
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fe8b 	bl	8008d30 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b086      	sub	sp, #24
 8008028:	af02      	add	r7, sp, #8
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	460b      	mov	r3, r1
 800802e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008036:	78fb      	ldrb	r3, [r7, #3]
 8008038:	b29b      	uxth	r3, r3
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	4613      	mov	r3, r2
 800803e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008042:	2100      	movs	r1, #0
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f864 	bl	8008112 <USBH_GetDescriptor>
 800804a:	4603      	mov	r3, r0
 800804c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800804e:	7bfb      	ldrb	r3, [r7, #15]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10a      	bne.n	800806a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f203 3026 	addw	r0, r3, #806	; 0x326
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008060:	78fa      	ldrb	r2, [r7, #3]
 8008062:	b292      	uxth	r2, r2
 8008064:	4619      	mov	r1, r3
 8008066:	f000 f918 	bl	800829a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800806a:	7bfb      	ldrb	r3, [r7, #15]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af02      	add	r7, sp, #8
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	460b      	mov	r3, r1
 800807e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	331c      	adds	r3, #28
 8008084:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008086:	887b      	ldrh	r3, [r7, #2]
 8008088:	9300      	str	r3, [sp, #0]
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008090:	2100      	movs	r1, #0
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f83d 	bl	8008112 <USBH_GetDescriptor>
 8008098:	4603      	mov	r3, r0
 800809a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800809c:	7bfb      	ldrb	r3, [r7, #15]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d107      	bne.n	80080b2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80080a2:	887b      	ldrh	r3, [r7, #2]
 80080a4:	461a      	mov	r2, r3
 80080a6:	68b9      	ldr	r1, [r7, #8]
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f987 	bl	80083bc <USBH_ParseCfgDesc>
 80080ae:	4603      	mov	r3, r0
 80080b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b088      	sub	sp, #32
 80080c0:	af02      	add	r7, sp, #8
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	607a      	str	r2, [r7, #4]
 80080c6:	461a      	mov	r2, r3
 80080c8:	460b      	mov	r3, r1
 80080ca:	72fb      	strb	r3, [r7, #11]
 80080cc:	4613      	mov	r3, r2
 80080ce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80080d0:	7afb      	ldrb	r3, [r7, #11]
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80080d8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80080e0:	893b      	ldrh	r3, [r7, #8]
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	460b      	mov	r3, r1
 80080e6:	2100      	movs	r1, #0
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f000 f812 	bl	8008112 <USBH_GetDescriptor>
 80080ee:	4603      	mov	r3, r0
 80080f0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80080f2:	7dfb      	ldrb	r3, [r7, #23]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d107      	bne.n	8008108 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80080fe:	893a      	ldrh	r2, [r7, #8]
 8008100:	6879      	ldr	r1, [r7, #4]
 8008102:	4618      	mov	r0, r3
 8008104:	f000 fb24 	bl	8008750 <USBH_ParseStringDesc>
  }

  return status;
 8008108:	7dfb      	ldrb	r3, [r7, #23]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3718      	adds	r7, #24
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b084      	sub	sp, #16
 8008116:	af00      	add	r7, sp, #0
 8008118:	60f8      	str	r0, [r7, #12]
 800811a:	607b      	str	r3, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	72fb      	strb	r3, [r7, #11]
 8008120:	4613      	mov	r3, r2
 8008122:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	789b      	ldrb	r3, [r3, #2]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d11c      	bne.n	8008166 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800812c:	7afb      	ldrb	r3, [r7, #11]
 800812e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008132:	b2da      	uxtb	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2206      	movs	r2, #6
 800813c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	893a      	ldrh	r2, [r7, #8]
 8008142:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008144:	893b      	ldrh	r3, [r7, #8]
 8008146:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800814a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800814e:	d104      	bne.n	800815a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f240 4209 	movw	r2, #1033	; 0x409
 8008156:	829a      	strh	r2, [r3, #20]
 8008158:	e002      	b.n	8008160 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	8b3a      	ldrh	r2, [r7, #24]
 8008164:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008166:	8b3b      	ldrh	r3, [r7, #24]
 8008168:	461a      	mov	r2, r3
 800816a:	6879      	ldr	r1, [r7, #4]
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f000 fb3d 	bl	80087ec <USBH_CtlReq>
 8008172:	4603      	mov	r3, r0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	460b      	mov	r3, r1
 8008186:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	789b      	ldrb	r3, [r3, #2]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d10f      	bne.n	80081b0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2205      	movs	r2, #5
 800819a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800819c:	78fb      	ldrb	r3, [r7, #3]
 800819e:	b29a      	uxth	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80081b0:	2200      	movs	r2, #0
 80081b2:	2100      	movs	r1, #0
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fb19 	bl	80087ec <USBH_CtlReq>
 80081ba:	4603      	mov	r3, r0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	460b      	mov	r3, r1
 80081ce:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	789b      	ldrb	r3, [r3, #2]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d10e      	bne.n	80081f6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2209      	movs	r2, #9
 80081e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	887a      	ldrh	r2, [r7, #2]
 80081e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80081f6:	2200      	movs	r2, #0
 80081f8:	2100      	movs	r1, #0
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 faf6 	bl	80087ec <USBH_CtlReq>
 8008200:	4603      	mov	r3, r0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b082      	sub	sp, #8
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	460b      	mov	r3, r1
 8008214:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	789b      	ldrb	r3, [r3, #2]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d10f      	bne.n	800823e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2203      	movs	r2, #3
 8008228:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800822a:	78fb      	ldrb	r3, [r7, #3]
 800822c:	b29a      	uxth	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800823e:	2200      	movs	r2, #0
 8008240:	2100      	movs	r1, #0
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fad2 	bl	80087ec <USBH_CtlReq>
 8008248:	4603      	mov	r3, r0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3708      	adds	r7, #8
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b082      	sub	sp, #8
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	460b      	mov	r3, r1
 800825c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	789b      	ldrb	r3, [r3, #2]
 8008262:	2b01      	cmp	r3, #1
 8008264:	d10f      	bne.n	8008286 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2202      	movs	r2, #2
 800826a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008278:	78fb      	ldrb	r3, [r7, #3]
 800827a:	b29a      	uxth	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008286:	2200      	movs	r2, #0
 8008288:	2100      	movs	r1, #0
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 faae 	bl	80087ec <USBH_CtlReq>
 8008290:	4603      	mov	r3, r0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3708      	adds	r7, #8
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800829a:	b480      	push	{r7}
 800829c:	b085      	sub	sp, #20
 800829e:	af00      	add	r7, sp, #0
 80082a0:	60f8      	str	r0, [r7, #12]
 80082a2:	60b9      	str	r1, [r7, #8]
 80082a4:	4613      	mov	r3, r2
 80082a6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	781a      	ldrb	r2, [r3, #0]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	785a      	ldrb	r2, [r3, #1]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	3302      	adds	r3, #2
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	b29a      	uxth	r2, r3
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	3303      	adds	r3, #3
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	021b      	lsls	r3, r3, #8
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	4313      	orrs	r3, r2
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	791a      	ldrb	r2, [r3, #4]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	795a      	ldrb	r2, [r3, #5]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	799a      	ldrb	r2, [r3, #6]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	79da      	ldrb	r2, [r3, #7]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	79db      	ldrb	r3, [r3, #7]
 80082f8:	2b20      	cmp	r3, #32
 80082fa:	dc11      	bgt.n	8008320 <USBH_ParseDevDesc+0x86>
 80082fc:	2b08      	cmp	r3, #8
 80082fe:	db16      	blt.n	800832e <USBH_ParseDevDesc+0x94>
 8008300:	3b08      	subs	r3, #8
 8008302:	2201      	movs	r2, #1
 8008304:	fa02 f303 	lsl.w	r3, r2, r3
 8008308:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800830c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008310:	2b00      	cmp	r3, #0
 8008312:	bf14      	ite	ne
 8008314:	2301      	movne	r3, #1
 8008316:	2300      	moveq	r3, #0
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d102      	bne.n	8008324 <USBH_ParseDevDesc+0x8a>
 800831e:	e006      	b.n	800832e <USBH_ParseDevDesc+0x94>
 8008320:	2b40      	cmp	r3, #64	; 0x40
 8008322:	d104      	bne.n	800832e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	79da      	ldrb	r2, [r3, #7]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	71da      	strb	r2, [r3, #7]
      break;
 800832c:	e003      	b.n	8008336 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2240      	movs	r2, #64	; 0x40
 8008332:	71da      	strb	r2, [r3, #7]
      break;
 8008334:	bf00      	nop
  }

  if (length > 8U)
 8008336:	88fb      	ldrh	r3, [r7, #6]
 8008338:	2b08      	cmp	r3, #8
 800833a:	d939      	bls.n	80083b0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	3308      	adds	r3, #8
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	b29a      	uxth	r2, r3
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	3309      	adds	r3, #9
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	b29b      	uxth	r3, r3
 800834c:	021b      	lsls	r3, r3, #8
 800834e:	b29b      	uxth	r3, r3
 8008350:	4313      	orrs	r3, r2
 8008352:	b29a      	uxth	r2, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	330a      	adds	r3, #10
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	b29a      	uxth	r2, r3
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	330b      	adds	r3, #11
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	b29b      	uxth	r3, r3
 8008368:	021b      	lsls	r3, r3, #8
 800836a:	b29b      	uxth	r3, r3
 800836c:	4313      	orrs	r3, r2
 800836e:	b29a      	uxth	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	330c      	adds	r3, #12
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	b29a      	uxth	r2, r3
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	330d      	adds	r3, #13
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	b29b      	uxth	r3, r3
 8008384:	021b      	lsls	r3, r3, #8
 8008386:	b29b      	uxth	r3, r3
 8008388:	4313      	orrs	r3, r2
 800838a:	b29a      	uxth	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	7b9a      	ldrb	r2, [r3, #14]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	7bda      	ldrb	r2, [r3, #15]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	7c1a      	ldrb	r2, [r3, #16]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	7c5a      	ldrb	r2, [r3, #17]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	745a      	strb	r2, [r3, #17]
  }
}
 80083b0:	bf00      	nop
 80083b2:	3714      	adds	r7, #20
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b08c      	sub	sp, #48	; 0x30
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	4613      	mov	r3, r2
 80083c8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80083d0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80083d2:	2300      	movs	r3, #0
 80083d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80083dc:	2300      	movs	r3, #0
 80083de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80083e2:	2300      	movs	r3, #0
 80083e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	781a      	ldrb	r2, [r3, #0]
 80083f0:	6a3b      	ldr	r3, [r7, #32]
 80083f2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	785a      	ldrb	r2, [r3, #1]
 80083f8:	6a3b      	ldr	r3, [r7, #32]
 80083fa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	3302      	adds	r3, #2
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	b29a      	uxth	r2, r3
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	3303      	adds	r3, #3
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	b29b      	uxth	r3, r3
 800840c:	021b      	lsls	r3, r3, #8
 800840e:	b29b      	uxth	r3, r3
 8008410:	4313      	orrs	r3, r2
 8008412:	b29b      	uxth	r3, r3
 8008414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008418:	bf28      	it	cs
 800841a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800841e:	b29a      	uxth	r2, r3
 8008420:	6a3b      	ldr	r3, [r7, #32]
 8008422:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	791a      	ldrb	r2, [r3, #4]
 8008428:	6a3b      	ldr	r3, [r7, #32]
 800842a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	795a      	ldrb	r2, [r3, #5]
 8008430:	6a3b      	ldr	r3, [r7, #32]
 8008432:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	799a      	ldrb	r2, [r3, #6]
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	79da      	ldrb	r2, [r3, #7]
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	7a1a      	ldrb	r2, [r3, #8]
 8008448:	6a3b      	ldr	r3, [r7, #32]
 800844a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	2b09      	cmp	r3, #9
 8008452:	d002      	beq.n	800845a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008454:	6a3b      	ldr	r3, [r7, #32]
 8008456:	2209      	movs	r2, #9
 8008458:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800845a:	88fb      	ldrh	r3, [r7, #6]
 800845c:	2b09      	cmp	r3, #9
 800845e:	f240 809d 	bls.w	800859c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008462:	2309      	movs	r3, #9
 8008464:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008466:	2300      	movs	r3, #0
 8008468:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800846a:	e081      	b.n	8008570 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800846c:	f107 0316 	add.w	r3, r7, #22
 8008470:	4619      	mov	r1, r3
 8008472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008474:	f000 f99f 	bl	80087b6 <USBH_GetNextDesc>
 8008478:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800847a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847c:	785b      	ldrb	r3, [r3, #1]
 800847e:	2b04      	cmp	r3, #4
 8008480:	d176      	bne.n	8008570 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	2b09      	cmp	r3, #9
 8008488:	d002      	beq.n	8008490 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800848a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848c:	2209      	movs	r2, #9
 800848e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008494:	221a      	movs	r2, #26
 8008496:	fb02 f303 	mul.w	r3, r2, r3
 800849a:	3308      	adds	r3, #8
 800849c:	6a3a      	ldr	r2, [r7, #32]
 800849e:	4413      	add	r3, r2
 80084a0:	3302      	adds	r3, #2
 80084a2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80084a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084a6:	69f8      	ldr	r0, [r7, #28]
 80084a8:	f000 f87e 	bl	80085a8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80084ac:	2300      	movs	r3, #0
 80084ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80084b2:	2300      	movs	r3, #0
 80084b4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80084b6:	e043      	b.n	8008540 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80084b8:	f107 0316 	add.w	r3, r7, #22
 80084bc:	4619      	mov	r1, r3
 80084be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084c0:	f000 f979 	bl	80087b6 <USBH_GetNextDesc>
 80084c4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80084c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c8:	785b      	ldrb	r3, [r3, #1]
 80084ca:	2b05      	cmp	r3, #5
 80084cc:	d138      	bne.n	8008540 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	795b      	ldrb	r3, [r3, #5]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d10f      	bne.n	80084f6 <USBH_ParseCfgDesc+0x13a>
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	799b      	ldrb	r3, [r3, #6]
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d10b      	bne.n	80084f6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	79db      	ldrb	r3, [r3, #7]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10f      	bne.n	8008506 <USBH_ParseCfgDesc+0x14a>
 80084e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	2b09      	cmp	r3, #9
 80084ec:	d00b      	beq.n	8008506 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80084ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f0:	2209      	movs	r2, #9
 80084f2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80084f4:	e007      	b.n	8008506 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80084f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	2b07      	cmp	r3, #7
 80084fc:	d004      	beq.n	8008508 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80084fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008500:	2207      	movs	r2, #7
 8008502:	701a      	strb	r2, [r3, #0]
 8008504:	e000      	b.n	8008508 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008506:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800850c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008510:	3201      	adds	r2, #1
 8008512:	00d2      	lsls	r2, r2, #3
 8008514:	211a      	movs	r1, #26
 8008516:	fb01 f303 	mul.w	r3, r1, r3
 800851a:	4413      	add	r3, r2
 800851c:	3308      	adds	r3, #8
 800851e:	6a3a      	ldr	r2, [r7, #32]
 8008520:	4413      	add	r3, r2
 8008522:	3304      	adds	r3, #4
 8008524:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008528:	69b9      	ldr	r1, [r7, #24]
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f000 f86b 	bl	8008606 <USBH_ParseEPDesc>
 8008530:	4603      	mov	r3, r0
 8008532:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008536:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800853a:	3301      	adds	r3, #1
 800853c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	791b      	ldrb	r3, [r3, #4]
 8008544:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008548:	429a      	cmp	r2, r3
 800854a:	d204      	bcs.n	8008556 <USBH_ParseCfgDesc+0x19a>
 800854c:	6a3b      	ldr	r3, [r7, #32]
 800854e:	885a      	ldrh	r2, [r3, #2]
 8008550:	8afb      	ldrh	r3, [r7, #22]
 8008552:	429a      	cmp	r2, r3
 8008554:	d8b0      	bhi.n	80084b8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	791b      	ldrb	r3, [r3, #4]
 800855a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800855e:	429a      	cmp	r2, r3
 8008560:	d201      	bcs.n	8008566 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008562:	2303      	movs	r3, #3
 8008564:	e01c      	b.n	80085a0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008566:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800856a:	3301      	adds	r3, #1
 800856c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008574:	2b01      	cmp	r3, #1
 8008576:	d805      	bhi.n	8008584 <USBH_ParseCfgDesc+0x1c8>
 8008578:	6a3b      	ldr	r3, [r7, #32]
 800857a:	885a      	ldrh	r2, [r3, #2]
 800857c:	8afb      	ldrh	r3, [r7, #22]
 800857e:	429a      	cmp	r2, r3
 8008580:	f63f af74 	bhi.w	800846c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008584:	6a3b      	ldr	r3, [r7, #32]
 8008586:	791b      	ldrb	r3, [r3, #4]
 8008588:	2b02      	cmp	r3, #2
 800858a:	bf28      	it	cs
 800858c:	2302      	movcs	r3, #2
 800858e:	b2db      	uxtb	r3, r3
 8008590:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008594:	429a      	cmp	r2, r3
 8008596:	d201      	bcs.n	800859c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008598:	2303      	movs	r3, #3
 800859a:	e001      	b.n	80085a0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800859c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3730      	adds	r7, #48	; 0x30
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	781a      	ldrb	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	785a      	ldrb	r2, [r3, #1]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	789a      	ldrb	r2, [r3, #2]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	78da      	ldrb	r2, [r3, #3]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	791a      	ldrb	r2, [r3, #4]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	795a      	ldrb	r2, [r3, #5]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	799a      	ldrb	r2, [r3, #6]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	79da      	ldrb	r2, [r3, #7]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	7a1a      	ldrb	r2, [r3, #8]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	721a      	strb	r2, [r3, #8]
}
 80085fa:	bf00      	nop
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008606:	b480      	push	{r7}
 8008608:	b087      	sub	sp, #28
 800860a:	af00      	add	r7, sp, #0
 800860c:	60f8      	str	r0, [r7, #12]
 800860e:	60b9      	str	r1, [r7, #8]
 8008610:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008612:	2300      	movs	r3, #0
 8008614:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	781a      	ldrb	r2, [r3, #0]
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	785a      	ldrb	r2, [r3, #1]
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	789a      	ldrb	r2, [r3, #2]
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	78da      	ldrb	r2, [r3, #3]
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	3304      	adds	r3, #4
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	b29a      	uxth	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	3305      	adds	r3, #5
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	b29b      	uxth	r3, r3
 8008646:	021b      	lsls	r3, r3, #8
 8008648:	b29b      	uxth	r3, r3
 800864a:	4313      	orrs	r3, r2
 800864c:	b29a      	uxth	r2, r3
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	799a      	ldrb	r2, [r3, #6]
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	889b      	ldrh	r3, [r3, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d102      	bne.n	8008668 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008662:	2303      	movs	r3, #3
 8008664:	75fb      	strb	r3, [r7, #23]
 8008666:	e033      	b.n	80086d0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	889b      	ldrh	r3, [r3, #4]
 800866c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008670:	f023 0307 	bic.w	r3, r3, #7
 8008674:	b29a      	uxth	r2, r3
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	889b      	ldrh	r3, [r3, #4]
 800867e:	b21a      	sxth	r2, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	3304      	adds	r3, #4
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	b299      	uxth	r1, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	3305      	adds	r3, #5
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	b29b      	uxth	r3, r3
 8008690:	021b      	lsls	r3, r3, #8
 8008692:	b29b      	uxth	r3, r3
 8008694:	430b      	orrs	r3, r1
 8008696:	b29b      	uxth	r3, r3
 8008698:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800869c:	2b00      	cmp	r3, #0
 800869e:	d110      	bne.n	80086c2 <USBH_ParseEPDesc+0xbc>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	3304      	adds	r3, #4
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	b299      	uxth	r1, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	3305      	adds	r3, #5
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	021b      	lsls	r3, r3, #8
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	430b      	orrs	r3, r1
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	b21b      	sxth	r3, r3
 80086ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086be:	b21b      	sxth	r3, r3
 80086c0:	e001      	b.n	80086c6 <USBH_ParseEPDesc+0xc0>
 80086c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086c6:	4313      	orrs	r3, r2
 80086c8:	b21b      	sxth	r3, r3
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d116      	bne.n	8008708 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	78db      	ldrb	r3, [r3, #3]
 80086de:	f003 0303 	and.w	r3, r3, #3
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d005      	beq.n	80086f2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	78db      	ldrb	r3, [r3, #3]
 80086ea:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	d127      	bne.n	8008742 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	799b      	ldrb	r3, [r3, #6]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d003      	beq.n	8008702 <USBH_ParseEPDesc+0xfc>
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	799b      	ldrb	r3, [r3, #6]
 80086fe:	2b10      	cmp	r3, #16
 8008700:	d91f      	bls.n	8008742 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008702:	2303      	movs	r3, #3
 8008704:	75fb      	strb	r3, [r7, #23]
 8008706:	e01c      	b.n	8008742 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	78db      	ldrb	r3, [r3, #3]
 800870c:	f003 0303 	and.w	r3, r3, #3
 8008710:	2b01      	cmp	r3, #1
 8008712:	d10a      	bne.n	800872a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	799b      	ldrb	r3, [r3, #6]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <USBH_ParseEPDesc+0x11e>
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	799b      	ldrb	r3, [r3, #6]
 8008720:	2b10      	cmp	r3, #16
 8008722:	d90e      	bls.n	8008742 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008724:	2303      	movs	r3, #3
 8008726:	75fb      	strb	r3, [r7, #23]
 8008728:	e00b      	b.n	8008742 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	78db      	ldrb	r3, [r3, #3]
 800872e:	f003 0303 	and.w	r3, r3, #3
 8008732:	2b03      	cmp	r3, #3
 8008734:	d105      	bne.n	8008742 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	799b      	ldrb	r3, [r3, #6]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d101      	bne.n	8008742 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800873e:	2303      	movs	r3, #3
 8008740:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008742:	7dfb      	ldrb	r3, [r7, #23]
}
 8008744:	4618      	mov	r0, r3
 8008746:	371c      	adds	r7, #28
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008750:	b480      	push	{r7}
 8008752:	b087      	sub	sp, #28
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	4613      	mov	r3, r2
 800875c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	3301      	adds	r3, #1
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	2b03      	cmp	r3, #3
 8008766:	d120      	bne.n	80087aa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	1e9a      	subs	r2, r3, #2
 800876e:	88fb      	ldrh	r3, [r7, #6]
 8008770:	4293      	cmp	r3, r2
 8008772:	bf28      	it	cs
 8008774:	4613      	movcs	r3, r2
 8008776:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	3302      	adds	r3, #2
 800877c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800877e:	2300      	movs	r3, #0
 8008780:	82fb      	strh	r3, [r7, #22]
 8008782:	e00b      	b.n	800879c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008784:	8afb      	ldrh	r3, [r7, #22]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	4413      	add	r3, r2
 800878a:	781a      	ldrb	r2, [r3, #0]
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	3301      	adds	r3, #1
 8008794:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008796:	8afb      	ldrh	r3, [r7, #22]
 8008798:	3302      	adds	r3, #2
 800879a:	82fb      	strh	r3, [r7, #22]
 800879c:	8afa      	ldrh	r2, [r7, #22]
 800879e:	8abb      	ldrh	r3, [r7, #20]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d3ef      	bcc.n	8008784 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2200      	movs	r2, #0
 80087a8:	701a      	strb	r2, [r3, #0]
  }
}
 80087aa:	bf00      	nop
 80087ac:	371c      	adds	r7, #28
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b085      	sub	sp, #20
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	881a      	ldrh	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	4413      	add	r3, r2
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4413      	add	r3, r2
 80087dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80087de:	68fb      	ldr	r3, [r7, #12]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3714      	adds	r7, #20
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	4613      	mov	r3, r2
 80087f8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80087fa:	2301      	movs	r3, #1
 80087fc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	789b      	ldrb	r3, [r3, #2]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d002      	beq.n	800880c <USBH_CtlReq+0x20>
 8008806:	2b02      	cmp	r3, #2
 8008808:	d00f      	beq.n	800882a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800880a:	e027      	b.n	800885c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	88fa      	ldrh	r2, [r7, #6]
 8008816:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2201      	movs	r2, #1
 800881c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2202      	movs	r2, #2
 8008822:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008824:	2301      	movs	r3, #1
 8008826:	75fb      	strb	r3, [r7, #23]
      break;
 8008828:	e018      	b.n	800885c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f000 f81c 	bl	8008868 <USBH_HandleControl>
 8008830:	4603      	mov	r3, r0
 8008832:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008834:	7dfb      	ldrb	r3, [r7, #23]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d002      	beq.n	8008840 <USBH_CtlReq+0x54>
 800883a:	7dfb      	ldrb	r3, [r7, #23]
 800883c:	2b03      	cmp	r3, #3
 800883e:	d106      	bne.n	800884e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2201      	movs	r2, #1
 8008844:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	761a      	strb	r2, [r3, #24]
      break;
 800884c:	e005      	b.n	800885a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800884e:	7dfb      	ldrb	r3, [r7, #23]
 8008850:	2b02      	cmp	r3, #2
 8008852:	d102      	bne.n	800885a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2201      	movs	r2, #1
 8008858:	709a      	strb	r2, [r3, #2]
      break;
 800885a:	bf00      	nop
  }
  return status;
 800885c:	7dfb      	ldrb	r3, [r7, #23]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3718      	adds	r7, #24
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
	...

08008868 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af02      	add	r7, sp, #8
 800886e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008870:	2301      	movs	r3, #1
 8008872:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008874:	2300      	movs	r3, #0
 8008876:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	7e1b      	ldrb	r3, [r3, #24]
 800887c:	3b01      	subs	r3, #1
 800887e:	2b0a      	cmp	r3, #10
 8008880:	f200 8156 	bhi.w	8008b30 <USBH_HandleControl+0x2c8>
 8008884:	a201      	add	r2, pc, #4	; (adr r2, 800888c <USBH_HandleControl+0x24>)
 8008886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888a:	bf00      	nop
 800888c:	080088b9 	.word	0x080088b9
 8008890:	080088d3 	.word	0x080088d3
 8008894:	0800893d 	.word	0x0800893d
 8008898:	08008963 	.word	0x08008963
 800889c:	0800899b 	.word	0x0800899b
 80088a0:	080089c5 	.word	0x080089c5
 80088a4:	08008a17 	.word	0x08008a17
 80088a8:	08008a39 	.word	0x08008a39
 80088ac:	08008a75 	.word	0x08008a75
 80088b0:	08008a9b 	.word	0x08008a9b
 80088b4:	08008ad9 	.word	0x08008ad9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f103 0110 	add.w	r1, r3, #16
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	795b      	ldrb	r3, [r3, #5]
 80088c2:	461a      	mov	r2, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f943 	bl	8008b50 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2202      	movs	r2, #2
 80088ce:	761a      	strb	r2, [r3, #24]
      break;
 80088d0:	e139      	b.n	8008b46 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	795b      	ldrb	r3, [r3, #5]
 80088d6:	4619      	mov	r1, r3
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f003 fa54 	bl	800bd86 <USBH_LL_GetURBState>
 80088de:	4603      	mov	r3, r0
 80088e0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80088e2:	7bbb      	ldrb	r3, [r7, #14]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d11e      	bne.n	8008926 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	7c1b      	ldrb	r3, [r3, #16]
 80088ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80088f0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	8adb      	ldrh	r3, [r3, #22]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00a      	beq.n	8008910 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80088fa:	7b7b      	ldrb	r3, [r7, #13]
 80088fc:	2b80      	cmp	r3, #128	; 0x80
 80088fe:	d103      	bne.n	8008908 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2203      	movs	r2, #3
 8008904:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008906:	e115      	b.n	8008b34 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2205      	movs	r2, #5
 800890c:	761a      	strb	r2, [r3, #24]
      break;
 800890e:	e111      	b.n	8008b34 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008910:	7b7b      	ldrb	r3, [r7, #13]
 8008912:	2b80      	cmp	r3, #128	; 0x80
 8008914:	d103      	bne.n	800891e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2209      	movs	r2, #9
 800891a:	761a      	strb	r2, [r3, #24]
      break;
 800891c:	e10a      	b.n	8008b34 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2207      	movs	r2, #7
 8008922:	761a      	strb	r2, [r3, #24]
      break;
 8008924:	e106      	b.n	8008b34 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008926:	7bbb      	ldrb	r3, [r7, #14]
 8008928:	2b04      	cmp	r3, #4
 800892a:	d003      	beq.n	8008934 <USBH_HandleControl+0xcc>
 800892c:	7bbb      	ldrb	r3, [r7, #14]
 800892e:	2b02      	cmp	r3, #2
 8008930:	f040 8100 	bne.w	8008b34 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	220b      	movs	r2, #11
 8008938:	761a      	strb	r2, [r3, #24]
      break;
 800893a:	e0fb      	b.n	8008b34 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008942:	b29a      	uxth	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6899      	ldr	r1, [r3, #8]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	899a      	ldrh	r2, [r3, #12]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	791b      	ldrb	r3, [r3, #4]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f93a 	bl	8008bce <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2204      	movs	r2, #4
 800895e:	761a      	strb	r2, [r3, #24]
      break;
 8008960:	e0f1      	b.n	8008b46 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	791b      	ldrb	r3, [r3, #4]
 8008966:	4619      	mov	r1, r3
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f003 fa0c 	bl	800bd86 <USBH_LL_GetURBState>
 800896e:	4603      	mov	r3, r0
 8008970:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008972:	7bbb      	ldrb	r3, [r7, #14]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d102      	bne.n	800897e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2209      	movs	r2, #9
 800897c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800897e:	7bbb      	ldrb	r3, [r7, #14]
 8008980:	2b05      	cmp	r3, #5
 8008982:	d102      	bne.n	800898a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008984:	2303      	movs	r3, #3
 8008986:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008988:	e0d6      	b.n	8008b38 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800898a:	7bbb      	ldrb	r3, [r7, #14]
 800898c:	2b04      	cmp	r3, #4
 800898e:	f040 80d3 	bne.w	8008b38 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	220b      	movs	r2, #11
 8008996:	761a      	strb	r2, [r3, #24]
      break;
 8008998:	e0ce      	b.n	8008b38 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6899      	ldr	r1, [r3, #8]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	899a      	ldrh	r2, [r3, #12]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	795b      	ldrb	r3, [r3, #5]
 80089a6:	2001      	movs	r0, #1
 80089a8:	9000      	str	r0, [sp, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f8ea 	bl	8008b84 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2206      	movs	r2, #6
 80089c0:	761a      	strb	r2, [r3, #24]
      break;
 80089c2:	e0c0      	b.n	8008b46 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	795b      	ldrb	r3, [r3, #5]
 80089c8:	4619      	mov	r1, r3
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f003 f9db 	bl	800bd86 <USBH_LL_GetURBState>
 80089d0:	4603      	mov	r3, r0
 80089d2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80089d4:	7bbb      	ldrb	r3, [r7, #14]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d103      	bne.n	80089e2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2207      	movs	r2, #7
 80089de:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089e0:	e0ac      	b.n	8008b3c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80089e2:	7bbb      	ldrb	r3, [r7, #14]
 80089e4:	2b05      	cmp	r3, #5
 80089e6:	d105      	bne.n	80089f4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	220c      	movs	r2, #12
 80089ec:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80089ee:	2303      	movs	r3, #3
 80089f0:	73fb      	strb	r3, [r7, #15]
      break;
 80089f2:	e0a3      	b.n	8008b3c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80089f4:	7bbb      	ldrb	r3, [r7, #14]
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d103      	bne.n	8008a02 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2205      	movs	r2, #5
 80089fe:	761a      	strb	r2, [r3, #24]
      break;
 8008a00:	e09c      	b.n	8008b3c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008a02:	7bbb      	ldrb	r3, [r7, #14]
 8008a04:	2b04      	cmp	r3, #4
 8008a06:	f040 8099 	bne.w	8008b3c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	220b      	movs	r2, #11
 8008a0e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008a10:	2302      	movs	r3, #2
 8008a12:	73fb      	strb	r3, [r7, #15]
      break;
 8008a14:	e092      	b.n	8008b3c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	791b      	ldrb	r3, [r3, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f8d5 	bl	8008bce <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2208      	movs	r2, #8
 8008a34:	761a      	strb	r2, [r3, #24]

      break;
 8008a36:	e086      	b.n	8008b46 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	791b      	ldrb	r3, [r3, #4]
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f003 f9a1 	bl	800bd86 <USBH_LL_GetURBState>
 8008a44:	4603      	mov	r3, r0
 8008a46:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a48:	7bbb      	ldrb	r3, [r7, #14]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d105      	bne.n	8008a5a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	220d      	movs	r2, #13
 8008a52:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a58:	e072      	b.n	8008b40 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008a5a:	7bbb      	ldrb	r3, [r7, #14]
 8008a5c:	2b04      	cmp	r3, #4
 8008a5e:	d103      	bne.n	8008a68 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	220b      	movs	r2, #11
 8008a64:	761a      	strb	r2, [r3, #24]
      break;
 8008a66:	e06b      	b.n	8008b40 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
 8008a6a:	2b05      	cmp	r3, #5
 8008a6c:	d168      	bne.n	8008b40 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	73fb      	strb	r3, [r7, #15]
      break;
 8008a72:	e065      	b.n	8008b40 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	795b      	ldrb	r3, [r3, #5]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	9200      	str	r2, [sp, #0]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	2100      	movs	r1, #0
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f87f 	bl	8008b84 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	220a      	movs	r2, #10
 8008a96:	761a      	strb	r2, [r3, #24]
      break;
 8008a98:	e055      	b.n	8008b46 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	795b      	ldrb	r3, [r3, #5]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f003 f970 	bl	800bd86 <USBH_LL_GetURBState>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008aaa:	7bbb      	ldrb	r3, [r7, #14]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d105      	bne.n	8008abc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	220d      	movs	r2, #13
 8008ab8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008aba:	e043      	b.n	8008b44 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008abc:	7bbb      	ldrb	r3, [r7, #14]
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d103      	bne.n	8008aca <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2209      	movs	r2, #9
 8008ac6:	761a      	strb	r2, [r3, #24]
      break;
 8008ac8:	e03c      	b.n	8008b44 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008aca:	7bbb      	ldrb	r3, [r7, #14]
 8008acc:	2b04      	cmp	r3, #4
 8008ace:	d139      	bne.n	8008b44 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	220b      	movs	r2, #11
 8008ad4:	761a      	strb	r2, [r3, #24]
      break;
 8008ad6:	e035      	b.n	8008b44 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	7e5b      	ldrb	r3, [r3, #25]
 8008adc:	3301      	adds	r3, #1
 8008ade:	b2da      	uxtb	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	765a      	strb	r2, [r3, #25]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	7e5b      	ldrb	r3, [r3, #25]
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d806      	bhi.n	8008afa <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2201      	movs	r2, #1
 8008af6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008af8:	e025      	b.n	8008b46 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b00:	2106      	movs	r1, #6
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	795b      	ldrb	r3, [r3, #5]
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f90c 	bl	8008d30 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	791b      	ldrb	r3, [r3, #4]
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f906 	bl	8008d30 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008b2a:	2302      	movs	r3, #2
 8008b2c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b2e:	e00a      	b.n	8008b46 <USBH_HandleControl+0x2de>

    default:
      break;
 8008b30:	bf00      	nop
 8008b32:	e008      	b.n	8008b46 <USBH_HandleControl+0x2de>
      break;
 8008b34:	bf00      	nop
 8008b36:	e006      	b.n	8008b46 <USBH_HandleControl+0x2de>
      break;
 8008b38:	bf00      	nop
 8008b3a:	e004      	b.n	8008b46 <USBH_HandleControl+0x2de>
      break;
 8008b3c:	bf00      	nop
 8008b3e:	e002      	b.n	8008b46 <USBH_HandleControl+0x2de>
      break;
 8008b40:	bf00      	nop
 8008b42:	e000      	b.n	8008b46 <USBH_HandleControl+0x2de>
      break;
 8008b44:	bf00      	nop
  }

  return status;
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b088      	sub	sp, #32
 8008b54:	af04      	add	r7, sp, #16
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b5e:	79f9      	ldrb	r1, [r7, #7]
 8008b60:	2300      	movs	r3, #0
 8008b62:	9303      	str	r3, [sp, #12]
 8008b64:	2308      	movs	r3, #8
 8008b66:	9302      	str	r3, [sp, #8]
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	9301      	str	r3, [sp, #4]
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	9300      	str	r3, [sp, #0]
 8008b70:	2300      	movs	r3, #0
 8008b72:	2200      	movs	r2, #0
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f003 f8d5 	bl	800bd24 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b088      	sub	sp, #32
 8008b88:	af04      	add	r7, sp, #16
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	4611      	mov	r1, r2
 8008b90:	461a      	mov	r2, r3
 8008b92:	460b      	mov	r3, r1
 8008b94:	80fb      	strh	r3, [r7, #6]
 8008b96:	4613      	mov	r3, r2
 8008b98:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ba8:	7979      	ldrb	r1, [r7, #5]
 8008baa:	7e3b      	ldrb	r3, [r7, #24]
 8008bac:	9303      	str	r3, [sp, #12]
 8008bae:	88fb      	ldrh	r3, [r7, #6]
 8008bb0:	9302      	str	r3, [sp, #8]
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	9301      	str	r3, [sp, #4]
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	9300      	str	r3, [sp, #0]
 8008bba:	2300      	movs	r3, #0
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f003 f8b0 	bl	800bd24 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b088      	sub	sp, #32
 8008bd2:	af04      	add	r7, sp, #16
 8008bd4:	60f8      	str	r0, [r7, #12]
 8008bd6:	60b9      	str	r1, [r7, #8]
 8008bd8:	4611      	mov	r1, r2
 8008bda:	461a      	mov	r2, r3
 8008bdc:	460b      	mov	r3, r1
 8008bde:	80fb      	strh	r3, [r7, #6]
 8008be0:	4613      	mov	r3, r2
 8008be2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008be4:	7979      	ldrb	r1, [r7, #5]
 8008be6:	2300      	movs	r3, #0
 8008be8:	9303      	str	r3, [sp, #12]
 8008bea:	88fb      	ldrh	r3, [r7, #6]
 8008bec:	9302      	str	r3, [sp, #8]
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	9301      	str	r3, [sp, #4]
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f003 f892 	bl	800bd24 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008c00:	2300      	movs	r3, #0

}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b088      	sub	sp, #32
 8008c0e:	af04      	add	r7, sp, #16
 8008c10:	60f8      	str	r0, [r7, #12]
 8008c12:	60b9      	str	r1, [r7, #8]
 8008c14:	4611      	mov	r1, r2
 8008c16:	461a      	mov	r2, r3
 8008c18:	460b      	mov	r3, r1
 8008c1a:	80fb      	strh	r3, [r7, #6]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c2e:	7979      	ldrb	r1, [r7, #5]
 8008c30:	7e3b      	ldrb	r3, [r7, #24]
 8008c32:	9303      	str	r3, [sp, #12]
 8008c34:	88fb      	ldrh	r3, [r7, #6]
 8008c36:	9302      	str	r3, [sp, #8]
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	9301      	str	r3, [sp, #4]
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	2302      	movs	r3, #2
 8008c42:	2200      	movs	r2, #0
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f003 f86d 	bl	800bd24 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b088      	sub	sp, #32
 8008c58:	af04      	add	r7, sp, #16
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	4611      	mov	r1, r2
 8008c60:	461a      	mov	r2, r3
 8008c62:	460b      	mov	r3, r1
 8008c64:	80fb      	strh	r3, [r7, #6]
 8008c66:	4613      	mov	r3, r2
 8008c68:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c6a:	7979      	ldrb	r1, [r7, #5]
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	9303      	str	r3, [sp, #12]
 8008c70:	88fb      	ldrh	r3, [r7, #6]
 8008c72:	9302      	str	r3, [sp, #8]
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	9301      	str	r3, [sp, #4]
 8008c78:	2301      	movs	r3, #1
 8008c7a:	9300      	str	r3, [sp, #0]
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	2201      	movs	r2, #1
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f003 f84f 	bl	800bd24 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af04      	add	r7, sp, #16
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	4608      	mov	r0, r1
 8008c9a:	4611      	mov	r1, r2
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	70fb      	strb	r3, [r7, #3]
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	70bb      	strb	r3, [r7, #2]
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008caa:	7878      	ldrb	r0, [r7, #1]
 8008cac:	78ba      	ldrb	r2, [r7, #2]
 8008cae:	78f9      	ldrb	r1, [r7, #3]
 8008cb0:	8b3b      	ldrh	r3, [r7, #24]
 8008cb2:	9302      	str	r3, [sp, #8]
 8008cb4:	7d3b      	ldrb	r3, [r7, #20]
 8008cb6:	9301      	str	r3, [sp, #4]
 8008cb8:	7c3b      	ldrb	r3, [r7, #16]
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f002 ffe2 	bl	800bc88 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b082      	sub	sp, #8
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008cda:	78fb      	ldrb	r3, [r7, #3]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f003 f801 	bl	800bce6 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3708      	adds	r7, #8
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b084      	sub	sp, #16
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f836 	bl	8008d6c <USBH_GetFreePipe>
 8008d00:	4603      	mov	r3, r0
 8008d02:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008d04:	89fb      	ldrh	r3, [r7, #14]
 8008d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d00a      	beq.n	8008d24 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008d0e:	78fa      	ldrb	r2, [r7, #3]
 8008d10:	89fb      	ldrh	r3, [r7, #14]
 8008d12:	f003 030f 	and.w	r3, r3, #15
 8008d16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d1a:	6879      	ldr	r1, [r7, #4]
 8008d1c:	33e0      	adds	r3, #224	; 0xe0
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	440b      	add	r3, r1
 8008d22:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008d24:	89fb      	ldrh	r3, [r7, #14]
 8008d26:	b2db      	uxtb	r3, r3
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	460b      	mov	r3, r1
 8008d3a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008d3c:	78fb      	ldrb	r3, [r7, #3]
 8008d3e:	2b0f      	cmp	r3, #15
 8008d40:	d80d      	bhi.n	8008d5e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008d42:	78fb      	ldrb	r3, [r7, #3]
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	33e0      	adds	r3, #224	; 0xe0
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	4413      	add	r3, r2
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	78fb      	ldrb	r3, [r7, #3]
 8008d50:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008d54:	6879      	ldr	r1, [r7, #4]
 8008d56:	33e0      	adds	r3, #224	; 0xe0
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	440b      	add	r3, r1
 8008d5c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008d74:	2300      	movs	r3, #0
 8008d76:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008d78:	2300      	movs	r3, #0
 8008d7a:	73fb      	strb	r3, [r7, #15]
 8008d7c:	e00f      	b.n	8008d9e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	33e0      	adds	r3, #224	; 0xe0
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d102      	bne.n	8008d98 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	e007      	b.n	8008da8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	73fb      	strb	r3, [r7, #15]
 8008d9e:	7bfb      	ldrb	r3, [r7, #15]
 8008da0:	2b0f      	cmp	r3, #15
 8008da2:	d9ec      	bls.n	8008d7e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3714      	adds	r7, #20
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	4603      	mov	r3, r0
 8008dbc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008dbe:	79fb      	ldrb	r3, [r7, #7]
 8008dc0:	4a08      	ldr	r2, [pc, #32]	; (8008de4 <disk_status+0x30>)
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4413      	add	r3, r2
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	79fa      	ldrb	r2, [r7, #7]
 8008dcc:	4905      	ldr	r1, [pc, #20]	; (8008de4 <disk_status+0x30>)
 8008dce:	440a      	add	r2, r1
 8008dd0:	7a12      	ldrb	r2, [r2, #8]
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	4798      	blx	r3
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	200005b0 	.word	0x200005b0

08008de8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	4603      	mov	r3, r0
 8008df0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008df6:	79fb      	ldrb	r3, [r7, #7]
 8008df8:	4a0d      	ldr	r2, [pc, #52]	; (8008e30 <disk_initialize+0x48>)
 8008dfa:	5cd3      	ldrb	r3, [r2, r3]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d111      	bne.n	8008e24 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008e00:	79fb      	ldrb	r3, [r7, #7]
 8008e02:	4a0b      	ldr	r2, [pc, #44]	; (8008e30 <disk_initialize+0x48>)
 8008e04:	2101      	movs	r1, #1
 8008e06:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008e08:	79fb      	ldrb	r3, [r7, #7]
 8008e0a:	4a09      	ldr	r2, [pc, #36]	; (8008e30 <disk_initialize+0x48>)
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	79fa      	ldrb	r2, [r7, #7]
 8008e16:	4906      	ldr	r1, [pc, #24]	; (8008e30 <disk_initialize+0x48>)
 8008e18:	440a      	add	r2, r1
 8008e1a:	7a12      	ldrb	r2, [r2, #8]
 8008e1c:	4610      	mov	r0, r2
 8008e1e:	4798      	blx	r3
 8008e20:	4603      	mov	r3, r0
 8008e22:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	200005b0 	.word	0x200005b0

08008e34 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008e34:	b590      	push	{r4, r7, lr}
 8008e36:	b087      	sub	sp, #28
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	607a      	str	r2, [r7, #4]
 8008e3e:	603b      	str	r3, [r7, #0]
 8008e40:	4603      	mov	r3, r0
 8008e42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008e44:	7bfb      	ldrb	r3, [r7, #15]
 8008e46:	4a0a      	ldr	r2, [pc, #40]	; (8008e70 <disk_read+0x3c>)
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	4413      	add	r3, r2
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	689c      	ldr	r4, [r3, #8]
 8008e50:	7bfb      	ldrb	r3, [r7, #15]
 8008e52:	4a07      	ldr	r2, [pc, #28]	; (8008e70 <disk_read+0x3c>)
 8008e54:	4413      	add	r3, r2
 8008e56:	7a18      	ldrb	r0, [r3, #8]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	68b9      	ldr	r1, [r7, #8]
 8008e5e:	47a0      	blx	r4
 8008e60:	4603      	mov	r3, r0
 8008e62:	75fb      	strb	r3, [r7, #23]
  return res;
 8008e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	371c      	adds	r7, #28
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd90      	pop	{r4, r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	200005b0 	.word	0x200005b0

08008e74 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008e74:	b590      	push	{r4, r7, lr}
 8008e76:	b087      	sub	sp, #28
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60b9      	str	r1, [r7, #8]
 8008e7c:	607a      	str	r2, [r7, #4]
 8008e7e:	603b      	str	r3, [r7, #0]
 8008e80:	4603      	mov	r3, r0
 8008e82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
 8008e86:	4a0a      	ldr	r2, [pc, #40]	; (8008eb0 <disk_write+0x3c>)
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4413      	add	r3, r2
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	68dc      	ldr	r4, [r3, #12]
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
 8008e92:	4a07      	ldr	r2, [pc, #28]	; (8008eb0 <disk_write+0x3c>)
 8008e94:	4413      	add	r3, r2
 8008e96:	7a18      	ldrb	r0, [r3, #8]
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	68b9      	ldr	r1, [r7, #8]
 8008e9e:	47a0      	blx	r4
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	75fb      	strb	r3, [r7, #23]
  return res;
 8008ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	371c      	adds	r7, #28
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd90      	pop	{r4, r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	200005b0 	.word	0x200005b0

08008eb4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	4603      	mov	r3, r0
 8008ebc:	603a      	str	r2, [r7, #0]
 8008ebe:	71fb      	strb	r3, [r7, #7]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008ec4:	79fb      	ldrb	r3, [r7, #7]
 8008ec6:	4a09      	ldr	r2, [pc, #36]	; (8008eec <disk_ioctl+0x38>)
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	4413      	add	r3, r2
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	79fa      	ldrb	r2, [r7, #7]
 8008ed2:	4906      	ldr	r1, [pc, #24]	; (8008eec <disk_ioctl+0x38>)
 8008ed4:	440a      	add	r2, r1
 8008ed6:	7a10      	ldrb	r0, [r2, #8]
 8008ed8:	79b9      	ldrb	r1, [r7, #6]
 8008eda:	683a      	ldr	r2, [r7, #0]
 8008edc:	4798      	blx	r3
 8008ede:	4603      	mov	r3, r0
 8008ee0:	73fb      	strb	r3, [r7, #15]
  return res;
 8008ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	200005b0 	.word	0x200005b0

08008ef0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	3301      	adds	r3, #1
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008f00:	89fb      	ldrh	r3, [r7, #14]
 8008f02:	021b      	lsls	r3, r3, #8
 8008f04:	b21a      	sxth	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	b21b      	sxth	r3, r3
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	b21b      	sxth	r3, r3
 8008f10:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008f12:	89fb      	ldrh	r3, [r7, #14]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	3303      	adds	r3, #3
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	021b      	lsls	r3, r3, #8
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	3202      	adds	r2, #2
 8008f38:	7812      	ldrb	r2, [r2, #0]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	021b      	lsls	r3, r3, #8
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	3201      	adds	r2, #1
 8008f46:	7812      	ldrb	r2, [r2, #0]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	021b      	lsls	r3, r3, #8
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	7812      	ldrb	r2, [r2, #0]
 8008f54:	4313      	orrs	r3, r2
 8008f56:	60fb      	str	r3, [r7, #12]
	return rv;
 8008f58:	68fb      	ldr	r3, [r7, #12]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3714      	adds	r7, #20
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008f66:	b480      	push	{r7}
 8008f68:	b083      	sub	sp, #12
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	460b      	mov	r3, r1
 8008f70:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	1c5a      	adds	r2, r3, #1
 8008f76:	607a      	str	r2, [r7, #4]
 8008f78:	887a      	ldrh	r2, [r7, #2]
 8008f7a:	b2d2      	uxtb	r2, r2
 8008f7c:	701a      	strb	r2, [r3, #0]
 8008f7e:	887b      	ldrh	r3, [r7, #2]
 8008f80:	0a1b      	lsrs	r3, r3, #8
 8008f82:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	1c5a      	adds	r2, r3, #1
 8008f88:	607a      	str	r2, [r7, #4]
 8008f8a:	887a      	ldrh	r2, [r7, #2]
 8008f8c:	b2d2      	uxtb	r2, r2
 8008f8e:	701a      	strb	r2, [r3, #0]
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	1c5a      	adds	r2, r3, #1
 8008faa:	607a      	str	r2, [r7, #4]
 8008fac:	683a      	ldr	r2, [r7, #0]
 8008fae:	b2d2      	uxtb	r2, r2
 8008fb0:	701a      	strb	r2, [r3, #0]
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	0a1b      	lsrs	r3, r3, #8
 8008fb6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	1c5a      	adds	r2, r3, #1
 8008fbc:	607a      	str	r2, [r7, #4]
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	b2d2      	uxtb	r2, r2
 8008fc2:	701a      	strb	r2, [r3, #0]
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	0a1b      	lsrs	r3, r3, #8
 8008fc8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	1c5a      	adds	r2, r3, #1
 8008fce:	607a      	str	r2, [r7, #4]
 8008fd0:	683a      	ldr	r2, [r7, #0]
 8008fd2:	b2d2      	uxtb	r2, r2
 8008fd4:	701a      	strb	r2, [r3, #0]
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	0a1b      	lsrs	r3, r3, #8
 8008fda:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	1c5a      	adds	r2, r3, #1
 8008fe0:	607a      	str	r2, [r7, #4]
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	b2d2      	uxtb	r2, r2
 8008fe6:	701a      	strb	r2, [r3, #0]
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008ff4:	b480      	push	{r7}
 8008ff6:	b087      	sub	sp, #28
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00d      	beq.n	800902a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800900e:	693a      	ldr	r2, [r7, #16]
 8009010:	1c53      	adds	r3, r2, #1
 8009012:	613b      	str	r3, [r7, #16]
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	1c59      	adds	r1, r3, #1
 8009018:	6179      	str	r1, [r7, #20]
 800901a:	7812      	ldrb	r2, [r2, #0]
 800901c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	3b01      	subs	r3, #1
 8009022:	607b      	str	r3, [r7, #4]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1f1      	bne.n	800900e <mem_cpy+0x1a>
	}
}
 800902a:	bf00      	nop
 800902c:	371c      	adds	r7, #28
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009036:	b480      	push	{r7}
 8009038:	b087      	sub	sp, #28
 800903a:	af00      	add	r7, sp, #0
 800903c:	60f8      	str	r0, [r7, #12]
 800903e:	60b9      	str	r1, [r7, #8]
 8009040:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	1c5a      	adds	r2, r3, #1
 800904a:	617a      	str	r2, [r7, #20]
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	b2d2      	uxtb	r2, r2
 8009050:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	3b01      	subs	r3, #1
 8009056:	607b      	str	r3, [r7, #4]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1f3      	bne.n	8009046 <mem_set+0x10>
}
 800905e:	bf00      	nop
 8009060:	bf00      	nop
 8009062:	371c      	adds	r7, #28
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800906c:	b480      	push	{r7}
 800906e:	b089      	sub	sp, #36	; 0x24
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	61fb      	str	r3, [r7, #28]
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009080:	2300      	movs	r3, #0
 8009082:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	1c5a      	adds	r2, r3, #1
 8009088:	61fa      	str	r2, [r7, #28]
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	4619      	mov	r1, r3
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	1c5a      	adds	r2, r3, #1
 8009092:	61ba      	str	r2, [r7, #24]
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	1acb      	subs	r3, r1, r3
 8009098:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	3b01      	subs	r3, #1
 800909e:	607b      	str	r3, [r7, #4]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d002      	beq.n	80090ac <mem_cmp+0x40>
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d0eb      	beq.n	8009084 <mem_cmp+0x18>

	return r;
 80090ac:	697b      	ldr	r3, [r7, #20]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3724      	adds	r7, #36	; 0x24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80090ba:	b480      	push	{r7}
 80090bc:	b083      	sub	sp, #12
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
 80090c2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80090c4:	e002      	b.n	80090cc <chk_chr+0x12>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	3301      	adds	r3, #1
 80090ca:	607b      	str	r3, [r7, #4]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d005      	beq.n	80090e0 <chk_chr+0x26>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	461a      	mov	r2, r3
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	4293      	cmp	r3, r2
 80090de:	d1f2      	bne.n	80090c6 <chk_chr+0xc>
	return *str;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	781b      	ldrb	r3, [r3, #0]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b085      	sub	sp, #20
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80090fa:	2300      	movs	r3, #0
 80090fc:	60bb      	str	r3, [r7, #8]
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	60fb      	str	r3, [r7, #12]
 8009102:	e029      	b.n	8009158 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009104:	4a27      	ldr	r2, [pc, #156]	; (80091a4 <chk_lock+0xb4>)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	011b      	lsls	r3, r3, #4
 800910a:	4413      	add	r3, r2
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d01d      	beq.n	800914e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009112:	4a24      	ldr	r2, [pc, #144]	; (80091a4 <chk_lock+0xb4>)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	011b      	lsls	r3, r3, #4
 8009118:	4413      	add	r3, r2
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	429a      	cmp	r2, r3
 8009122:	d116      	bne.n	8009152 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009124:	4a1f      	ldr	r2, [pc, #124]	; (80091a4 <chk_lock+0xb4>)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	011b      	lsls	r3, r3, #4
 800912a:	4413      	add	r3, r2
 800912c:	3304      	adds	r3, #4
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009134:	429a      	cmp	r2, r3
 8009136:	d10c      	bne.n	8009152 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009138:	4a1a      	ldr	r2, [pc, #104]	; (80091a4 <chk_lock+0xb4>)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	011b      	lsls	r3, r3, #4
 800913e:	4413      	add	r3, r2
 8009140:	3308      	adds	r3, #8
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009148:	429a      	cmp	r2, r3
 800914a:	d102      	bne.n	8009152 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800914c:	e007      	b.n	800915e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800914e:	2301      	movs	r3, #1
 8009150:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	3301      	adds	r3, #1
 8009156:	60fb      	str	r3, [r7, #12]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2b01      	cmp	r3, #1
 800915c:	d9d2      	bls.n	8009104 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2b02      	cmp	r3, #2
 8009162:	d109      	bne.n	8009178 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d102      	bne.n	8009170 <chk_lock+0x80>
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b02      	cmp	r3, #2
 800916e:	d101      	bne.n	8009174 <chk_lock+0x84>
 8009170:	2300      	movs	r3, #0
 8009172:	e010      	b.n	8009196 <chk_lock+0xa6>
 8009174:	2312      	movs	r3, #18
 8009176:	e00e      	b.n	8009196 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d108      	bne.n	8009190 <chk_lock+0xa0>
 800917e:	4a09      	ldr	r2, [pc, #36]	; (80091a4 <chk_lock+0xb4>)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	011b      	lsls	r3, r3, #4
 8009184:	4413      	add	r3, r2
 8009186:	330c      	adds	r3, #12
 8009188:	881b      	ldrh	r3, [r3, #0]
 800918a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800918e:	d101      	bne.n	8009194 <chk_lock+0xa4>
 8009190:	2310      	movs	r3, #16
 8009192:	e000      	b.n	8009196 <chk_lock+0xa6>
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3714      	adds	r7, #20
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	20000590 	.word	0x20000590

080091a8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80091ae:	2300      	movs	r3, #0
 80091b0:	607b      	str	r3, [r7, #4]
 80091b2:	e002      	b.n	80091ba <enq_lock+0x12>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	3301      	adds	r3, #1
 80091b8:	607b      	str	r3, [r7, #4]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d806      	bhi.n	80091ce <enq_lock+0x26>
 80091c0:	4a09      	ldr	r2, [pc, #36]	; (80091e8 <enq_lock+0x40>)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	011b      	lsls	r3, r3, #4
 80091c6:	4413      	add	r3, r2
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d1f2      	bne.n	80091b4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	bf14      	ite	ne
 80091d4:	2301      	movne	r3, #1
 80091d6:	2300      	moveq	r3, #0
 80091d8:	b2db      	uxtb	r3, r3
}
 80091da:	4618      	mov	r0, r3
 80091dc:	370c      	adds	r7, #12
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	20000590 	.word	0x20000590

080091ec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80091f6:	2300      	movs	r3, #0
 80091f8:	60fb      	str	r3, [r7, #12]
 80091fa:	e01f      	b.n	800923c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80091fc:	4a41      	ldr	r2, [pc, #260]	; (8009304 <inc_lock+0x118>)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	011b      	lsls	r3, r3, #4
 8009202:	4413      	add	r3, r2
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	429a      	cmp	r2, r3
 800920c:	d113      	bne.n	8009236 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800920e:	4a3d      	ldr	r2, [pc, #244]	; (8009304 <inc_lock+0x118>)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	011b      	lsls	r3, r3, #4
 8009214:	4413      	add	r3, r2
 8009216:	3304      	adds	r3, #4
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800921e:	429a      	cmp	r2, r3
 8009220:	d109      	bne.n	8009236 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009222:	4a38      	ldr	r2, [pc, #224]	; (8009304 <inc_lock+0x118>)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	011b      	lsls	r3, r3, #4
 8009228:	4413      	add	r3, r2
 800922a:	3308      	adds	r3, #8
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009232:	429a      	cmp	r2, r3
 8009234:	d006      	beq.n	8009244 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	3301      	adds	r3, #1
 800923a:	60fb      	str	r3, [r7, #12]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d9dc      	bls.n	80091fc <inc_lock+0x10>
 8009242:	e000      	b.n	8009246 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009244:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2b02      	cmp	r3, #2
 800924a:	d132      	bne.n	80092b2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800924c:	2300      	movs	r3, #0
 800924e:	60fb      	str	r3, [r7, #12]
 8009250:	e002      	b.n	8009258 <inc_lock+0x6c>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	3301      	adds	r3, #1
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d806      	bhi.n	800926c <inc_lock+0x80>
 800925e:	4a29      	ldr	r2, [pc, #164]	; (8009304 <inc_lock+0x118>)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	011b      	lsls	r3, r3, #4
 8009264:	4413      	add	r3, r2
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1f2      	bne.n	8009252 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2b02      	cmp	r3, #2
 8009270:	d101      	bne.n	8009276 <inc_lock+0x8a>
 8009272:	2300      	movs	r3, #0
 8009274:	e040      	b.n	80092f8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	4922      	ldr	r1, [pc, #136]	; (8009304 <inc_lock+0x118>)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	011b      	lsls	r3, r3, #4
 8009280:	440b      	add	r3, r1
 8009282:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	689a      	ldr	r2, [r3, #8]
 8009288:	491e      	ldr	r1, [pc, #120]	; (8009304 <inc_lock+0x118>)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	011b      	lsls	r3, r3, #4
 800928e:	440b      	add	r3, r1
 8009290:	3304      	adds	r3, #4
 8009292:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	695a      	ldr	r2, [r3, #20]
 8009298:	491a      	ldr	r1, [pc, #104]	; (8009304 <inc_lock+0x118>)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	011b      	lsls	r3, r3, #4
 800929e:	440b      	add	r3, r1
 80092a0:	3308      	adds	r3, #8
 80092a2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80092a4:	4a17      	ldr	r2, [pc, #92]	; (8009304 <inc_lock+0x118>)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	011b      	lsls	r3, r3, #4
 80092aa:	4413      	add	r3, r2
 80092ac:	330c      	adds	r3, #12
 80092ae:	2200      	movs	r2, #0
 80092b0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d009      	beq.n	80092cc <inc_lock+0xe0>
 80092b8:	4a12      	ldr	r2, [pc, #72]	; (8009304 <inc_lock+0x118>)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	011b      	lsls	r3, r3, #4
 80092be:	4413      	add	r3, r2
 80092c0:	330c      	adds	r3, #12
 80092c2:	881b      	ldrh	r3, [r3, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d001      	beq.n	80092cc <inc_lock+0xe0>
 80092c8:	2300      	movs	r3, #0
 80092ca:	e015      	b.n	80092f8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d108      	bne.n	80092e4 <inc_lock+0xf8>
 80092d2:	4a0c      	ldr	r2, [pc, #48]	; (8009304 <inc_lock+0x118>)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	011b      	lsls	r3, r3, #4
 80092d8:	4413      	add	r3, r2
 80092da:	330c      	adds	r3, #12
 80092dc:	881b      	ldrh	r3, [r3, #0]
 80092de:	3301      	adds	r3, #1
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	e001      	b.n	80092e8 <inc_lock+0xfc>
 80092e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80092e8:	4906      	ldr	r1, [pc, #24]	; (8009304 <inc_lock+0x118>)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	011b      	lsls	r3, r3, #4
 80092ee:	440b      	add	r3, r1
 80092f0:	330c      	adds	r3, #12
 80092f2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	3301      	adds	r3, #1
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3714      	adds	r7, #20
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr
 8009304:	20000590 	.word	0x20000590

08009308 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	3b01      	subs	r3, #1
 8009314:	607b      	str	r3, [r7, #4]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2b01      	cmp	r3, #1
 800931a:	d825      	bhi.n	8009368 <dec_lock+0x60>
		n = Files[i].ctr;
 800931c:	4a17      	ldr	r2, [pc, #92]	; (800937c <dec_lock+0x74>)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	011b      	lsls	r3, r3, #4
 8009322:	4413      	add	r3, r2
 8009324:	330c      	adds	r3, #12
 8009326:	881b      	ldrh	r3, [r3, #0]
 8009328:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800932a:	89fb      	ldrh	r3, [r7, #14]
 800932c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009330:	d101      	bne.n	8009336 <dec_lock+0x2e>
 8009332:	2300      	movs	r3, #0
 8009334:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009336:	89fb      	ldrh	r3, [r7, #14]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d002      	beq.n	8009342 <dec_lock+0x3a>
 800933c:	89fb      	ldrh	r3, [r7, #14]
 800933e:	3b01      	subs	r3, #1
 8009340:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009342:	4a0e      	ldr	r2, [pc, #56]	; (800937c <dec_lock+0x74>)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	011b      	lsls	r3, r3, #4
 8009348:	4413      	add	r3, r2
 800934a:	330c      	adds	r3, #12
 800934c:	89fa      	ldrh	r2, [r7, #14]
 800934e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009350:	89fb      	ldrh	r3, [r7, #14]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d105      	bne.n	8009362 <dec_lock+0x5a>
 8009356:	4a09      	ldr	r2, [pc, #36]	; (800937c <dec_lock+0x74>)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	011b      	lsls	r3, r3, #4
 800935c:	4413      	add	r3, r2
 800935e:	2200      	movs	r2, #0
 8009360:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009362:	2300      	movs	r3, #0
 8009364:	737b      	strb	r3, [r7, #13]
 8009366:	e001      	b.n	800936c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009368:	2302      	movs	r3, #2
 800936a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800936c:	7b7b      	ldrb	r3, [r7, #13]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3714      	adds	r7, #20
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	20000590 	.word	0x20000590

08009380 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009388:	2300      	movs	r3, #0
 800938a:	60fb      	str	r3, [r7, #12]
 800938c:	e010      	b.n	80093b0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800938e:	4a0d      	ldr	r2, [pc, #52]	; (80093c4 <clear_lock+0x44>)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	011b      	lsls	r3, r3, #4
 8009394:	4413      	add	r3, r2
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	429a      	cmp	r2, r3
 800939c:	d105      	bne.n	80093aa <clear_lock+0x2a>
 800939e:	4a09      	ldr	r2, [pc, #36]	; (80093c4 <clear_lock+0x44>)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	011b      	lsls	r3, r3, #4
 80093a4:	4413      	add	r3, r2
 80093a6:	2200      	movs	r2, #0
 80093a8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	3301      	adds	r3, #1
 80093ae:	60fb      	str	r3, [r7, #12]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d9eb      	bls.n	800938e <clear_lock+0xe>
	}
}
 80093b6:	bf00      	nop
 80093b8:	bf00      	nop
 80093ba:	3714      	adds	r7, #20
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr
 80093c4:	20000590 	.word	0x20000590

080093c8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80093d0:	2300      	movs	r3, #0
 80093d2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	78db      	ldrb	r3, [r3, #3]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d034      	beq.n	8009446 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	7858      	ldrb	r0, [r3, #1]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093ec:	2301      	movs	r3, #1
 80093ee:	697a      	ldr	r2, [r7, #20]
 80093f0:	f7ff fd40 	bl	8008e74 <disk_write>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d002      	beq.n	8009400 <sync_window+0x38>
			res = FR_DISK_ERR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	73fb      	strb	r3, [r7, #15]
 80093fe:	e022      	b.n	8009446 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a1b      	ldr	r3, [r3, #32]
 800940a:	697a      	ldr	r2, [r7, #20]
 800940c:	1ad2      	subs	r2, r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	699b      	ldr	r3, [r3, #24]
 8009412:	429a      	cmp	r2, r3
 8009414:	d217      	bcs.n	8009446 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	789b      	ldrb	r3, [r3, #2]
 800941a:	613b      	str	r3, [r7, #16]
 800941c:	e010      	b.n	8009440 <sync_window+0x78>
					wsect += fs->fsize;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	699b      	ldr	r3, [r3, #24]
 8009422:	697a      	ldr	r2, [r7, #20]
 8009424:	4413      	add	r3, r2
 8009426:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	7858      	ldrb	r0, [r3, #1]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009432:	2301      	movs	r3, #1
 8009434:	697a      	ldr	r2, [r7, #20]
 8009436:	f7ff fd1d 	bl	8008e74 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	3b01      	subs	r3, #1
 800943e:	613b      	str	r3, [r7, #16]
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	2b01      	cmp	r3, #1
 8009444:	d8eb      	bhi.n	800941e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009446:	7bfb      	ldrb	r3, [r7, #15]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3718      	adds	r7, #24
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	429a      	cmp	r2, r3
 8009466:	d01b      	beq.n	80094a0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f7ff ffad 	bl	80093c8 <sync_window>
 800946e:	4603      	mov	r3, r0
 8009470:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009472:	7bfb      	ldrb	r3, [r7, #15]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d113      	bne.n	80094a0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	7858      	ldrb	r0, [r3, #1]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009482:	2301      	movs	r3, #1
 8009484:	683a      	ldr	r2, [r7, #0]
 8009486:	f7ff fcd5 	bl	8008e34 <disk_read>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d004      	beq.n	800949a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009490:	f04f 33ff 	mov.w	r3, #4294967295
 8009494:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009496:	2301      	movs	r3, #1
 8009498:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	683a      	ldr	r2, [r7, #0]
 800949e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
	...

080094ac <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7ff ff87 	bl	80093c8 <sync_window>
 80094ba:	4603      	mov	r3, r0
 80094bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80094be:	7bfb      	ldrb	r3, [r7, #15]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d158      	bne.n	8009576 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	2b03      	cmp	r3, #3
 80094ca:	d148      	bne.n	800955e <sync_fs+0xb2>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	791b      	ldrb	r3, [r3, #4]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d144      	bne.n	800955e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	3330      	adds	r3, #48	; 0x30
 80094d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094dc:	2100      	movs	r1, #0
 80094de:	4618      	mov	r0, r3
 80094e0:	f7ff fda9 	bl	8009036 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	3330      	adds	r3, #48	; 0x30
 80094e8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80094ec:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7ff fd38 	bl	8008f66 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	3330      	adds	r3, #48	; 0x30
 80094fa:	4921      	ldr	r1, [pc, #132]	; (8009580 <sync_fs+0xd4>)
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7ff fd4d 	bl	8008f9c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	3330      	adds	r3, #48	; 0x30
 8009506:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800950a:	491e      	ldr	r1, [pc, #120]	; (8009584 <sync_fs+0xd8>)
 800950c:	4618      	mov	r0, r3
 800950e:	f7ff fd45 	bl	8008f9c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	3330      	adds	r3, #48	; 0x30
 8009516:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	4619      	mov	r1, r3
 8009520:	4610      	mov	r0, r2
 8009522:	f7ff fd3b 	bl	8008f9c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	3330      	adds	r3, #48	; 0x30
 800952a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	4619      	mov	r1, r3
 8009534:	4610      	mov	r0, r2
 8009536:	f7ff fd31 	bl	8008f9c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	1c5a      	adds	r2, r3, #1
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	7858      	ldrb	r0, [r3, #1]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009552:	2301      	movs	r3, #1
 8009554:	f7ff fc8e 	bl	8008e74 <disk_write>
			fs->fsi_flag = 0;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	785b      	ldrb	r3, [r3, #1]
 8009562:	2200      	movs	r2, #0
 8009564:	2100      	movs	r1, #0
 8009566:	4618      	mov	r0, r3
 8009568:	f7ff fca4 	bl	8008eb4 <disk_ioctl>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d001      	beq.n	8009576 <sync_fs+0xca>
 8009572:	2301      	movs	r3, #1
 8009574:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009576:	7bfb      	ldrb	r3, [r7, #15]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3710      	adds	r7, #16
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	41615252 	.word	0x41615252
 8009584:	61417272 	.word	0x61417272

08009588 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	3b02      	subs	r3, #2
 8009596:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	695b      	ldr	r3, [r3, #20]
 800959c:	3b02      	subs	r3, #2
 800959e:	683a      	ldr	r2, [r7, #0]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d301      	bcc.n	80095a8 <clust2sect+0x20>
 80095a4:	2300      	movs	r3, #0
 80095a6:	e008      	b.n	80095ba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	895b      	ldrh	r3, [r3, #10]
 80095ac:	461a      	mov	r2, r3
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	fb03 f202 	mul.w	r2, r3, r2
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b8:	4413      	add	r3, r2
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	370c      	adds	r7, #12
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr

080095c6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b086      	sub	sp, #24
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d904      	bls.n	80095e6 <get_fat+0x20>
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	683a      	ldr	r2, [r7, #0]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d302      	bcc.n	80095ec <get_fat+0x26>
		val = 1;	/* Internal error */
 80095e6:	2301      	movs	r3, #1
 80095e8:	617b      	str	r3, [r7, #20]
 80095ea:	e08f      	b.n	800970c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80095ec:	f04f 33ff 	mov.w	r3, #4294967295
 80095f0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	d062      	beq.n	80096c0 <get_fat+0xfa>
 80095fa:	2b03      	cmp	r3, #3
 80095fc:	dc7c      	bgt.n	80096f8 <get_fat+0x132>
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d002      	beq.n	8009608 <get_fat+0x42>
 8009602:	2b02      	cmp	r3, #2
 8009604:	d042      	beq.n	800968c <get_fat+0xc6>
 8009606:	e077      	b.n	80096f8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	60fb      	str	r3, [r7, #12]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	085b      	lsrs	r3, r3, #1
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	4413      	add	r3, r2
 8009614:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	6a1a      	ldr	r2, [r3, #32]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	0a5b      	lsrs	r3, r3, #9
 800961e:	4413      	add	r3, r2
 8009620:	4619      	mov	r1, r3
 8009622:	6938      	ldr	r0, [r7, #16]
 8009624:	f7ff ff14 	bl	8009450 <move_window>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d167      	bne.n	80096fe <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	1c5a      	adds	r2, r3, #1
 8009632:	60fa      	str	r2, [r7, #12]
 8009634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009638:	693a      	ldr	r2, [r7, #16]
 800963a:	4413      	add	r3, r2
 800963c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009640:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	6a1a      	ldr	r2, [r3, #32]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	0a5b      	lsrs	r3, r3, #9
 800964a:	4413      	add	r3, r2
 800964c:	4619      	mov	r1, r3
 800964e:	6938      	ldr	r0, [r7, #16]
 8009650:	f7ff fefe 	bl	8009450 <move_window>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d153      	bne.n	8009702 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009660:	693a      	ldr	r2, [r7, #16]
 8009662:	4413      	add	r3, r2
 8009664:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009668:	021b      	lsls	r3, r3, #8
 800966a:	461a      	mov	r2, r3
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	4313      	orrs	r3, r2
 8009670:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	f003 0301 	and.w	r3, r3, #1
 8009678:	2b00      	cmp	r3, #0
 800967a:	d002      	beq.n	8009682 <get_fat+0xbc>
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	091b      	lsrs	r3, r3, #4
 8009680:	e002      	b.n	8009688 <get_fat+0xc2>
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009688:	617b      	str	r3, [r7, #20]
			break;
 800968a:	e03f      	b.n	800970c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	6a1a      	ldr	r2, [r3, #32]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	0a1b      	lsrs	r3, r3, #8
 8009694:	4413      	add	r3, r2
 8009696:	4619      	mov	r1, r3
 8009698:	6938      	ldr	r0, [r7, #16]
 800969a:	f7ff fed9 	bl	8009450 <move_window>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d130      	bne.n	8009706 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	005b      	lsls	r3, r3, #1
 80096ae:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80096b2:	4413      	add	r3, r2
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7ff fc1b 	bl	8008ef0 <ld_word>
 80096ba:	4603      	mov	r3, r0
 80096bc:	617b      	str	r3, [r7, #20]
			break;
 80096be:	e025      	b.n	800970c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	6a1a      	ldr	r2, [r3, #32]
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	09db      	lsrs	r3, r3, #7
 80096c8:	4413      	add	r3, r2
 80096ca:	4619      	mov	r1, r3
 80096cc:	6938      	ldr	r0, [r7, #16]
 80096ce:	f7ff febf 	bl	8009450 <move_window>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d118      	bne.n	800970a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80096e6:	4413      	add	r3, r2
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7ff fc19 	bl	8008f20 <ld_dword>
 80096ee:	4603      	mov	r3, r0
 80096f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80096f4:	617b      	str	r3, [r7, #20]
			break;
 80096f6:	e009      	b.n	800970c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80096f8:	2301      	movs	r3, #1
 80096fa:	617b      	str	r3, [r7, #20]
 80096fc:	e006      	b.n	800970c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80096fe:	bf00      	nop
 8009700:	e004      	b.n	800970c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009702:	bf00      	nop
 8009704:	e002      	b.n	800970c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009706:	bf00      	nop
 8009708:	e000      	b.n	800970c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800970a:	bf00      	nop
		}
	}

	return val;
 800970c:	697b      	ldr	r3, [r7, #20]
}
 800970e:	4618      	mov	r0, r3
 8009710:	3718      	adds	r7, #24
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009716:	b590      	push	{r4, r7, lr}
 8009718:	b089      	sub	sp, #36	; 0x24
 800971a:	af00      	add	r7, sp, #0
 800971c:	60f8      	str	r0, [r7, #12]
 800971e:	60b9      	str	r1, [r7, #8]
 8009720:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009722:	2302      	movs	r3, #2
 8009724:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	2b01      	cmp	r3, #1
 800972a:	f240 80d2 	bls.w	80098d2 <put_fat+0x1bc>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	695b      	ldr	r3, [r3, #20]
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	429a      	cmp	r2, r3
 8009736:	f080 80cc 	bcs.w	80098d2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	2b03      	cmp	r3, #3
 8009740:	f000 8096 	beq.w	8009870 <put_fat+0x15a>
 8009744:	2b03      	cmp	r3, #3
 8009746:	f300 80cd 	bgt.w	80098e4 <put_fat+0x1ce>
 800974a:	2b01      	cmp	r3, #1
 800974c:	d002      	beq.n	8009754 <put_fat+0x3e>
 800974e:	2b02      	cmp	r3, #2
 8009750:	d06e      	beq.n	8009830 <put_fat+0x11a>
 8009752:	e0c7      	b.n	80098e4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	61bb      	str	r3, [r7, #24]
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	085b      	lsrs	r3, r3, #1
 800975c:	69ba      	ldr	r2, [r7, #24]
 800975e:	4413      	add	r3, r2
 8009760:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6a1a      	ldr	r2, [r3, #32]
 8009766:	69bb      	ldr	r3, [r7, #24]
 8009768:	0a5b      	lsrs	r3, r3, #9
 800976a:	4413      	add	r3, r2
 800976c:	4619      	mov	r1, r3
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f7ff fe6e 	bl	8009450 <move_window>
 8009774:	4603      	mov	r3, r0
 8009776:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009778:	7ffb      	ldrb	r3, [r7, #31]
 800977a:	2b00      	cmp	r3, #0
 800977c:	f040 80ab 	bne.w	80098d6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	1c59      	adds	r1, r3, #1
 800978a:	61b9      	str	r1, [r7, #24]
 800978c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009790:	4413      	add	r3, r2
 8009792:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	f003 0301 	and.w	r3, r3, #1
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00d      	beq.n	80097ba <put_fat+0xa4>
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	b25b      	sxtb	r3, r3
 80097a4:	f003 030f 	and.w	r3, r3, #15
 80097a8:	b25a      	sxtb	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	011b      	lsls	r3, r3, #4
 80097b0:	b25b      	sxtb	r3, r3
 80097b2:	4313      	orrs	r3, r2
 80097b4:	b25b      	sxtb	r3, r3
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	e001      	b.n	80097be <put_fat+0xa8>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	697a      	ldr	r2, [r7, #20]
 80097c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2201      	movs	r2, #1
 80097c6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6a1a      	ldr	r2, [r3, #32]
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	0a5b      	lsrs	r3, r3, #9
 80097d0:	4413      	add	r3, r2
 80097d2:	4619      	mov	r1, r3
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f7ff fe3b 	bl	8009450 <move_window>
 80097da:	4603      	mov	r3, r0
 80097dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80097de:	7ffb      	ldrb	r3, [r7, #31]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d17a      	bne.n	80098da <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097f0:	4413      	add	r3, r2
 80097f2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	f003 0301 	and.w	r3, r3, #1
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d003      	beq.n	8009806 <put_fat+0xf0>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	091b      	lsrs	r3, r3, #4
 8009802:	b2db      	uxtb	r3, r3
 8009804:	e00e      	b.n	8009824 <put_fat+0x10e>
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	b25b      	sxtb	r3, r3
 800980c:	f023 030f 	bic.w	r3, r3, #15
 8009810:	b25a      	sxtb	r2, r3
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	0a1b      	lsrs	r3, r3, #8
 8009816:	b25b      	sxtb	r3, r3
 8009818:	f003 030f 	and.w	r3, r3, #15
 800981c:	b25b      	sxtb	r3, r3
 800981e:	4313      	orrs	r3, r2
 8009820:	b25b      	sxtb	r3, r3
 8009822:	b2db      	uxtb	r3, r3
 8009824:	697a      	ldr	r2, [r7, #20]
 8009826:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2201      	movs	r2, #1
 800982c:	70da      	strb	r2, [r3, #3]
			break;
 800982e:	e059      	b.n	80098e4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6a1a      	ldr	r2, [r3, #32]
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	0a1b      	lsrs	r3, r3, #8
 8009838:	4413      	add	r3, r2
 800983a:	4619      	mov	r1, r3
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f7ff fe07 	bl	8009450 <move_window>
 8009842:	4603      	mov	r3, r0
 8009844:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009846:	7ffb      	ldrb	r3, [r7, #31]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d148      	bne.n	80098de <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	005b      	lsls	r3, r3, #1
 8009856:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800985a:	4413      	add	r3, r2
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	b292      	uxth	r2, r2
 8009860:	4611      	mov	r1, r2
 8009862:	4618      	mov	r0, r3
 8009864:	f7ff fb7f 	bl	8008f66 <st_word>
			fs->wflag = 1;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2201      	movs	r2, #1
 800986c:	70da      	strb	r2, [r3, #3]
			break;
 800986e:	e039      	b.n	80098e4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6a1a      	ldr	r2, [r3, #32]
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	09db      	lsrs	r3, r3, #7
 8009878:	4413      	add	r3, r2
 800987a:	4619      	mov	r1, r3
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	f7ff fde7 	bl	8009450 <move_window>
 8009882:	4603      	mov	r3, r0
 8009884:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009886:	7ffb      	ldrb	r3, [r7, #31]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d12a      	bne.n	80098e2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80098a0:	4413      	add	r3, r2
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7ff fb3c 	bl	8008f20 <ld_dword>
 80098a8:	4603      	mov	r3, r0
 80098aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80098ae:	4323      	orrs	r3, r4
 80098b0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80098c0:	4413      	add	r3, r2
 80098c2:	6879      	ldr	r1, [r7, #4]
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7ff fb69 	bl	8008f9c <st_dword>
			fs->wflag = 1;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2201      	movs	r2, #1
 80098ce:	70da      	strb	r2, [r3, #3]
			break;
 80098d0:	e008      	b.n	80098e4 <put_fat+0x1ce>
		}
	}
 80098d2:	bf00      	nop
 80098d4:	e006      	b.n	80098e4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80098d6:	bf00      	nop
 80098d8:	e004      	b.n	80098e4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80098da:	bf00      	nop
 80098dc:	e002      	b.n	80098e4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80098de:	bf00      	nop
 80098e0:	e000      	b.n	80098e4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80098e2:	bf00      	nop
	return res;
 80098e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3724      	adds	r7, #36	; 0x24
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd90      	pop	{r4, r7, pc}

080098ee <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b088      	sub	sp, #32
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	60f8      	str	r0, [r7, #12]
 80098f6:	60b9      	str	r1, [r7, #8]
 80098f8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80098fa:	2300      	movs	r3, #0
 80098fc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d904      	bls.n	8009914 <remove_chain+0x26>
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	429a      	cmp	r2, r3
 8009912:	d301      	bcc.n	8009918 <remove_chain+0x2a>
 8009914:	2302      	movs	r3, #2
 8009916:	e04b      	b.n	80099b0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00c      	beq.n	8009938 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800991e:	f04f 32ff 	mov.w	r2, #4294967295
 8009922:	6879      	ldr	r1, [r7, #4]
 8009924:	69b8      	ldr	r0, [r7, #24]
 8009926:	f7ff fef6 	bl	8009716 <put_fat>
 800992a:	4603      	mov	r3, r0
 800992c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800992e:	7ffb      	ldrb	r3, [r7, #31]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d001      	beq.n	8009938 <remove_chain+0x4a>
 8009934:	7ffb      	ldrb	r3, [r7, #31]
 8009936:	e03b      	b.n	80099b0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009938:	68b9      	ldr	r1, [r7, #8]
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f7ff fe43 	bl	80095c6 <get_fat>
 8009940:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d031      	beq.n	80099ac <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	2b01      	cmp	r3, #1
 800994c:	d101      	bne.n	8009952 <remove_chain+0x64>
 800994e:	2302      	movs	r3, #2
 8009950:	e02e      	b.n	80099b0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009958:	d101      	bne.n	800995e <remove_chain+0x70>
 800995a:	2301      	movs	r3, #1
 800995c:	e028      	b.n	80099b0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800995e:	2200      	movs	r2, #0
 8009960:	68b9      	ldr	r1, [r7, #8]
 8009962:	69b8      	ldr	r0, [r7, #24]
 8009964:	f7ff fed7 	bl	8009716 <put_fat>
 8009968:	4603      	mov	r3, r0
 800996a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800996c:	7ffb      	ldrb	r3, [r7, #31]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d001      	beq.n	8009976 <remove_chain+0x88>
 8009972:	7ffb      	ldrb	r3, [r7, #31]
 8009974:	e01c      	b.n	80099b0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	691a      	ldr	r2, [r3, #16]
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	695b      	ldr	r3, [r3, #20]
 800997e:	3b02      	subs	r3, #2
 8009980:	429a      	cmp	r2, r3
 8009982:	d20b      	bcs.n	800999c <remove_chain+0xae>
			fs->free_clst++;
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	1c5a      	adds	r2, r3, #1
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	791b      	ldrb	r3, [r3, #4]
 8009992:	f043 0301 	orr.w	r3, r3, #1
 8009996:	b2da      	uxtb	r2, r3
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	695b      	ldr	r3, [r3, #20]
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d3c6      	bcc.n	8009938 <remove_chain+0x4a>
 80099aa:	e000      	b.n	80099ae <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80099ac:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80099ae:	2300      	movs	r3, #0
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3720      	adds	r7, #32
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b088      	sub	sp, #32
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d10d      	bne.n	80099ea <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d004      	beq.n	80099e4 <create_chain+0x2c>
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	695b      	ldr	r3, [r3, #20]
 80099de:	69ba      	ldr	r2, [r7, #24]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d31b      	bcc.n	8009a1c <create_chain+0x64>
 80099e4:	2301      	movs	r3, #1
 80099e6:	61bb      	str	r3, [r7, #24]
 80099e8:	e018      	b.n	8009a1c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80099ea:	6839      	ldr	r1, [r7, #0]
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f7ff fdea 	bl	80095c6 <get_fat>
 80099f2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d801      	bhi.n	80099fe <create_chain+0x46>
 80099fa:	2301      	movs	r3, #1
 80099fc:	e070      	b.n	8009ae0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a04:	d101      	bne.n	8009a0a <create_chain+0x52>
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	e06a      	b.n	8009ae0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	695b      	ldr	r3, [r3, #20]
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d201      	bcs.n	8009a18 <create_chain+0x60>
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	e063      	b.n	8009ae0 <create_chain+0x128>
		scl = clst;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	3301      	adds	r3, #1
 8009a24:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	69fa      	ldr	r2, [r7, #28]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d307      	bcc.n	8009a40 <create_chain+0x88>
				ncl = 2;
 8009a30:	2302      	movs	r3, #2
 8009a32:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009a34:	69fa      	ldr	r2, [r7, #28]
 8009a36:	69bb      	ldr	r3, [r7, #24]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d901      	bls.n	8009a40 <create_chain+0x88>
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	e04f      	b.n	8009ae0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009a40:	69f9      	ldr	r1, [r7, #28]
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f7ff fdbf 	bl	80095c6 <get_fat>
 8009a48:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d00e      	beq.n	8009a6e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d003      	beq.n	8009a5e <create_chain+0xa6>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a5c:	d101      	bne.n	8009a62 <create_chain+0xaa>
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	e03e      	b.n	8009ae0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009a62:	69fa      	ldr	r2, [r7, #28]
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d1da      	bne.n	8009a20 <create_chain+0x68>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	e038      	b.n	8009ae0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009a6e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009a70:	f04f 32ff 	mov.w	r2, #4294967295
 8009a74:	69f9      	ldr	r1, [r7, #28]
 8009a76:	6938      	ldr	r0, [r7, #16]
 8009a78:	f7ff fe4d 	bl	8009716 <put_fat>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009a80:	7dfb      	ldrb	r3, [r7, #23]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d109      	bne.n	8009a9a <create_chain+0xe2>
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d006      	beq.n	8009a9a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009a8c:	69fa      	ldr	r2, [r7, #28]
 8009a8e:	6839      	ldr	r1, [r7, #0]
 8009a90:	6938      	ldr	r0, [r7, #16]
 8009a92:	f7ff fe40 	bl	8009716 <put_fat>
 8009a96:	4603      	mov	r3, r0
 8009a98:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009a9a:	7dfb      	ldrb	r3, [r7, #23]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d116      	bne.n	8009ace <create_chain+0x116>
		fs->last_clst = ncl;
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	69fa      	ldr	r2, [r7, #28]
 8009aa4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	691a      	ldr	r2, [r3, #16]
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	695b      	ldr	r3, [r3, #20]
 8009aae:	3b02      	subs	r3, #2
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d804      	bhi.n	8009abe <create_chain+0x106>
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	691b      	ldr	r3, [r3, #16]
 8009ab8:	1e5a      	subs	r2, r3, #1
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	791b      	ldrb	r3, [r3, #4]
 8009ac2:	f043 0301 	orr.w	r3, r3, #1
 8009ac6:	b2da      	uxtb	r2, r3
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	711a      	strb	r2, [r3, #4]
 8009acc:	e007      	b.n	8009ade <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009ace:	7dfb      	ldrb	r3, [r7, #23]
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d102      	bne.n	8009ada <create_chain+0x122>
 8009ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ad8:	e000      	b.n	8009adc <create_chain+0x124>
 8009ada:	2301      	movs	r3, #1
 8009adc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009ade:	69fb      	ldr	r3, [r7, #28]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3720      	adds	r7, #32
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b087      	sub	sp, #28
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afc:	3304      	adds	r3, #4
 8009afe:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	0a5b      	lsrs	r3, r3, #9
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	8952      	ldrh	r2, [r2, #10]
 8009b08:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b0c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	1d1a      	adds	r2, r3, #4
 8009b12:	613a      	str	r2, [r7, #16]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d101      	bne.n	8009b22 <clmt_clust+0x3a>
 8009b1e:	2300      	movs	r3, #0
 8009b20:	e010      	b.n	8009b44 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009b22:	697a      	ldr	r2, [r7, #20]
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d307      	bcc.n	8009b3a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009b2a:	697a      	ldr	r2, [r7, #20]
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	1ad3      	subs	r3, r2, r3
 8009b30:	617b      	str	r3, [r7, #20]
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	3304      	adds	r3, #4
 8009b36:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009b38:	e7e9      	b.n	8009b0e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009b3a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	4413      	add	r3, r2
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	371c      	adds	r7, #28
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b086      	sub	sp, #24
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b66:	d204      	bcs.n	8009b72 <dir_sdi+0x22>
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	f003 031f 	and.w	r3, r3, #31
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d001      	beq.n	8009b76 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009b72:	2302      	movs	r3, #2
 8009b74:	e063      	b.n	8009c3e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	683a      	ldr	r2, [r7, #0]
 8009b7a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d106      	bne.n	8009b96 <dir_sdi+0x46>
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	2b02      	cmp	r3, #2
 8009b8e:	d902      	bls.n	8009b96 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b94:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d10c      	bne.n	8009bb6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	095b      	lsrs	r3, r3, #5
 8009ba0:	693a      	ldr	r2, [r7, #16]
 8009ba2:	8912      	ldrh	r2, [r2, #8]
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d301      	bcc.n	8009bac <dir_sdi+0x5c>
 8009ba8:	2302      	movs	r3, #2
 8009baa:	e048      	b.n	8009c3e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	61da      	str	r2, [r3, #28]
 8009bb4:	e029      	b.n	8009c0a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	895b      	ldrh	r3, [r3, #10]
 8009bba:	025b      	lsls	r3, r3, #9
 8009bbc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009bbe:	e019      	b.n	8009bf4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6979      	ldr	r1, [r7, #20]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7ff fcfe 	bl	80095c6 <get_fat>
 8009bca:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd2:	d101      	bne.n	8009bd8 <dir_sdi+0x88>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e032      	b.n	8009c3e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d904      	bls.n	8009be8 <dir_sdi+0x98>
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	695b      	ldr	r3, [r3, #20]
 8009be2:	697a      	ldr	r2, [r7, #20]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d301      	bcc.n	8009bec <dir_sdi+0x9c>
 8009be8:	2302      	movs	r3, #2
 8009bea:	e028      	b.n	8009c3e <dir_sdi+0xee>
			ofs -= csz;
 8009bec:	683a      	ldr	r2, [r7, #0]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	1ad3      	subs	r3, r2, r3
 8009bf2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d2e1      	bcs.n	8009bc0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009bfc:	6979      	ldr	r1, [r7, #20]
 8009bfe:	6938      	ldr	r0, [r7, #16]
 8009c00:	f7ff fcc2 	bl	8009588 <clust2sect>
 8009c04:	4602      	mov	r2, r0
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	697a      	ldr	r2, [r7, #20]
 8009c0e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	69db      	ldr	r3, [r3, #28]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d101      	bne.n	8009c1c <dir_sdi+0xcc>
 8009c18:	2302      	movs	r3, #2
 8009c1a:	e010      	b.n	8009c3e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	69da      	ldr	r2, [r3, #28]
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	0a5b      	lsrs	r3, r3, #9
 8009c24:	441a      	add	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c36:	441a      	add	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3718      	adds	r7, #24
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b086      	sub	sp, #24
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
 8009c4e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	695b      	ldr	r3, [r3, #20]
 8009c5a:	3320      	adds	r3, #32
 8009c5c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	69db      	ldr	r3, [r3, #28]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d003      	beq.n	8009c6e <dir_next+0x28>
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c6c:	d301      	bcc.n	8009c72 <dir_next+0x2c>
 8009c6e:	2304      	movs	r3, #4
 8009c70:	e0aa      	b.n	8009dc8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	f040 8098 	bne.w	8009dae <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	69db      	ldr	r3, [r3, #28]
 8009c82:	1c5a      	adds	r2, r3, #1
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	699b      	ldr	r3, [r3, #24]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d10b      	bne.n	8009ca8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	095b      	lsrs	r3, r3, #5
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	8912      	ldrh	r2, [r2, #8]
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	f0c0 8088 	bcc.w	8009dae <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	61da      	str	r2, [r3, #28]
 8009ca4:	2304      	movs	r3, #4
 8009ca6:	e08f      	b.n	8009dc8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	0a5b      	lsrs	r3, r3, #9
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	8952      	ldrh	r2, [r2, #10]
 8009cb0:	3a01      	subs	r2, #1
 8009cb2:	4013      	ands	r3, r2
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d17a      	bne.n	8009dae <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	699b      	ldr	r3, [r3, #24]
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	4610      	mov	r0, r2
 8009cc2:	f7ff fc80 	bl	80095c6 <get_fat>
 8009cc6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d801      	bhi.n	8009cd2 <dir_next+0x8c>
 8009cce:	2302      	movs	r3, #2
 8009cd0:	e07a      	b.n	8009dc8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd8:	d101      	bne.n	8009cde <dir_next+0x98>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e074      	b.n	8009dc8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	695b      	ldr	r3, [r3, #20]
 8009ce2:	697a      	ldr	r2, [r7, #20]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d358      	bcc.n	8009d9a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d104      	bne.n	8009cf8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	61da      	str	r2, [r3, #28]
 8009cf4:	2304      	movs	r3, #4
 8009cf6:	e067      	b.n	8009dc8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	4619      	mov	r1, r3
 8009d00:	4610      	mov	r0, r2
 8009d02:	f7ff fe59 	bl	80099b8 <create_chain>
 8009d06:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d101      	bne.n	8009d12 <dir_next+0xcc>
 8009d0e:	2307      	movs	r3, #7
 8009d10:	e05a      	b.n	8009dc8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d101      	bne.n	8009d1c <dir_next+0xd6>
 8009d18:	2302      	movs	r3, #2
 8009d1a:	e055      	b.n	8009dc8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d22:	d101      	bne.n	8009d28 <dir_next+0xe2>
 8009d24:	2301      	movs	r3, #1
 8009d26:	e04f      	b.n	8009dc8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f7ff fb4d 	bl	80093c8 <sync_window>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d001      	beq.n	8009d38 <dir_next+0xf2>
 8009d34:	2301      	movs	r3, #1
 8009d36:	e047      	b.n	8009dc8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	3330      	adds	r3, #48	; 0x30
 8009d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d40:	2100      	movs	r1, #0
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7ff f977 	bl	8009036 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009d48:	2300      	movs	r3, #0
 8009d4a:	613b      	str	r3, [r7, #16]
 8009d4c:	6979      	ldr	r1, [r7, #20]
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f7ff fc1a 	bl	8009588 <clust2sect>
 8009d54:	4602      	mov	r2, r0
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	62da      	str	r2, [r3, #44]	; 0x2c
 8009d5a:	e012      	b.n	8009d82 <dir_next+0x13c>
						fs->wflag = 1;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009d62:	68f8      	ldr	r0, [r7, #12]
 8009d64:	f7ff fb30 	bl	80093c8 <sync_window>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d001      	beq.n	8009d72 <dir_next+0x12c>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e02a      	b.n	8009dc8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	3301      	adds	r3, #1
 8009d76:	613b      	str	r3, [r7, #16]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7c:	1c5a      	adds	r2, r3, #1
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	62da      	str	r2, [r3, #44]	; 0x2c
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	895b      	ldrh	r3, [r3, #10]
 8009d86:	461a      	mov	r2, r3
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d3e6      	bcc.n	8009d5c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	1ad2      	subs	r2, r2, r3
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	697a      	ldr	r2, [r7, #20]
 8009d9e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009da0:	6979      	ldr	r1, [r7, #20]
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f7ff fbf0 	bl	8009588 <clust2sect>
 8009da8:	4602      	mov	r2, r0
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	68ba      	ldr	r2, [r7, #8]
 8009db2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dc0:	441a      	add	r2, r3
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3718      	adds	r7, #24
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b086      	sub	sp, #24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009de0:	2100      	movs	r1, #0
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f7ff feb4 	bl	8009b50 <dir_sdi>
 8009de8:	4603      	mov	r3, r0
 8009dea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009dec:	7dfb      	ldrb	r3, [r7, #23]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d12b      	bne.n	8009e4a <dir_alloc+0x7a>
		n = 0;
 8009df2:	2300      	movs	r3, #0
 8009df4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	69db      	ldr	r3, [r3, #28]
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	f7ff fb27 	bl	8009450 <move_window>
 8009e02:	4603      	mov	r3, r0
 8009e04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009e06:	7dfb      	ldrb	r3, [r7, #23]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d11d      	bne.n	8009e48 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6a1b      	ldr	r3, [r3, #32]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	2be5      	cmp	r3, #229	; 0xe5
 8009e14:	d004      	beq.n	8009e20 <dir_alloc+0x50>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a1b      	ldr	r3, [r3, #32]
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d107      	bne.n	8009e30 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	3301      	adds	r3, #1
 8009e24:	613b      	str	r3, [r7, #16]
 8009e26:	693a      	ldr	r2, [r7, #16]
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d102      	bne.n	8009e34 <dir_alloc+0x64>
 8009e2e:	e00c      	b.n	8009e4a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009e30:	2300      	movs	r3, #0
 8009e32:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009e34:	2101      	movs	r1, #1
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f7ff ff05 	bl	8009c46 <dir_next>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009e40:	7dfb      	ldrb	r3, [r7, #23]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d0d7      	beq.n	8009df6 <dir_alloc+0x26>
 8009e46:	e000      	b.n	8009e4a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009e48:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009e4a:	7dfb      	ldrb	r3, [r7, #23]
 8009e4c:	2b04      	cmp	r3, #4
 8009e4e:	d101      	bne.n	8009e54 <dir_alloc+0x84>
 8009e50:	2307      	movs	r3, #7
 8009e52:	75fb      	strb	r3, [r7, #23]
	return res;
 8009e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3718      	adds	r7, #24
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b084      	sub	sp, #16
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	331a      	adds	r3, #26
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7ff f83f 	bl	8008ef0 <ld_word>
 8009e72:	4603      	mov	r3, r0
 8009e74:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	2b03      	cmp	r3, #3
 8009e7c:	d109      	bne.n	8009e92 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	3314      	adds	r3, #20
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7ff f834 	bl	8008ef0 <ld_word>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	041b      	lsls	r3, r3, #16
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009e92:	68fb      	ldr	r3, [r7, #12]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3710      	adds	r7, #16
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	331a      	adds	r3, #26
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	b292      	uxth	r2, r2
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7ff f857 	bl	8008f66 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	2b03      	cmp	r3, #3
 8009ebe:	d109      	bne.n	8009ed4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	f103 0214 	add.w	r2, r3, #20
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	0c1b      	lsrs	r3, r3, #16
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	4619      	mov	r1, r3
 8009ece:	4610      	mov	r0, r2
 8009ed0:	f7ff f849 	bl	8008f66 <st_word>
	}
}
 8009ed4:	bf00      	nop
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b086      	sub	sp, #24
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009eea:	2100      	movs	r1, #0
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f7ff fe2f 	bl	8009b50 <dir_sdi>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009ef6:	7dfb      	ldrb	r3, [r7, #23]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d001      	beq.n	8009f00 <dir_find+0x24>
 8009efc:	7dfb      	ldrb	r3, [r7, #23]
 8009efe:	e03e      	b.n	8009f7e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	69db      	ldr	r3, [r3, #28]
 8009f04:	4619      	mov	r1, r3
 8009f06:	6938      	ldr	r0, [r7, #16]
 8009f08:	f7ff faa2 	bl	8009450 <move_window>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009f10:	7dfb      	ldrb	r3, [r7, #23]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d12f      	bne.n	8009f76 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a1b      	ldr	r3, [r3, #32]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009f1e:	7bfb      	ldrb	r3, [r7, #15]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d102      	bne.n	8009f2a <dir_find+0x4e>
 8009f24:	2304      	movs	r3, #4
 8009f26:	75fb      	strb	r3, [r7, #23]
 8009f28:	e028      	b.n	8009f7c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a1b      	ldr	r3, [r3, #32]
 8009f2e:	330b      	adds	r3, #11
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f36:	b2da      	uxtb	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a1b      	ldr	r3, [r3, #32]
 8009f40:	330b      	adds	r3, #11
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	f003 0308 	and.w	r3, r3, #8
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d10a      	bne.n	8009f62 <dir_find+0x86>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6a18      	ldr	r0, [r3, #32]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	3324      	adds	r3, #36	; 0x24
 8009f54:	220b      	movs	r2, #11
 8009f56:	4619      	mov	r1, r3
 8009f58:	f7ff f888 	bl	800906c <mem_cmp>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d00b      	beq.n	8009f7a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009f62:	2100      	movs	r1, #0
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f7ff fe6e 	bl	8009c46 <dir_next>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009f6e:	7dfb      	ldrb	r3, [r7, #23]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d0c5      	beq.n	8009f00 <dir_find+0x24>
 8009f74:	e002      	b.n	8009f7c <dir_find+0xa0>
		if (res != FR_OK) break;
 8009f76:	bf00      	nop
 8009f78:	e000      	b.n	8009f7c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009f7a:	bf00      	nop

	return res;
 8009f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3718      	adds	r7, #24
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b084      	sub	sp, #16
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009f94:	2101      	movs	r1, #1
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f7ff ff1a 	bl	8009dd0 <dir_alloc>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009fa0:	7bfb      	ldrb	r3, [r7, #15]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d11c      	bne.n	8009fe0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	69db      	ldr	r3, [r3, #28]
 8009faa:	4619      	mov	r1, r3
 8009fac:	68b8      	ldr	r0, [r7, #8]
 8009fae:	f7ff fa4f 	bl	8009450 <move_window>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009fb6:	7bfb      	ldrb	r3, [r7, #15]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d111      	bne.n	8009fe0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6a1b      	ldr	r3, [r3, #32]
 8009fc0:	2220      	movs	r2, #32
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7ff f836 	bl	8009036 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a18      	ldr	r0, [r3, #32]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	3324      	adds	r3, #36	; 0x24
 8009fd2:	220b      	movs	r2, #11
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	f7ff f80d 	bl	8008ff4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	2201      	movs	r2, #1
 8009fde:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b084      	sub	sp, #16
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	69db      	ldr	r3, [r3, #28]
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	68f8      	ldr	r0, [r7, #12]
 800a000:	f7ff fa26 	bl	8009450 <move_window>
 800a004:	4603      	mov	r3, r0
 800a006:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800a008:	7afb      	ldrb	r3, [r7, #11]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d106      	bne.n	800a01c <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a1b      	ldr	r3, [r3, #32]
 800a012:	22e5      	movs	r2, #229	; 0xe5
 800a014:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2201      	movs	r2, #1
 800a01a:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800a01c:	7afb      	ldrb	r3, [r7, #11]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b086      	sub	sp, #24
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
 800a02e:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	2200      	movs	r2, #0
 800a034:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	69db      	ldr	r3, [r3, #28]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d04e      	beq.n	800a0dc <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800a03e:	2300      	movs	r3, #0
 800a040:	613b      	str	r3, [r7, #16]
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800a046:	e021      	b.n	800a08c <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6a1a      	ldr	r2, [r3, #32]
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	1c59      	adds	r1, r3, #1
 800a050:	6179      	str	r1, [r7, #20]
 800a052:	4413      	add	r3, r2
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800a058:	7bfb      	ldrb	r3, [r7, #15]
 800a05a:	2b20      	cmp	r3, #32
 800a05c:	d100      	bne.n	800a060 <get_fileinfo+0x3a>
 800a05e:	e015      	b.n	800a08c <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800a060:	7bfb      	ldrb	r3, [r7, #15]
 800a062:	2b05      	cmp	r3, #5
 800a064:	d101      	bne.n	800a06a <get_fileinfo+0x44>
 800a066:	23e5      	movs	r3, #229	; 0xe5
 800a068:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	2b09      	cmp	r3, #9
 800a06e:	d106      	bne.n	800a07e <get_fileinfo+0x58>
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	1c5a      	adds	r2, r3, #1
 800a074:	613a      	str	r2, [r7, #16]
 800a076:	683a      	ldr	r2, [r7, #0]
 800a078:	4413      	add	r3, r2
 800a07a:	222e      	movs	r2, #46	; 0x2e
 800a07c:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	1c5a      	adds	r2, r3, #1
 800a082:	613a      	str	r2, [r7, #16]
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	4413      	add	r3, r2
 800a088:	7bfa      	ldrb	r2, [r7, #15]
 800a08a:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	2b0a      	cmp	r3, #10
 800a090:	d9da      	bls.n	800a048 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800a092:	683a      	ldr	r2, [r7, #0]
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	4413      	add	r3, r2
 800a098:	3309      	adds	r3, #9
 800a09a:	2200      	movs	r2, #0
 800a09c:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6a1b      	ldr	r3, [r3, #32]
 800a0a2:	7ada      	ldrb	r2, [r3, #11]
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6a1b      	ldr	r3, [r3, #32]
 800a0ac:	331c      	adds	r3, #28
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fe ff36 	bl	8008f20 <ld_dword>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	3316      	adds	r3, #22
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7fe ff2d 	bl	8008f20 <ld_dword>
 800a0c6:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	b29a      	uxth	r2, r3
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	80da      	strh	r2, [r3, #6]
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	0c1b      	lsrs	r3, r3, #16
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	809a      	strh	r2, [r3, #4]
 800a0da:	e000      	b.n	800a0de <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a0dc:	bf00      	nop
}
 800a0de:	3718      	adds	r7, #24
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b088      	sub	sp, #32
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	60fb      	str	r3, [r7, #12]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	3324      	adds	r3, #36	; 0x24
 800a0f8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a0fa:	220b      	movs	r2, #11
 800a0fc:	2120      	movs	r1, #32
 800a0fe:	68b8      	ldr	r0, [r7, #8]
 800a100:	f7fe ff99 	bl	8009036 <mem_set>
	si = i = 0; ni = 8;
 800a104:	2300      	movs	r3, #0
 800a106:	613b      	str	r3, [r7, #16]
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	61fb      	str	r3, [r7, #28]
 800a10c:	2308      	movs	r3, #8
 800a10e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a110:	69fb      	ldr	r3, [r7, #28]
 800a112:	1c5a      	adds	r2, r3, #1
 800a114:	61fa      	str	r2, [r7, #28]
 800a116:	68fa      	ldr	r2, [r7, #12]
 800a118:	4413      	add	r3, r2
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a11e:	7efb      	ldrb	r3, [r7, #27]
 800a120:	2b20      	cmp	r3, #32
 800a122:	d94e      	bls.n	800a1c2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a124:	7efb      	ldrb	r3, [r7, #27]
 800a126:	2b2f      	cmp	r3, #47	; 0x2f
 800a128:	d006      	beq.n	800a138 <create_name+0x54>
 800a12a:	7efb      	ldrb	r3, [r7, #27]
 800a12c:	2b5c      	cmp	r3, #92	; 0x5c
 800a12e:	d110      	bne.n	800a152 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a130:	e002      	b.n	800a138 <create_name+0x54>
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	3301      	adds	r3, #1
 800a136:	61fb      	str	r3, [r7, #28]
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	4413      	add	r3, r2
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	2b2f      	cmp	r3, #47	; 0x2f
 800a142:	d0f6      	beq.n	800a132 <create_name+0x4e>
 800a144:	68fa      	ldr	r2, [r7, #12]
 800a146:	69fb      	ldr	r3, [r7, #28]
 800a148:	4413      	add	r3, r2
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	2b5c      	cmp	r3, #92	; 0x5c
 800a14e:	d0f0      	beq.n	800a132 <create_name+0x4e>
			break;
 800a150:	e038      	b.n	800a1c4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a152:	7efb      	ldrb	r3, [r7, #27]
 800a154:	2b2e      	cmp	r3, #46	; 0x2e
 800a156:	d003      	beq.n	800a160 <create_name+0x7c>
 800a158:	693a      	ldr	r2, [r7, #16]
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d30c      	bcc.n	800a17a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	2b0b      	cmp	r3, #11
 800a164:	d002      	beq.n	800a16c <create_name+0x88>
 800a166:	7efb      	ldrb	r3, [r7, #27]
 800a168:	2b2e      	cmp	r3, #46	; 0x2e
 800a16a:	d001      	beq.n	800a170 <create_name+0x8c>
 800a16c:	2306      	movs	r3, #6
 800a16e:	e044      	b.n	800a1fa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a170:	2308      	movs	r3, #8
 800a172:	613b      	str	r3, [r7, #16]
 800a174:	230b      	movs	r3, #11
 800a176:	617b      	str	r3, [r7, #20]
			continue;
 800a178:	e022      	b.n	800a1c0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a17a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	da04      	bge.n	800a18c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a182:	7efb      	ldrb	r3, [r7, #27]
 800a184:	3b80      	subs	r3, #128	; 0x80
 800a186:	4a1f      	ldr	r2, [pc, #124]	; (800a204 <create_name+0x120>)
 800a188:	5cd3      	ldrb	r3, [r2, r3]
 800a18a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a18c:	7efb      	ldrb	r3, [r7, #27]
 800a18e:	4619      	mov	r1, r3
 800a190:	481d      	ldr	r0, [pc, #116]	; (800a208 <create_name+0x124>)
 800a192:	f7fe ff92 	bl	80090ba <chk_chr>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d001      	beq.n	800a1a0 <create_name+0xbc>
 800a19c:	2306      	movs	r3, #6
 800a19e:	e02c      	b.n	800a1fa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a1a0:	7efb      	ldrb	r3, [r7, #27]
 800a1a2:	2b60      	cmp	r3, #96	; 0x60
 800a1a4:	d905      	bls.n	800a1b2 <create_name+0xce>
 800a1a6:	7efb      	ldrb	r3, [r7, #27]
 800a1a8:	2b7a      	cmp	r3, #122	; 0x7a
 800a1aa:	d802      	bhi.n	800a1b2 <create_name+0xce>
 800a1ac:	7efb      	ldrb	r3, [r7, #27]
 800a1ae:	3b20      	subs	r3, #32
 800a1b0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	1c5a      	adds	r2, r3, #1
 800a1b6:	613a      	str	r2, [r7, #16]
 800a1b8:	68ba      	ldr	r2, [r7, #8]
 800a1ba:	4413      	add	r3, r2
 800a1bc:	7efa      	ldrb	r2, [r7, #27]
 800a1be:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a1c0:	e7a6      	b.n	800a110 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a1c2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	441a      	add	r2, r3
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d101      	bne.n	800a1d8 <create_name+0xf4>
 800a1d4:	2306      	movs	r3, #6
 800a1d6:	e010      	b.n	800a1fa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	2be5      	cmp	r3, #229	; 0xe5
 800a1de:	d102      	bne.n	800a1e6 <create_name+0x102>
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	2205      	movs	r2, #5
 800a1e4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a1e6:	7efb      	ldrb	r3, [r7, #27]
 800a1e8:	2b20      	cmp	r3, #32
 800a1ea:	d801      	bhi.n	800a1f0 <create_name+0x10c>
 800a1ec:	2204      	movs	r2, #4
 800a1ee:	e000      	b.n	800a1f2 <create_name+0x10e>
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	330b      	adds	r3, #11
 800a1f6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a1f8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3720      	adds	r7, #32
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	0800d6cc 	.word	0x0800d6cc
 800a208:	0800d500 	.word	0x0800d500

0800a20c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b086      	sub	sp, #24
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a220:	e002      	b.n	800a228 <follow_path+0x1c>
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	3301      	adds	r3, #1
 800a226:	603b      	str	r3, [r7, #0]
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	2b2f      	cmp	r3, #47	; 0x2f
 800a22e:	d0f8      	beq.n	800a222 <follow_path+0x16>
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	2b5c      	cmp	r3, #92	; 0x5c
 800a236:	d0f4      	beq.n	800a222 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	2200      	movs	r2, #0
 800a23c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	2b1f      	cmp	r3, #31
 800a244:	d80a      	bhi.n	800a25c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2280      	movs	r2, #128	; 0x80
 800a24a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a24e:	2100      	movs	r1, #0
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f7ff fc7d 	bl	8009b50 <dir_sdi>
 800a256:	4603      	mov	r3, r0
 800a258:	75fb      	strb	r3, [r7, #23]
 800a25a:	e043      	b.n	800a2e4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a25c:	463b      	mov	r3, r7
 800a25e:	4619      	mov	r1, r3
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f7ff ff3f 	bl	800a0e4 <create_name>
 800a266:	4603      	mov	r3, r0
 800a268:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a26a:	7dfb      	ldrb	r3, [r7, #23]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d134      	bne.n	800a2da <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f7ff fe33 	bl	8009edc <dir_find>
 800a276:	4603      	mov	r3, r0
 800a278:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a280:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a282:	7dfb      	ldrb	r3, [r7, #23]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d00a      	beq.n	800a29e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a288:	7dfb      	ldrb	r3, [r7, #23]
 800a28a:	2b04      	cmp	r3, #4
 800a28c:	d127      	bne.n	800a2de <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a28e:	7afb      	ldrb	r3, [r7, #11]
 800a290:	f003 0304 	and.w	r3, r3, #4
 800a294:	2b00      	cmp	r3, #0
 800a296:	d122      	bne.n	800a2de <follow_path+0xd2>
 800a298:	2305      	movs	r3, #5
 800a29a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a29c:	e01f      	b.n	800a2de <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a29e:	7afb      	ldrb	r3, [r7, #11]
 800a2a0:	f003 0304 	and.w	r3, r3, #4
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d11c      	bne.n	800a2e2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	799b      	ldrb	r3, [r3, #6]
 800a2ac:	f003 0310 	and.w	r3, r3, #16
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d102      	bne.n	800a2ba <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a2b4:	2305      	movs	r3, #5
 800a2b6:	75fb      	strb	r3, [r7, #23]
 800a2b8:	e014      	b.n	800a2e4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	695b      	ldr	r3, [r3, #20]
 800a2c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2c8:	4413      	add	r3, r2
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f7ff fdc6 	bl	8009e5e <ld_clust>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a2d8:	e7c0      	b.n	800a25c <follow_path+0x50>
			if (res != FR_OK) break;
 800a2da:	bf00      	nop
 800a2dc:	e002      	b.n	800a2e4 <follow_path+0xd8>
				break;
 800a2de:	bf00      	nop
 800a2e0:	e000      	b.n	800a2e4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a2e2:	bf00      	nop
			}
		}
	}

	return res;
 800a2e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3718      	adds	r7, #24
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a2ee:	b480      	push	{r7}
 800a2f0:	b087      	sub	sp, #28
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a2f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2fa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d031      	beq.n	800a368 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	617b      	str	r3, [r7, #20]
 800a30a:	e002      	b.n	800a312 <get_ldnumber+0x24>
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	3301      	adds	r3, #1
 800a310:	617b      	str	r3, [r7, #20]
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	2b20      	cmp	r3, #32
 800a318:	d903      	bls.n	800a322 <get_ldnumber+0x34>
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	2b3a      	cmp	r3, #58	; 0x3a
 800a320:	d1f4      	bne.n	800a30c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	2b3a      	cmp	r3, #58	; 0x3a
 800a328:	d11c      	bne.n	800a364 <get_ldnumber+0x76>
			tp = *path;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	1c5a      	adds	r2, r3, #1
 800a334:	60fa      	str	r2, [r7, #12]
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	3b30      	subs	r3, #48	; 0x30
 800a33a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	2b09      	cmp	r3, #9
 800a340:	d80e      	bhi.n	800a360 <get_ldnumber+0x72>
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	429a      	cmp	r2, r3
 800a348:	d10a      	bne.n	800a360 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d107      	bne.n	800a360 <get_ldnumber+0x72>
					vol = (int)i;
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	3301      	adds	r3, #1
 800a358:	617b      	str	r3, [r7, #20]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	697a      	ldr	r2, [r7, #20]
 800a35e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	e002      	b.n	800a36a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a364:	2300      	movs	r3, #0
 800a366:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a368:	693b      	ldr	r3, [r7, #16]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	371c      	adds	r7, #28
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr
	...

0800a378 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	70da      	strb	r2, [r3, #3]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f04f 32ff 	mov.w	r2, #4294967295
 800a38e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a390:	6839      	ldr	r1, [r7, #0]
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f7ff f85c 	bl	8009450 <move_window>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d001      	beq.n	800a3a2 <check_fs+0x2a>
 800a39e:	2304      	movs	r3, #4
 800a3a0:	e038      	b.n	800a414 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	3330      	adds	r3, #48	; 0x30
 800a3a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7fe fda0 	bl	8008ef0 <ld_word>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d001      	beq.n	800a3c0 <check_fs+0x48>
 800a3bc:	2303      	movs	r3, #3
 800a3be:	e029      	b.n	800a414 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a3c6:	2be9      	cmp	r3, #233	; 0xe9
 800a3c8:	d009      	beq.n	800a3de <check_fs+0x66>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a3d0:	2beb      	cmp	r3, #235	; 0xeb
 800a3d2:	d11e      	bne.n	800a412 <check_fs+0x9a>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a3da:	2b90      	cmp	r3, #144	; 0x90
 800a3dc:	d119      	bne.n	800a412 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	3330      	adds	r3, #48	; 0x30
 800a3e2:	3336      	adds	r3, #54	; 0x36
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7fe fd9b 	bl	8008f20 <ld_dword>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a3f0:	4a0a      	ldr	r2, [pc, #40]	; (800a41c <check_fs+0xa4>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d101      	bne.n	800a3fa <check_fs+0x82>
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	e00c      	b.n	800a414 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	3330      	adds	r3, #48	; 0x30
 800a3fe:	3352      	adds	r3, #82	; 0x52
 800a400:	4618      	mov	r0, r3
 800a402:	f7fe fd8d 	bl	8008f20 <ld_dword>
 800a406:	4603      	mov	r3, r0
 800a408:	4a05      	ldr	r2, [pc, #20]	; (800a420 <check_fs+0xa8>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d101      	bne.n	800a412 <check_fs+0x9a>
 800a40e:	2300      	movs	r3, #0
 800a410:	e000      	b.n	800a414 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a412:	2302      	movs	r3, #2
}
 800a414:	4618      	mov	r0, r3
 800a416:	3708      	adds	r7, #8
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	00544146 	.word	0x00544146
 800a420:	33544146 	.word	0x33544146

0800a424 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b096      	sub	sp, #88	; 0x58
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	4613      	mov	r3, r2
 800a430:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	2200      	movs	r2, #0
 800a436:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a438:	68f8      	ldr	r0, [r7, #12]
 800a43a:	f7ff ff58 	bl	800a2ee <get_ldnumber>
 800a43e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a442:	2b00      	cmp	r3, #0
 800a444:	da01      	bge.n	800a44a <find_volume+0x26>
 800a446:	230b      	movs	r3, #11
 800a448:	e22d      	b.n	800a8a6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a44a:	4aa1      	ldr	r2, [pc, #644]	; (800a6d0 <find_volume+0x2ac>)
 800a44c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a44e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a452:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a456:	2b00      	cmp	r3, #0
 800a458:	d101      	bne.n	800a45e <find_volume+0x3a>
 800a45a:	230c      	movs	r3, #12
 800a45c:	e223      	b.n	800a8a6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a462:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a464:	79fb      	ldrb	r3, [r7, #7]
 800a466:	f023 0301 	bic.w	r3, r3, #1
 800a46a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d01a      	beq.n	800a4aa <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a476:	785b      	ldrb	r3, [r3, #1]
 800a478:	4618      	mov	r0, r3
 800a47a:	f7fe fc9b 	bl	8008db4 <disk_status>
 800a47e:	4603      	mov	r3, r0
 800a480:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a484:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a488:	f003 0301 	and.w	r3, r3, #1
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d10c      	bne.n	800a4aa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a490:	79fb      	ldrb	r3, [r7, #7]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d007      	beq.n	800a4a6 <find_volume+0x82>
 800a496:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a49a:	f003 0304 	and.w	r3, r3, #4
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d001      	beq.n	800a4a6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a4a2:	230a      	movs	r3, #10
 800a4a4:	e1ff      	b.n	800a8a6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	e1fd      	b.n	800a8a6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a4b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4b2:	b2da      	uxtb	r2, r3
 800a4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ba:	785b      	ldrb	r3, [r3, #1]
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7fe fc93 	bl	8008de8 <disk_initialize>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a4c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a4cc:	f003 0301 	and.w	r3, r3, #1
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d001      	beq.n	800a4d8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a4d4:	2303      	movs	r3, #3
 800a4d6:	e1e6      	b.n	800a8a6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a4d8:	79fb      	ldrb	r3, [r7, #7]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d007      	beq.n	800a4ee <find_volume+0xca>
 800a4de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a4e2:	f003 0304 	and.w	r3, r3, #4
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d001      	beq.n	800a4ee <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a4ea:	230a      	movs	r3, #10
 800a4ec:	e1db      	b.n	800a8a6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a4f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a4f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a4f6:	f7ff ff3f 	bl	800a378 <check_fs>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a500:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a504:	2b02      	cmp	r3, #2
 800a506:	d149      	bne.n	800a59c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a508:	2300      	movs	r3, #0
 800a50a:	643b      	str	r3, [r7, #64]	; 0x40
 800a50c:	e01e      	b.n	800a54c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a510:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a516:	011b      	lsls	r3, r3, #4
 800a518:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a51c:	4413      	add	r3, r2
 800a51e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a522:	3304      	adds	r3, #4
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d006      	beq.n	800a538 <find_volume+0x114>
 800a52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52c:	3308      	adds	r3, #8
 800a52e:	4618      	mov	r0, r3
 800a530:	f7fe fcf6 	bl	8008f20 <ld_dword>
 800a534:	4602      	mov	r2, r0
 800a536:	e000      	b.n	800a53a <find_volume+0x116>
 800a538:	2200      	movs	r2, #0
 800a53a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	3358      	adds	r3, #88	; 0x58
 800a540:	443b      	add	r3, r7
 800a542:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a548:	3301      	adds	r3, #1
 800a54a:	643b      	str	r3, [r7, #64]	; 0x40
 800a54c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a54e:	2b03      	cmp	r3, #3
 800a550:	d9dd      	bls.n	800a50e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a552:	2300      	movs	r3, #0
 800a554:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d002      	beq.n	800a562 <find_volume+0x13e>
 800a55c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a55e:	3b01      	subs	r3, #1
 800a560:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	3358      	adds	r3, #88	; 0x58
 800a568:	443b      	add	r3, r7
 800a56a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a56e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a572:	2b00      	cmp	r3, #0
 800a574:	d005      	beq.n	800a582 <find_volume+0x15e>
 800a576:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a578:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a57a:	f7ff fefd 	bl	800a378 <check_fs>
 800a57e:	4603      	mov	r3, r0
 800a580:	e000      	b.n	800a584 <find_volume+0x160>
 800a582:	2303      	movs	r3, #3
 800a584:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a588:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d905      	bls.n	800a59c <find_volume+0x178>
 800a590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a592:	3301      	adds	r3, #1
 800a594:	643b      	str	r3, [r7, #64]	; 0x40
 800a596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a598:	2b03      	cmp	r3, #3
 800a59a:	d9e2      	bls.n	800a562 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a59c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a5a0:	2b04      	cmp	r3, #4
 800a5a2:	d101      	bne.n	800a5a8 <find_volume+0x184>
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	e17e      	b.n	800a8a6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a5a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d901      	bls.n	800a5b4 <find_volume+0x190>
 800a5b0:	230d      	movs	r3, #13
 800a5b2:	e178      	b.n	800a8a6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b6:	3330      	adds	r3, #48	; 0x30
 800a5b8:	330b      	adds	r3, #11
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7fe fc98 	bl	8008ef0 <ld_word>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5c6:	d001      	beq.n	800a5cc <find_volume+0x1a8>
 800a5c8:	230d      	movs	r3, #13
 800a5ca:	e16c      	b.n	800a8a6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ce:	3330      	adds	r3, #48	; 0x30
 800a5d0:	3316      	adds	r3, #22
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7fe fc8c 	bl	8008ef0 <ld_word>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a5dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d106      	bne.n	800a5f0 <find_volume+0x1cc>
 800a5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e4:	3330      	adds	r3, #48	; 0x30
 800a5e6:	3324      	adds	r3, #36	; 0x24
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7fe fc99 	bl	8008f20 <ld_dword>
 800a5ee:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a5f4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800a5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a602:	789b      	ldrb	r3, [r3, #2]
 800a604:	2b01      	cmp	r3, #1
 800a606:	d005      	beq.n	800a614 <find_volume+0x1f0>
 800a608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60a:	789b      	ldrb	r3, [r3, #2]
 800a60c:	2b02      	cmp	r3, #2
 800a60e:	d001      	beq.n	800a614 <find_volume+0x1f0>
 800a610:	230d      	movs	r3, #13
 800a612:	e148      	b.n	800a8a6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a616:	789b      	ldrb	r3, [r3, #2]
 800a618:	461a      	mov	r2, r3
 800a61a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a61c:	fb02 f303 	mul.w	r3, r2, r3
 800a620:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a628:	b29a      	uxth	r2, r3
 800a62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a630:	895b      	ldrh	r3, [r3, #10]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d008      	beq.n	800a648 <find_volume+0x224>
 800a636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a638:	895b      	ldrh	r3, [r3, #10]
 800a63a:	461a      	mov	r2, r3
 800a63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63e:	895b      	ldrh	r3, [r3, #10]
 800a640:	3b01      	subs	r3, #1
 800a642:	4013      	ands	r3, r2
 800a644:	2b00      	cmp	r3, #0
 800a646:	d001      	beq.n	800a64c <find_volume+0x228>
 800a648:	230d      	movs	r3, #13
 800a64a:	e12c      	b.n	800a8a6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64e:	3330      	adds	r3, #48	; 0x30
 800a650:	3311      	adds	r3, #17
 800a652:	4618      	mov	r0, r3
 800a654:	f7fe fc4c 	bl	8008ef0 <ld_word>
 800a658:	4603      	mov	r3, r0
 800a65a:	461a      	mov	r2, r3
 800a65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a662:	891b      	ldrh	r3, [r3, #8]
 800a664:	f003 030f 	and.w	r3, r3, #15
 800a668:	b29b      	uxth	r3, r3
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d001      	beq.n	800a672 <find_volume+0x24e>
 800a66e:	230d      	movs	r3, #13
 800a670:	e119      	b.n	800a8a6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a674:	3330      	adds	r3, #48	; 0x30
 800a676:	3313      	adds	r3, #19
 800a678:	4618      	mov	r0, r3
 800a67a:	f7fe fc39 	bl	8008ef0 <ld_word>
 800a67e:	4603      	mov	r3, r0
 800a680:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a684:	2b00      	cmp	r3, #0
 800a686:	d106      	bne.n	800a696 <find_volume+0x272>
 800a688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68a:	3330      	adds	r3, #48	; 0x30
 800a68c:	3320      	adds	r3, #32
 800a68e:	4618      	mov	r0, r3
 800a690:	f7fe fc46 	bl	8008f20 <ld_dword>
 800a694:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a698:	3330      	adds	r3, #48	; 0x30
 800a69a:	330e      	adds	r3, #14
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7fe fc27 	bl	8008ef0 <ld_word>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a6a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d101      	bne.n	800a6b0 <find_volume+0x28c>
 800a6ac:	230d      	movs	r3, #13
 800a6ae:	e0fa      	b.n	800a8a6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a6b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a6b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6b4:	4413      	add	r3, r2
 800a6b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6b8:	8912      	ldrh	r2, [r2, #8]
 800a6ba:	0912      	lsrs	r2, r2, #4
 800a6bc:	b292      	uxth	r2, r2
 800a6be:	4413      	add	r3, r2
 800a6c0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a6c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d204      	bcs.n	800a6d4 <find_volume+0x2b0>
 800a6ca:	230d      	movs	r3, #13
 800a6cc:	e0eb      	b.n	800a8a6 <find_volume+0x482>
 800a6ce:	bf00      	nop
 800a6d0:	20000588 	.word	0x20000588
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a6d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d8:	1ad3      	subs	r3, r2, r3
 800a6da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6dc:	8952      	ldrh	r2, [r2, #10]
 800a6de:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6e2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d101      	bne.n	800a6ee <find_volume+0x2ca>
 800a6ea:	230d      	movs	r3, #13
 800a6ec:	e0db      	b.n	800a8a6 <find_volume+0x482>
		fmt = FS_FAT32;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d802      	bhi.n	800a704 <find_volume+0x2e0>
 800a6fe:	2302      	movs	r3, #2
 800a700:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a706:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d802      	bhi.n	800a714 <find_volume+0x2f0>
 800a70e:	2301      	movs	r3, #1
 800a710:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a716:	1c9a      	adds	r2, r3, #2
 800a718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a71a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a71e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a720:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a722:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a726:	441a      	add	r2, r3
 800a728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a72c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a730:	441a      	add	r2, r3
 800a732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a734:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a736:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a73a:	2b03      	cmp	r3, #3
 800a73c:	d11e      	bne.n	800a77c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a740:	3330      	adds	r3, #48	; 0x30
 800a742:	332a      	adds	r3, #42	; 0x2a
 800a744:	4618      	mov	r0, r3
 800a746:	f7fe fbd3 	bl	8008ef0 <ld_word>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d001      	beq.n	800a754 <find_volume+0x330>
 800a750:	230d      	movs	r3, #13
 800a752:	e0a8      	b.n	800a8a6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a756:	891b      	ldrh	r3, [r3, #8]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d001      	beq.n	800a760 <find_volume+0x33c>
 800a75c:	230d      	movs	r3, #13
 800a75e:	e0a2      	b.n	800a8a6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a762:	3330      	adds	r3, #48	; 0x30
 800a764:	332c      	adds	r3, #44	; 0x2c
 800a766:	4618      	mov	r0, r3
 800a768:	f7fe fbda 	bl	8008f20 <ld_dword>
 800a76c:	4602      	mov	r2, r0
 800a76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a770:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a774:	695b      	ldr	r3, [r3, #20]
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	647b      	str	r3, [r7, #68]	; 0x44
 800a77a:	e01f      	b.n	800a7bc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77e:	891b      	ldrh	r3, [r3, #8]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d101      	bne.n	800a788 <find_volume+0x364>
 800a784:	230d      	movs	r3, #13
 800a786:	e08e      	b.n	800a8a6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78a:	6a1a      	ldr	r2, [r3, #32]
 800a78c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a78e:	441a      	add	r2, r3
 800a790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a792:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a794:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a798:	2b02      	cmp	r3, #2
 800a79a:	d103      	bne.n	800a7a4 <find_volume+0x380>
 800a79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79e:	695b      	ldr	r3, [r3, #20]
 800a7a0:	005b      	lsls	r3, r3, #1
 800a7a2:	e00a      	b.n	800a7ba <find_volume+0x396>
 800a7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a6:	695a      	ldr	r2, [r3, #20]
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	005b      	lsls	r3, r3, #1
 800a7ac:	4413      	add	r3, r2
 800a7ae:	085a      	lsrs	r2, r3, #1
 800a7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b2:	695b      	ldr	r3, [r3, #20]
 800a7b4:	f003 0301 	and.w	r3, r3, #1
 800a7b8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a7ba:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7be:	699a      	ldr	r2, [r3, #24]
 800a7c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7c2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a7c6:	0a5b      	lsrs	r3, r3, #9
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d201      	bcs.n	800a7d0 <find_volume+0x3ac>
 800a7cc:	230d      	movs	r3, #13
 800a7ce:	e06a      	b.n	800a8a6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a7d6:	611a      	str	r2, [r3, #16]
 800a7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7da:	691a      	ldr	r2, [r3, #16]
 800a7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7de:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e2:	2280      	movs	r2, #128	; 0x80
 800a7e4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a7e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a7ea:	2b03      	cmp	r3, #3
 800a7ec:	d149      	bne.n	800a882 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f0:	3330      	adds	r3, #48	; 0x30
 800a7f2:	3330      	adds	r3, #48	; 0x30
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7fe fb7b 	bl	8008ef0 <ld_word>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d140      	bne.n	800a882 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a802:	3301      	adds	r3, #1
 800a804:	4619      	mov	r1, r3
 800a806:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a808:	f7fe fe22 	bl	8009450 <move_window>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d137      	bne.n	800a882 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a814:	2200      	movs	r2, #0
 800a816:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81a:	3330      	adds	r3, #48	; 0x30
 800a81c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a820:	4618      	mov	r0, r3
 800a822:	f7fe fb65 	bl	8008ef0 <ld_word>
 800a826:	4603      	mov	r3, r0
 800a828:	461a      	mov	r2, r3
 800a82a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a82e:	429a      	cmp	r2, r3
 800a830:	d127      	bne.n	800a882 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a834:	3330      	adds	r3, #48	; 0x30
 800a836:	4618      	mov	r0, r3
 800a838:	f7fe fb72 	bl	8008f20 <ld_dword>
 800a83c:	4603      	mov	r3, r0
 800a83e:	4a1c      	ldr	r2, [pc, #112]	; (800a8b0 <find_volume+0x48c>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d11e      	bne.n	800a882 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a846:	3330      	adds	r3, #48	; 0x30
 800a848:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7fe fb67 	bl	8008f20 <ld_dword>
 800a852:	4603      	mov	r3, r0
 800a854:	4a17      	ldr	r2, [pc, #92]	; (800a8b4 <find_volume+0x490>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d113      	bne.n	800a882 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85c:	3330      	adds	r3, #48	; 0x30
 800a85e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a862:	4618      	mov	r0, r3
 800a864:	f7fe fb5c 	bl	8008f20 <ld_dword>
 800a868:	4602      	mov	r2, r0
 800a86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a86c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a870:	3330      	adds	r3, #48	; 0x30
 800a872:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a876:	4618      	mov	r0, r3
 800a878:	f7fe fb52 	bl	8008f20 <ld_dword>
 800a87c:	4602      	mov	r2, r0
 800a87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a880:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a884:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a888:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a88a:	4b0b      	ldr	r3, [pc, #44]	; (800a8b8 <find_volume+0x494>)
 800a88c:	881b      	ldrh	r3, [r3, #0]
 800a88e:	3301      	adds	r3, #1
 800a890:	b29a      	uxth	r2, r3
 800a892:	4b09      	ldr	r3, [pc, #36]	; (800a8b8 <find_volume+0x494>)
 800a894:	801a      	strh	r2, [r3, #0]
 800a896:	4b08      	ldr	r3, [pc, #32]	; (800a8b8 <find_volume+0x494>)
 800a898:	881a      	ldrh	r2, [r3, #0]
 800a89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a89e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a8a0:	f7fe fd6e 	bl	8009380 <clear_lock>
#endif
	return FR_OK;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3758      	adds	r7, #88	; 0x58
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	41615252 	.word	0x41615252
 800a8b4:	61417272 	.word	0x61417272
 800a8b8:	2000058c 	.word	0x2000058c

0800a8bc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a8c6:	2309      	movs	r3, #9
 800a8c8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d01c      	beq.n	800a90a <validate+0x4e>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d018      	beq.n	800a90a <validate+0x4e>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d013      	beq.n	800a90a <validate+0x4e>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	889a      	ldrh	r2, [r3, #4]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	88db      	ldrh	r3, [r3, #6]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d10c      	bne.n	800a90a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	785b      	ldrb	r3, [r3, #1]
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7fe fa5c 	bl	8008db4 <disk_status>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	f003 0301 	and.w	r3, r3, #1
 800a902:	2b00      	cmp	r3, #0
 800a904:	d101      	bne.n	800a90a <validate+0x4e>
			res = FR_OK;
 800a906:	2300      	movs	r3, #0
 800a908:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a90a:	7bfb      	ldrb	r3, [r7, #15]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d102      	bne.n	800a916 <validate+0x5a>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	e000      	b.n	800a918 <validate+0x5c>
 800a916:	2300      	movs	r3, #0
 800a918:	683a      	ldr	r2, [r7, #0]
 800a91a:	6013      	str	r3, [r2, #0]
	return res;
 800a91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3710      	adds	r7, #16
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
	...

0800a928 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b088      	sub	sp, #32
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	4613      	mov	r3, r2
 800a934:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a93a:	f107 0310 	add.w	r3, r7, #16
 800a93e:	4618      	mov	r0, r3
 800a940:	f7ff fcd5 	bl	800a2ee <get_ldnumber>
 800a944:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	da01      	bge.n	800a950 <f_mount+0x28>
 800a94c:	230b      	movs	r3, #11
 800a94e:	e02b      	b.n	800a9a8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a950:	4a17      	ldr	r2, [pc, #92]	; (800a9b0 <f_mount+0x88>)
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a958:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d005      	beq.n	800a96c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a960:	69b8      	ldr	r0, [r7, #24]
 800a962:	f7fe fd0d 	bl	8009380 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	2200      	movs	r2, #0
 800a96a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d002      	beq.n	800a978 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2200      	movs	r2, #0
 800a976:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	490d      	ldr	r1, [pc, #52]	; (800a9b0 <f_mount+0x88>)
 800a97c:	69fb      	ldr	r3, [r7, #28]
 800a97e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d002      	beq.n	800a98e <f_mount+0x66>
 800a988:	79fb      	ldrb	r3, [r7, #7]
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d001      	beq.n	800a992 <f_mount+0x6a>
 800a98e:	2300      	movs	r3, #0
 800a990:	e00a      	b.n	800a9a8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a992:	f107 010c 	add.w	r1, r7, #12
 800a996:	f107 0308 	add.w	r3, r7, #8
 800a99a:	2200      	movs	r2, #0
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7ff fd41 	bl	800a424 <find_volume>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a9a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3720      	adds	r7, #32
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	20000588 	.word	0x20000588

0800a9b4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b098      	sub	sp, #96	; 0x60
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	4613      	mov	r3, r2
 800a9c0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d101      	bne.n	800a9cc <f_open+0x18>
 800a9c8:	2309      	movs	r3, #9
 800a9ca:	e1ad      	b.n	800ad28 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a9cc:	79fb      	ldrb	r3, [r7, #7]
 800a9ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9d2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a9d4:	79fa      	ldrb	r2, [r7, #7]
 800a9d6:	f107 0110 	add.w	r1, r7, #16
 800a9da:	f107 0308 	add.w	r3, r7, #8
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7ff fd20 	bl	800a424 <find_volume>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a9ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f040 8191 	bne.w	800ad16 <f_open+0x362>
		dj.obj.fs = fs;
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a9f8:	68ba      	ldr	r2, [r7, #8]
 800a9fa:	f107 0314 	add.w	r3, r7, #20
 800a9fe:	4611      	mov	r1, r2
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7ff fc03 	bl	800a20c <follow_path>
 800aa06:	4603      	mov	r3, r0
 800aa08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800aa0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d11a      	bne.n	800aa4a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800aa14:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aa18:	b25b      	sxtb	r3, r3
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	da03      	bge.n	800aa26 <f_open+0x72>
				res = FR_INVALID_NAME;
 800aa1e:	2306      	movs	r3, #6
 800aa20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aa24:	e011      	b.n	800aa4a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aa26:	79fb      	ldrb	r3, [r7, #7]
 800aa28:	f023 0301 	bic.w	r3, r3, #1
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	bf14      	ite	ne
 800aa30:	2301      	movne	r3, #1
 800aa32:	2300      	moveq	r3, #0
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	461a      	mov	r2, r3
 800aa38:	f107 0314 	add.w	r3, r7, #20
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7fe fb56 	bl	80090f0 <chk_lock>
 800aa44:	4603      	mov	r3, r0
 800aa46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800aa4a:	79fb      	ldrb	r3, [r7, #7]
 800aa4c:	f003 031c 	and.w	r3, r3, #28
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d07f      	beq.n	800ab54 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800aa54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d017      	beq.n	800aa8c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800aa5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa60:	2b04      	cmp	r3, #4
 800aa62:	d10e      	bne.n	800aa82 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800aa64:	f7fe fba0 	bl	80091a8 <enq_lock>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d006      	beq.n	800aa7c <f_open+0xc8>
 800aa6e:	f107 0314 	add.w	r3, r7, #20
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7ff fa87 	bl	8009f86 <dir_register>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	e000      	b.n	800aa7e <f_open+0xca>
 800aa7c:	2312      	movs	r3, #18
 800aa7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800aa82:	79fb      	ldrb	r3, [r7, #7]
 800aa84:	f043 0308 	orr.w	r3, r3, #8
 800aa88:	71fb      	strb	r3, [r7, #7]
 800aa8a:	e010      	b.n	800aaae <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800aa8c:	7ebb      	ldrb	r3, [r7, #26]
 800aa8e:	f003 0311 	and.w	r3, r3, #17
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d003      	beq.n	800aa9e <f_open+0xea>
					res = FR_DENIED;
 800aa96:	2307      	movs	r3, #7
 800aa98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aa9c:	e007      	b.n	800aaae <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800aa9e:	79fb      	ldrb	r3, [r7, #7]
 800aaa0:	f003 0304 	and.w	r3, r3, #4
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d002      	beq.n	800aaae <f_open+0xfa>
 800aaa8:	2308      	movs	r3, #8
 800aaaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800aaae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d168      	bne.n	800ab88 <f_open+0x1d4>
 800aab6:	79fb      	ldrb	r3, [r7, #7]
 800aab8:	f003 0308 	and.w	r3, r3, #8
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d063      	beq.n	800ab88 <f_open+0x1d4>
				dw = GET_FATTIME();
 800aac0:	f7fb f86a 	bl	8005b98 <get_fattime>
 800aac4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800aac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aac8:	330e      	adds	r3, #14
 800aaca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aacc:	4618      	mov	r0, r3
 800aace:	f7fe fa65 	bl	8008f9c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800aad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aad4:	3316      	adds	r3, #22
 800aad6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aad8:	4618      	mov	r0, r3
 800aada:	f7fe fa5f 	bl	8008f9c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800aade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aae0:	330b      	adds	r3, #11
 800aae2:	2220      	movs	r2, #32
 800aae4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aaea:	4611      	mov	r1, r2
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7ff f9b6 	bl	8009e5e <ld_clust>
 800aaf2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aaf8:	2200      	movs	r2, #0
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7ff f9ce 	bl	8009e9c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ab00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab02:	331c      	adds	r3, #28
 800ab04:	2100      	movs	r1, #0
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7fe fa48 	bl	8008f9c <st_dword>
					fs->wflag = 1;
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ab12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d037      	beq.n	800ab88 <f_open+0x1d4>
						dw = fs->winsect;
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ab1e:	f107 0314 	add.w	r3, r7, #20
 800ab22:	2200      	movs	r2, #0
 800ab24:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7fe fee1 	bl	80098ee <remove_chain>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ab32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d126      	bne.n	800ab88 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7fe fc86 	bl	8009450 <move_window>
 800ab44:	4603      	mov	r3, r0
 800ab46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab4e:	3a01      	subs	r2, #1
 800ab50:	60da      	str	r2, [r3, #12]
 800ab52:	e019      	b.n	800ab88 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ab54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d115      	bne.n	800ab88 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ab5c:	7ebb      	ldrb	r3, [r7, #26]
 800ab5e:	f003 0310 	and.w	r3, r3, #16
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d003      	beq.n	800ab6e <f_open+0x1ba>
					res = FR_NO_FILE;
 800ab66:	2304      	movs	r3, #4
 800ab68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ab6c:	e00c      	b.n	800ab88 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ab6e:	79fb      	ldrb	r3, [r7, #7]
 800ab70:	f003 0302 	and.w	r3, r3, #2
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d007      	beq.n	800ab88 <f_open+0x1d4>
 800ab78:	7ebb      	ldrb	r3, [r7, #26]
 800ab7a:	f003 0301 	and.w	r3, r3, #1
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d002      	beq.n	800ab88 <f_open+0x1d4>
						res = FR_DENIED;
 800ab82:	2307      	movs	r3, #7
 800ab84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ab88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d128      	bne.n	800abe2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ab90:	79fb      	ldrb	r3, [r7, #7]
 800ab92:	f003 0308 	and.w	r3, r3, #8
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d003      	beq.n	800aba2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ab9a:	79fb      	ldrb	r3, [r7, #7]
 800ab9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aba0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800abaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800abb0:	79fb      	ldrb	r3, [r7, #7]
 800abb2:	f023 0301 	bic.w	r3, r3, #1
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	bf14      	ite	ne
 800abba:	2301      	movne	r3, #1
 800abbc:	2300      	moveq	r3, #0
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	461a      	mov	r2, r3
 800abc2:	f107 0314 	add.w	r3, r7, #20
 800abc6:	4611      	mov	r1, r2
 800abc8:	4618      	mov	r0, r3
 800abca:	f7fe fb0f 	bl	80091ec <inc_lock>
 800abce:	4602      	mov	r2, r0
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	691b      	ldr	r3, [r3, #16]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d102      	bne.n	800abe2 <f_open+0x22e>
 800abdc:	2302      	movs	r3, #2
 800abde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800abe2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	f040 8095 	bne.w	800ad16 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abf0:	4611      	mov	r1, r2
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7ff f933 	bl	8009e5e <ld_clust>
 800abf8:	4602      	mov	r2, r0
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800abfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac00:	331c      	adds	r3, #28
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7fe f98c 	bl	8008f20 <ld_dword>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2200      	movs	r2, #0
 800ac12:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ac14:	693a      	ldr	r2, [r7, #16]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	88da      	ldrh	r2, [r3, #6]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	79fa      	ldrb	r2, [r7, #7]
 800ac26:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2200      	movs	r2, #0
 800ac32:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2200      	movs	r2, #0
 800ac38:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	3330      	adds	r3, #48	; 0x30
 800ac3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac42:	2100      	movs	r1, #0
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7fe f9f6 	bl	8009036 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ac4a:	79fb      	ldrb	r3, [r7, #7]
 800ac4c:	f003 0320 	and.w	r3, r3, #32
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d060      	beq.n	800ad16 <f_open+0x362>
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d05c      	beq.n	800ad16 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	68da      	ldr	r2, [r3, #12]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	895b      	ldrh	r3, [r3, #10]
 800ac68:	025b      	lsls	r3, r3, #9
 800ac6a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	68db      	ldr	r3, [r3, #12]
 800ac76:	657b      	str	r3, [r7, #84]	; 0x54
 800ac78:	e016      	b.n	800aca8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7fe fca1 	bl	80095c6 <get_fat>
 800ac84:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ac86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d802      	bhi.n	800ac92 <f_open+0x2de>
 800ac8c:	2302      	movs	r3, #2
 800ac8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ac92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac98:	d102      	bne.n	800aca0 <f_open+0x2ec>
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aca0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aca4:	1ad3      	subs	r3, r2, r3
 800aca6:	657b      	str	r3, [r7, #84]	; 0x54
 800aca8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acac:	2b00      	cmp	r3, #0
 800acae:	d103      	bne.n	800acb8 <f_open+0x304>
 800acb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800acb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d8e0      	bhi.n	800ac7a <f_open+0x2c6>
				}
				fp->clust = clst;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800acbc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800acbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d127      	bne.n	800ad16 <f_open+0x362>
 800acc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800accc:	2b00      	cmp	r3, #0
 800acce:	d022      	beq.n	800ad16 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800acd4:	4618      	mov	r0, r3
 800acd6:	f7fe fc57 	bl	8009588 <clust2sect>
 800acda:	6478      	str	r0, [r7, #68]	; 0x44
 800acdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d103      	bne.n	800acea <f_open+0x336>
						res = FR_INT_ERR;
 800ace2:	2302      	movs	r3, #2
 800ace4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ace8:	e015      	b.n	800ad16 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800acea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acec:	0a5a      	lsrs	r2, r3, #9
 800acee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acf0:	441a      	add	r2, r3
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	7858      	ldrb	r0, [r3, #1]
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	6a1a      	ldr	r2, [r3, #32]
 800ad04:	2301      	movs	r3, #1
 800ad06:	f7fe f895 	bl	8008e34 <disk_read>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d002      	beq.n	800ad16 <f_open+0x362>
 800ad10:	2301      	movs	r3, #1
 800ad12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ad16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d002      	beq.n	800ad24 <f_open+0x370>
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2200      	movs	r2, #0
 800ad22:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ad24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3760      	adds	r7, #96	; 0x60
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b08e      	sub	sp, #56	; 0x38
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	60b9      	str	r1, [r7, #8]
 800ad3a:	607a      	str	r2, [r7, #4]
 800ad3c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	2200      	movs	r2, #0
 800ad46:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f107 0214 	add.w	r2, r7, #20
 800ad4e:	4611      	mov	r1, r2
 800ad50:	4618      	mov	r0, r3
 800ad52:	f7ff fdb3 	bl	800a8bc <validate>
 800ad56:	4603      	mov	r3, r0
 800ad58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ad5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d107      	bne.n	800ad74 <f_read+0x44>
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	7d5b      	ldrb	r3, [r3, #21]
 800ad68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ad6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d002      	beq.n	800ad7a <f_read+0x4a>
 800ad74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad78:	e115      	b.n	800afa6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	7d1b      	ldrb	r3, [r3, #20]
 800ad7e:	f003 0301 	and.w	r3, r3, #1
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d101      	bne.n	800ad8a <f_read+0x5a>
 800ad86:	2307      	movs	r3, #7
 800ad88:	e10d      	b.n	800afa6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	68da      	ldr	r2, [r3, #12]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	699b      	ldr	r3, [r3, #24]
 800ad92:	1ad3      	subs	r3, r2, r3
 800ad94:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	6a3b      	ldr	r3, [r7, #32]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	f240 80fe 	bls.w	800af9c <f_read+0x26c>
 800ada0:	6a3b      	ldr	r3, [r7, #32]
 800ada2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ada4:	e0fa      	b.n	800af9c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	699b      	ldr	r3, [r3, #24]
 800adaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adae:	2b00      	cmp	r3, #0
 800adb0:	f040 80c6 	bne.w	800af40 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	699b      	ldr	r3, [r3, #24]
 800adb8:	0a5b      	lsrs	r3, r3, #9
 800adba:	697a      	ldr	r2, [r7, #20]
 800adbc:	8952      	ldrh	r2, [r2, #10]
 800adbe:	3a01      	subs	r2, #1
 800adc0:	4013      	ands	r3, r2
 800adc2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800adc4:	69fb      	ldr	r3, [r7, #28]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d12f      	bne.n	800ae2a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	699b      	ldr	r3, [r3, #24]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d103      	bne.n	800adda <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	633b      	str	r3, [r7, #48]	; 0x30
 800add8:	e013      	b.n	800ae02 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d007      	beq.n	800adf2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	699b      	ldr	r3, [r3, #24]
 800ade6:	4619      	mov	r1, r3
 800ade8:	68f8      	ldr	r0, [r7, #12]
 800adea:	f7fe fe7d 	bl	8009ae8 <clmt_clust>
 800adee:	6338      	str	r0, [r7, #48]	; 0x30
 800adf0:	e007      	b.n	800ae02 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800adf2:	68fa      	ldr	r2, [r7, #12]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	69db      	ldr	r3, [r3, #28]
 800adf8:	4619      	mov	r1, r3
 800adfa:	4610      	mov	r0, r2
 800adfc:	f7fe fbe3 	bl	80095c6 <get_fat>
 800ae00:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ae02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d804      	bhi.n	800ae12 <f_read+0xe2>
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2202      	movs	r2, #2
 800ae0c:	755a      	strb	r2, [r3, #21]
 800ae0e:	2302      	movs	r3, #2
 800ae10:	e0c9      	b.n	800afa6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ae12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae18:	d104      	bne.n	800ae24 <f_read+0xf4>
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	755a      	strb	r2, [r3, #21]
 800ae20:	2301      	movs	r3, #1
 800ae22:	e0c0      	b.n	800afa6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae28:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ae2a:	697a      	ldr	r2, [r7, #20]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	69db      	ldr	r3, [r3, #28]
 800ae30:	4619      	mov	r1, r3
 800ae32:	4610      	mov	r0, r2
 800ae34:	f7fe fba8 	bl	8009588 <clust2sect>
 800ae38:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d104      	bne.n	800ae4a <f_read+0x11a>
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2202      	movs	r2, #2
 800ae44:	755a      	strb	r2, [r3, #21]
 800ae46:	2302      	movs	r3, #2
 800ae48:	e0ad      	b.n	800afa6 <f_read+0x276>
			sect += csect;
 800ae4a:	69ba      	ldr	r2, [r7, #24]
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	4413      	add	r3, r2
 800ae50:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	0a5b      	lsrs	r3, r3, #9
 800ae56:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ae58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d039      	beq.n	800aed2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ae5e:	69fa      	ldr	r2, [r7, #28]
 800ae60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae62:	4413      	add	r3, r2
 800ae64:	697a      	ldr	r2, [r7, #20]
 800ae66:	8952      	ldrh	r2, [r2, #10]
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d905      	bls.n	800ae78 <f_read+0x148>
					cc = fs->csize - csect;
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	895b      	ldrh	r3, [r3, #10]
 800ae70:	461a      	mov	r2, r3
 800ae72:	69fb      	ldr	r3, [r7, #28]
 800ae74:	1ad3      	subs	r3, r2, r3
 800ae76:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	7858      	ldrb	r0, [r3, #1]
 800ae7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7e:	69ba      	ldr	r2, [r7, #24]
 800ae80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae82:	f7fd ffd7 	bl	8008e34 <disk_read>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d004      	beq.n	800ae96 <f_read+0x166>
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	755a      	strb	r2, [r3, #21]
 800ae92:	2301      	movs	r3, #1
 800ae94:	e087      	b.n	800afa6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	7d1b      	ldrb	r3, [r3, #20]
 800ae9a:	b25b      	sxtb	r3, r3
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	da14      	bge.n	800aeca <f_read+0x19a>
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	6a1a      	ldr	r2, [r3, #32]
 800aea4:	69bb      	ldr	r3, [r7, #24]
 800aea6:	1ad3      	subs	r3, r2, r3
 800aea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d90d      	bls.n	800aeca <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	6a1a      	ldr	r2, [r3, #32]
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	1ad3      	subs	r3, r2, r3
 800aeb6:	025b      	lsls	r3, r3, #9
 800aeb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeba:	18d0      	adds	r0, r2, r3
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	3330      	adds	r3, #48	; 0x30
 800aec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aec4:	4619      	mov	r1, r3
 800aec6:	f7fe f895 	bl	8008ff4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800aeca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aecc:	025b      	lsls	r3, r3, #9
 800aece:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800aed0:	e050      	b.n	800af74 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	6a1b      	ldr	r3, [r3, #32]
 800aed6:	69ba      	ldr	r2, [r7, #24]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d02e      	beq.n	800af3a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	7d1b      	ldrb	r3, [r3, #20]
 800aee0:	b25b      	sxtb	r3, r3
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	da18      	bge.n	800af18 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	7858      	ldrb	r0, [r3, #1]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6a1a      	ldr	r2, [r3, #32]
 800aef4:	2301      	movs	r3, #1
 800aef6:	f7fd ffbd 	bl	8008e74 <disk_write>
 800aefa:	4603      	mov	r3, r0
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d004      	beq.n	800af0a <f_read+0x1da>
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2201      	movs	r2, #1
 800af04:	755a      	strb	r2, [r3, #21]
 800af06:	2301      	movs	r3, #1
 800af08:	e04d      	b.n	800afa6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	7d1b      	ldrb	r3, [r3, #20]
 800af0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af12:	b2da      	uxtb	r2, r3
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	7858      	ldrb	r0, [r3, #1]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af22:	2301      	movs	r3, #1
 800af24:	69ba      	ldr	r2, [r7, #24]
 800af26:	f7fd ff85 	bl	8008e34 <disk_read>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d004      	beq.n	800af3a <f_read+0x20a>
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2201      	movs	r2, #1
 800af34:	755a      	strb	r2, [r3, #21]
 800af36:	2301      	movs	r3, #1
 800af38:	e035      	b.n	800afa6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	69ba      	ldr	r2, [r7, #24]
 800af3e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	699b      	ldr	r3, [r3, #24]
 800af44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af48:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800af4c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800af4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	429a      	cmp	r2, r3
 800af54:	d901      	bls.n	800af5a <f_read+0x22a>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	699b      	ldr	r3, [r3, #24]
 800af64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af68:	4413      	add	r3, r2
 800af6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af6c:	4619      	mov	r1, r3
 800af6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af70:	f7fe f840 	bl	8008ff4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800af74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af78:	4413      	add	r3, r2
 800af7a:	627b      	str	r3, [r7, #36]	; 0x24
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	699a      	ldr	r2, [r3, #24]
 800af80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af82:	441a      	add	r2, r3
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	619a      	str	r2, [r3, #24]
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8e:	441a      	add	r2, r3
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	601a      	str	r2, [r3, #0]
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af98:	1ad3      	subs	r3, r2, r3
 800af9a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f47f af01 	bne.w	800ada6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3738      	adds	r7, #56	; 0x38
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b086      	sub	sp, #24
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f107 0208 	add.w	r2, r7, #8
 800afbc:	4611      	mov	r1, r2
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7ff fc7c 	bl	800a8bc <validate>
 800afc4:	4603      	mov	r3, r0
 800afc6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800afc8:	7dfb      	ldrb	r3, [r7, #23]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d168      	bne.n	800b0a0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	7d1b      	ldrb	r3, [r3, #20]
 800afd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d062      	beq.n	800b0a0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	7d1b      	ldrb	r3, [r3, #20]
 800afde:	b25b      	sxtb	r3, r3
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	da15      	bge.n	800b010 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	7858      	ldrb	r0, [r3, #1]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6a1a      	ldr	r2, [r3, #32]
 800aff2:	2301      	movs	r3, #1
 800aff4:	f7fd ff3e 	bl	8008e74 <disk_write>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b00      	cmp	r3, #0
 800affc:	d001      	beq.n	800b002 <f_sync+0x54>
 800affe:	2301      	movs	r3, #1
 800b000:	e04f      	b.n	800b0a2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	7d1b      	ldrb	r3, [r3, #20]
 800b006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b00a:	b2da      	uxtb	r2, r3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b010:	f7fa fdc2 	bl	8005b98 <get_fattime>
 800b014:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b016:	68ba      	ldr	r2, [r7, #8]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01c:	4619      	mov	r1, r3
 800b01e:	4610      	mov	r0, r2
 800b020:	f7fe fa16 	bl	8009450 <move_window>
 800b024:	4603      	mov	r3, r0
 800b026:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b028:	7dfb      	ldrb	r3, [r7, #23]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d138      	bne.n	800b0a0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b032:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	330b      	adds	r3, #11
 800b038:	781a      	ldrb	r2, [r3, #0]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	330b      	adds	r3, #11
 800b03e:	f042 0220 	orr.w	r2, r2, #32
 800b042:	b2d2      	uxtb	r2, r2
 800b044:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6818      	ldr	r0, [r3, #0]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	689b      	ldr	r3, [r3, #8]
 800b04e:	461a      	mov	r2, r3
 800b050:	68f9      	ldr	r1, [r7, #12]
 800b052:	f7fe ff23 	bl	8009e9c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f103 021c 	add.w	r2, r3, #28
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	4619      	mov	r1, r3
 800b062:	4610      	mov	r0, r2
 800b064:	f7fd ff9a 	bl	8008f9c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	3316      	adds	r3, #22
 800b06c:	6939      	ldr	r1, [r7, #16]
 800b06e:	4618      	mov	r0, r3
 800b070:	f7fd ff94 	bl	8008f9c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	3312      	adds	r3, #18
 800b078:	2100      	movs	r1, #0
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7fd ff73 	bl	8008f66 <st_word>
					fs->wflag = 1;
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	2201      	movs	r2, #1
 800b084:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	4618      	mov	r0, r3
 800b08a:	f7fe fa0f 	bl	80094ac <sync_fs>
 800b08e:	4603      	mov	r3, r0
 800b090:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	7d1b      	ldrb	r3, [r3, #20]
 800b096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b09a:	b2da      	uxtb	r2, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b0a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3718      	adds	r7, #24
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b084      	sub	sp, #16
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f7ff ff7b 	bl	800afae <f_sync>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b0bc:	7bfb      	ldrb	r3, [r7, #15]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d118      	bne.n	800b0f4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f107 0208 	add.w	r2, r7, #8
 800b0c8:	4611      	mov	r1, r2
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7ff fbf6 	bl	800a8bc <validate>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b0d4:	7bfb      	ldrb	r3, [r7, #15]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d10c      	bne.n	800b0f4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	691b      	ldr	r3, [r3, #16]
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7fe f912 	bl	8009308 <dec_lock>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b0e8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d102      	bne.n	800b0f4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b0f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b090      	sub	sp, #64	; 0x40
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
 800b106:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f107 0208 	add.w	r2, r7, #8
 800b10e:	4611      	mov	r1, r2
 800b110:	4618      	mov	r0, r3
 800b112:	f7ff fbd3 	bl	800a8bc <validate>
 800b116:	4603      	mov	r3, r0
 800b118:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800b11c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b120:	2b00      	cmp	r3, #0
 800b122:	d103      	bne.n	800b12c <f_lseek+0x2e>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	7d5b      	ldrb	r3, [r3, #21]
 800b128:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800b12c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b130:	2b00      	cmp	r3, #0
 800b132:	d002      	beq.n	800b13a <f_lseek+0x3c>
 800b134:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b138:	e1e6      	b.n	800b508 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13e:	2b00      	cmp	r3, #0
 800b140:	f000 80d1 	beq.w	800b2e6 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b14a:	d15a      	bne.n	800b202 <f_lseek+0x104>
			tbl = fp->cltbl;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b150:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b154:	1d1a      	adds	r2, r3, #4
 800b156:	627a      	str	r2, [r7, #36]	; 0x24
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	617b      	str	r3, [r7, #20]
 800b15c:	2302      	movs	r3, #2
 800b15e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800b166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d03a      	beq.n	800b1e2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800b16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b16e:	613b      	str	r3, [r7, #16]
 800b170:	2300      	movs	r3, #0
 800b172:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b176:	3302      	adds	r3, #2
 800b178:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800b17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17c:	60fb      	str	r3, [r7, #12]
 800b17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b180:	3301      	adds	r3, #1
 800b182:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b188:	4618      	mov	r0, r3
 800b18a:	f7fe fa1c 	bl	80095c6 <get_fat>
 800b18e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800b190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b192:	2b01      	cmp	r3, #1
 800b194:	d804      	bhi.n	800b1a0 <f_lseek+0xa2>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2202      	movs	r2, #2
 800b19a:	755a      	strb	r2, [r3, #21]
 800b19c:	2302      	movs	r3, #2
 800b19e:	e1b3      	b.n	800b508 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a6:	d104      	bne.n	800b1b2 <f_lseek+0xb4>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	755a      	strb	r2, [r3, #21]
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	e1aa      	b.n	800b508 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d0de      	beq.n	800b17a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800b1bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d809      	bhi.n	800b1d8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800b1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c6:	1d1a      	adds	r2, r3, #4
 800b1c8:	627a      	str	r2, [r7, #36]	; 0x24
 800b1ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1cc:	601a      	str	r2, [r3, #0]
 800b1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d0:	1d1a      	adds	r2, r3, #4
 800b1d2:	627a      	str	r2, [r7, #36]	; 0x24
 800b1d4:	693a      	ldr	r2, [r7, #16]
 800b1d6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	695b      	ldr	r3, [r3, #20]
 800b1dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d3c4      	bcc.n	800b16c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1e8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800b1ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d803      	bhi.n	800b1fa <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800b1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	601a      	str	r2, [r3, #0]
 800b1f8:	e184      	b.n	800b504 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800b1fa:	2311      	movs	r3, #17
 800b1fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b200:	e180      	b.n	800b504 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	683a      	ldr	r2, [r7, #0]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d902      	bls.n	800b212 <f_lseek+0x114>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	683a      	ldr	r2, [r7, #0]
 800b216:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f000 8172 	beq.w	800b504 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	3b01      	subs	r3, #1
 800b224:	4619      	mov	r1, r3
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f7fe fc5e 	bl	8009ae8 <clmt_clust>
 800b22c:	4602      	mov	r2, r0
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800b232:	68ba      	ldr	r2, [r7, #8]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	69db      	ldr	r3, [r3, #28]
 800b238:	4619      	mov	r1, r3
 800b23a:	4610      	mov	r0, r2
 800b23c:	f7fe f9a4 	bl	8009588 <clust2sect>
 800b240:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d104      	bne.n	800b252 <f_lseek+0x154>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2202      	movs	r2, #2
 800b24c:	755a      	strb	r2, [r3, #21]
 800b24e:	2302      	movs	r3, #2
 800b250:	e15a      	b.n	800b508 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	3b01      	subs	r3, #1
 800b256:	0a5b      	lsrs	r3, r3, #9
 800b258:	68ba      	ldr	r2, [r7, #8]
 800b25a:	8952      	ldrh	r2, [r2, #10]
 800b25c:	3a01      	subs	r2, #1
 800b25e:	4013      	ands	r3, r2
 800b260:	69ba      	ldr	r2, [r7, #24]
 800b262:	4413      	add	r3, r2
 800b264:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	699b      	ldr	r3, [r3, #24]
 800b26a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b26e:	2b00      	cmp	r3, #0
 800b270:	f000 8148 	beq.w	800b504 <f_lseek+0x406>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6a1b      	ldr	r3, [r3, #32]
 800b278:	69ba      	ldr	r2, [r7, #24]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	f000 8142 	beq.w	800b504 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	7d1b      	ldrb	r3, [r3, #20]
 800b284:	b25b      	sxtb	r3, r3
 800b286:	2b00      	cmp	r3, #0
 800b288:	da18      	bge.n	800b2bc <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	7858      	ldrb	r0, [r3, #1]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6a1a      	ldr	r2, [r3, #32]
 800b298:	2301      	movs	r3, #1
 800b29a:	f7fd fdeb 	bl	8008e74 <disk_write>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d004      	beq.n	800b2ae <f_lseek+0x1b0>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	755a      	strb	r2, [r3, #21]
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e12c      	b.n	800b508 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	7d1b      	ldrb	r3, [r3, #20]
 800b2b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2b6:	b2da      	uxtb	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	7858      	ldrb	r0, [r3, #1]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	69ba      	ldr	r2, [r7, #24]
 800b2ca:	f7fd fdb3 	bl	8008e34 <disk_read>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d004      	beq.n	800b2de <f_lseek+0x1e0>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	755a      	strb	r2, [r3, #21]
 800b2da:	2301      	movs	r3, #1
 800b2dc:	e114      	b.n	800b508 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	69ba      	ldr	r2, [r7, #24]
 800b2e2:	621a      	str	r2, [r3, #32]
 800b2e4:	e10e      	b.n	800b504 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	683a      	ldr	r2, [r7, #0]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d908      	bls.n	800b302 <f_lseek+0x204>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	7d1b      	ldrb	r3, [r3, #20]
 800b2f4:	f003 0302 	and.w	r3, r3, #2
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d102      	bne.n	800b302 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	699b      	ldr	r3, [r3, #24]
 800b306:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800b308:	2300      	movs	r3, #0
 800b30a:	637b      	str	r3, [r7, #52]	; 0x34
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b310:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	f000 80a7 	beq.w	800b468 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	895b      	ldrh	r3, [r3, #10]
 800b31e:	025b      	lsls	r3, r3, #9
 800b320:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800b322:	6a3b      	ldr	r3, [r7, #32]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d01b      	beq.n	800b360 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	1e5a      	subs	r2, r3, #1
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b332:	6a3b      	ldr	r3, [r7, #32]
 800b334:	1e59      	subs	r1, r3, #1
 800b336:	69fb      	ldr	r3, [r7, #28]
 800b338:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d30f      	bcc.n	800b360 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800b340:	6a3b      	ldr	r3, [r7, #32]
 800b342:	1e5a      	subs	r2, r3, #1
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	425b      	negs	r3, r3
 800b348:	401a      	ands	r2, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	699b      	ldr	r3, [r3, #24]
 800b352:	683a      	ldr	r2, [r7, #0]
 800b354:	1ad3      	subs	r3, r2, r3
 800b356:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	69db      	ldr	r3, [r3, #28]
 800b35c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b35e:	e022      	b.n	800b3a6 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d119      	bne.n	800b3a0 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2100      	movs	r1, #0
 800b370:	4618      	mov	r0, r3
 800b372:	f7fe fb21 	bl	80099b8 <create_chain>
 800b376:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d104      	bne.n	800b388 <f_lseek+0x28a>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2202      	movs	r2, #2
 800b382:	755a      	strb	r2, [r3, #21]
 800b384:	2302      	movs	r3, #2
 800b386:	e0bf      	b.n	800b508 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b38e:	d104      	bne.n	800b39a <f_lseek+0x29c>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	755a      	strb	r2, [r3, #21]
 800b396:	2301      	movs	r3, #1
 800b398:	e0b6      	b.n	800b508 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b39e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3a4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800b3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d05d      	beq.n	800b468 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800b3ac:	e03a      	b.n	800b424 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800b3ae:	683a      	ldr	r2, [r7, #0]
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	1ad3      	subs	r3, r2, r3
 800b3b4:	603b      	str	r3, [r7, #0]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	699a      	ldr	r2, [r3, #24]
 800b3ba:	69fb      	ldr	r3, [r7, #28]
 800b3bc:	441a      	add	r2, r3
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	7d1b      	ldrb	r3, [r3, #20]
 800b3c6:	f003 0302 	and.w	r3, r3, #2
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00b      	beq.n	800b3e6 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7fe faf0 	bl	80099b8 <create_chain>
 800b3d8:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800b3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d108      	bne.n	800b3f2 <f_lseek+0x2f4>
							ofs = 0; break;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	603b      	str	r3, [r7, #0]
 800b3e4:	e022      	b.n	800b42c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7fe f8eb 	bl	80095c6 <get_fat>
 800b3f0:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3f8:	d104      	bne.n	800b404 <f_lseek+0x306>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	755a      	strb	r2, [r3, #21]
 800b400:	2301      	movs	r3, #1
 800b402:	e081      	b.n	800b508 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800b404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b406:	2b01      	cmp	r3, #1
 800b408:	d904      	bls.n	800b414 <f_lseek+0x316>
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	695b      	ldr	r3, [r3, #20]
 800b40e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b410:	429a      	cmp	r2, r3
 800b412:	d304      	bcc.n	800b41e <f_lseek+0x320>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2202      	movs	r2, #2
 800b418:	755a      	strb	r2, [r3, #21]
 800b41a:	2302      	movs	r3, #2
 800b41c:	e074      	b.n	800b508 <f_lseek+0x40a>
					fp->clust = clst;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b422:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800b424:	683a      	ldr	r2, [r7, #0]
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	429a      	cmp	r2, r3
 800b42a:	d8c0      	bhi.n	800b3ae <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	699a      	ldr	r2, [r3, #24]
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	441a      	add	r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d012      	beq.n	800b468 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b446:	4618      	mov	r0, r3
 800b448:	f7fe f89e 	bl	8009588 <clust2sect>
 800b44c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800b44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b450:	2b00      	cmp	r3, #0
 800b452:	d104      	bne.n	800b45e <f_lseek+0x360>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2202      	movs	r2, #2
 800b458:	755a      	strb	r2, [r3, #21]
 800b45a:	2302      	movs	r3, #2
 800b45c:	e054      	b.n	800b508 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	0a5b      	lsrs	r3, r3, #9
 800b462:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b464:	4413      	add	r3, r2
 800b466:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	699a      	ldr	r2, [r3, #24]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	429a      	cmp	r2, r3
 800b472:	d90a      	bls.n	800b48a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	699a      	ldr	r2, [r3, #24]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	7d1b      	ldrb	r3, [r3, #20]
 800b480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b484:	b2da      	uxtb	r2, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	699b      	ldr	r3, [r3, #24]
 800b48e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b492:	2b00      	cmp	r3, #0
 800b494:	d036      	beq.n	800b504 <f_lseek+0x406>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6a1b      	ldr	r3, [r3, #32]
 800b49a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d031      	beq.n	800b504 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	7d1b      	ldrb	r3, [r3, #20]
 800b4a4:	b25b      	sxtb	r3, r3
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	da18      	bge.n	800b4dc <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	7858      	ldrb	r0, [r3, #1]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6a1a      	ldr	r2, [r3, #32]
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	f7fd fcdb 	bl	8008e74 <disk_write>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d004      	beq.n	800b4ce <f_lseek+0x3d0>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	755a      	strb	r2, [r3, #21]
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e01c      	b.n	800b508 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	7d1b      	ldrb	r3, [r3, #20]
 800b4d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4d6:	b2da      	uxtb	r2, r3
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	7858      	ldrb	r0, [r3, #1]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4ea:	f7fd fca3 	bl	8008e34 <disk_read>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d004      	beq.n	800b4fe <f_lseek+0x400>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	755a      	strb	r2, [r3, #21]
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	e004      	b.n	800b508 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b502:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800b504:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3740      	adds	r7, #64	; 0x40
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b090      	sub	sp, #64	; 0x40
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800b51a:	f107 010c 	add.w	r1, r7, #12
 800b51e:	1d3b      	adds	r3, r7, #4
 800b520:	2200      	movs	r2, #0
 800b522:	4618      	mov	r0, r3
 800b524:	f7fe ff7e 	bl	800a424 <find_volume>
 800b528:	4603      	mov	r3, r0
 800b52a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800b52e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b532:	2b00      	cmp	r3, #0
 800b534:	d11f      	bne.n	800b576 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b536:	687a      	ldr	r2, [r7, #4]
 800b538:	f107 030c 	add.w	r3, r7, #12
 800b53c:	4611      	mov	r1, r2
 800b53e:	4618      	mov	r0, r3
 800b540:	f7fe fe64 	bl	800a20c <follow_path>
 800b544:	4603      	mov	r3, r0
 800b546:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800b54a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d111      	bne.n	800b576 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800b552:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b556:	b25b      	sxtb	r3, r3
 800b558:	2b00      	cmp	r3, #0
 800b55a:	da03      	bge.n	800b564 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800b55c:	2306      	movs	r3, #6
 800b55e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b562:	e008      	b.n	800b576 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d005      	beq.n	800b576 <f_stat+0x66>
 800b56a:	f107 030c 	add.w	r3, r7, #12
 800b56e:	6839      	ldr	r1, [r7, #0]
 800b570:	4618      	mov	r0, r3
 800b572:	f7fe fd58 	bl	800a026 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800b576:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3740      	adds	r7, #64	; 0x40
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}

0800b582 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 800b582:	b590      	push	{r4, r7, lr}
 800b584:	b0a5      	sub	sp, #148	; 0x94
 800b586:	af00      	add	r7, sp, #0
 800b588:	6078      	str	r0, [r7, #4]
 800b58a:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 800b58c:	463b      	mov	r3, r7
 800b58e:	4618      	mov	r0, r3
 800b590:	f7fe fead 	bl	800a2ee <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 800b594:	f107 0120 	add.w	r1, r7, #32
 800b598:	1d3b      	adds	r3, r7, #4
 800b59a:	2202      	movs	r2, #2
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7fe ff41 	bl	800a424 <find_volume>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (res == FR_OK) {
 800b5a8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f040 80db 	bne.w	800b768 <f_rename+0x1e6>
		djo.obj.fs = fs;
 800b5b2:	6a3b      	ldr	r3, [r7, #32]
 800b5b4:	657b      	str	r3, [r7, #84]	; 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b5bc:	4611      	mov	r1, r2
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7fe fe24 	bl	800a20c <follow_path>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800b5ca:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d108      	bne.n	800b5e4 <f_rename+0x62>
 800b5d2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800b5d6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d002      	beq.n	800b5e4 <f_rename+0x62>
 800b5de:	2306      	movs	r3, #6
 800b5e0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 800b5e4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d108      	bne.n	800b5fe <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 800b5ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b5f0:	2102      	movs	r1, #2
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7fd fd7c 	bl	80090f0 <chk_lock>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 800b5fe:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b602:	2b00      	cmp	r3, #0
 800b604:	f040 80b0 	bne.w	800b768 <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 800b608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b60a:	f103 010b 	add.w	r1, r3, #11
 800b60e:	f107 0308 	add.w	r3, r7, #8
 800b612:	2215      	movs	r2, #21
 800b614:	4618      	mov	r0, r3
 800b616:	f7fd fced 	bl	8008ff4 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 800b61a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800b61e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b622:	2230      	movs	r2, #48	; 0x30
 800b624:	4618      	mov	r0, r3
 800b626:	f7fd fce5 	bl	8008ff4 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800b62a:	683a      	ldr	r2, [r7, #0]
 800b62c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b630:	4611      	mov	r1, r2
 800b632:	4618      	mov	r0, r3
 800b634:	f7fe fdea 	bl	800a20c <follow_path>
 800b638:	4603      	mov	r3, r0
 800b63a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 800b63e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b642:	2b00      	cmp	r3, #0
 800b644:	d10c      	bne.n	800b660 <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800b646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b648:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d105      	bne.n	800b65a <f_rename+0xd8>
 800b64e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b650:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b652:	429a      	cmp	r2, r3
 800b654:	d101      	bne.n	800b65a <f_rename+0xd8>
 800b656:	2304      	movs	r3, #4
 800b658:	e000      	b.n	800b65c <f_rename+0xda>
 800b65a:	2308      	movs	r3, #8
 800b65c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800b660:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b664:	2b04      	cmp	r3, #4
 800b666:	d168      	bne.n	800b73a <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 800b668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7fe fc8a 	bl	8009f86 <dir_register>
 800b672:	4603      	mov	r3, r0
 800b674:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (res == FR_OK) {
 800b678:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d15c      	bne.n	800b73a <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 800b680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b682:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 800b686:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b68a:	f103 000d 	add.w	r0, r3, #13
 800b68e:	f107 0308 	add.w	r3, r7, #8
 800b692:	3302      	adds	r3, #2
 800b694:	2213      	movs	r2, #19
 800b696:	4619      	mov	r1, r3
 800b698:	f7fd fcac 	bl	8008ff4 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800b69c:	7a3a      	ldrb	r2, [r7, #8]
 800b69e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b6a2:	330b      	adds	r3, #11
 800b6a4:	f042 0220 	orr.w	r2, r2, #32
 800b6a8:	b2d2      	uxtb	r2, r2
 800b6aa:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 800b6ac:	6a3b      	ldr	r3, [r7, #32]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 800b6b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b6b6:	330b      	adds	r3, #11
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	f003 0310 	and.w	r3, r3, #16
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d03b      	beq.n	800b73a <f_rename+0x1b8>
 800b6c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d037      	beq.n	800b73a <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 800b6ca:	6a3c      	ldr	r4, [r7, #32]
 800b6cc:	6a3b      	ldr	r3, [r7, #32]
 800b6ce:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7fe fbc3 	bl	8009e5e <ld_clust>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	4619      	mov	r1, r3
 800b6dc:	4620      	mov	r0, r4
 800b6de:	f7fd ff53 	bl	8009588 <clust2sect>
 800b6e2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
							if (!dw) {
 800b6e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d103      	bne.n	800b6f6 <f_rename+0x174>
								res = FR_INT_ERR;
 800b6ee:	2302      	movs	r3, #2
 800b6f0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800b6f4:	e021      	b.n	800b73a <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 800b6f6:	6a3b      	ldr	r3, [r7, #32]
 800b6f8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7fd fea7 	bl	8009450 <move_window>
 800b702:	4603      	mov	r3, r0
 800b704:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 800b708:	6a3b      	ldr	r3, [r7, #32]
 800b70a:	3330      	adds	r3, #48	; 0x30
 800b70c:	3320      	adds	r3, #32
 800b70e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
								if (res == FR_OK && dir[1] == '.') {
 800b712:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b716:	2b00      	cmp	r3, #0
 800b718:	d10f      	bne.n	800b73a <f_rename+0x1b8>
 800b71a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b71e:	3301      	adds	r3, #1
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	2b2e      	cmp	r3, #46	; 0x2e
 800b724:	d109      	bne.n	800b73a <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 800b726:	6a3b      	ldr	r3, [r7, #32]
 800b728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b72a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800b72e:	4618      	mov	r0, r3
 800b730:	f7fe fbb4 	bl	8009e9c <st_clust>
									fs->wflag = 1;
 800b734:	6a3b      	ldr	r3, [r7, #32]
 800b736:	2201      	movs	r2, #1
 800b738:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 800b73a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d112      	bne.n	800b768 <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 800b742:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b746:	4618      	mov	r0, r3
 800b748:	f7fe fc4f 	bl	8009fea <dir_remove>
 800b74c:	4603      	mov	r3, r0
 800b74e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				if (res == FR_OK) {
 800b752:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800b756:	2b00      	cmp	r3, #0
 800b758:	d106      	bne.n	800b768 <f_rename+0x1e6>
					res = sync_fs(fs);
 800b75a:	6a3b      	ldr	r3, [r7, #32]
 800b75c:	4618      	mov	r0, r3
 800b75e:	f7fd fea5 	bl	80094ac <sync_fs>
 800b762:	4603      	mov	r3, r0
 800b764:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b768:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3794      	adds	r7, #148	; 0x94
 800b770:	46bd      	mov	sp, r7
 800b772:	bd90      	pop	{r4, r7, pc}

0800b774 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b774:	b480      	push	{r7}
 800b776:	b087      	sub	sp, #28
 800b778:	af00      	add	r7, sp, #0
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	4613      	mov	r3, r2
 800b780:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b782:	2301      	movs	r3, #1
 800b784:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b786:	2300      	movs	r3, #0
 800b788:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b78a:	4b1f      	ldr	r3, [pc, #124]	; (800b808 <FATFS_LinkDriverEx+0x94>)
 800b78c:	7a5b      	ldrb	r3, [r3, #9]
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	2b00      	cmp	r3, #0
 800b792:	d131      	bne.n	800b7f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b794:	4b1c      	ldr	r3, [pc, #112]	; (800b808 <FATFS_LinkDriverEx+0x94>)
 800b796:	7a5b      	ldrb	r3, [r3, #9]
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	461a      	mov	r2, r3
 800b79c:	4b1a      	ldr	r3, [pc, #104]	; (800b808 <FATFS_LinkDriverEx+0x94>)
 800b79e:	2100      	movs	r1, #0
 800b7a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b7a2:	4b19      	ldr	r3, [pc, #100]	; (800b808 <FATFS_LinkDriverEx+0x94>)
 800b7a4:	7a5b      	ldrb	r3, [r3, #9]
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	4a17      	ldr	r2, [pc, #92]	; (800b808 <FATFS_LinkDriverEx+0x94>)
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	4413      	add	r3, r2
 800b7ae:	68fa      	ldr	r2, [r7, #12]
 800b7b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b7b2:	4b15      	ldr	r3, [pc, #84]	; (800b808 <FATFS_LinkDriverEx+0x94>)
 800b7b4:	7a5b      	ldrb	r3, [r3, #9]
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	4b13      	ldr	r3, [pc, #76]	; (800b808 <FATFS_LinkDriverEx+0x94>)
 800b7bc:	4413      	add	r3, r2
 800b7be:	79fa      	ldrb	r2, [r7, #7]
 800b7c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b7c2:	4b11      	ldr	r3, [pc, #68]	; (800b808 <FATFS_LinkDriverEx+0x94>)
 800b7c4:	7a5b      	ldrb	r3, [r3, #9]
 800b7c6:	b2db      	uxtb	r3, r3
 800b7c8:	1c5a      	adds	r2, r3, #1
 800b7ca:	b2d1      	uxtb	r1, r2
 800b7cc:	4a0e      	ldr	r2, [pc, #56]	; (800b808 <FATFS_LinkDriverEx+0x94>)
 800b7ce:	7251      	strb	r1, [r2, #9]
 800b7d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b7d2:	7dbb      	ldrb	r3, [r7, #22]
 800b7d4:	3330      	adds	r3, #48	; 0x30
 800b7d6:	b2da      	uxtb	r2, r3
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	3301      	adds	r3, #1
 800b7e0:	223a      	movs	r2, #58	; 0x3a
 800b7e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	3302      	adds	r3, #2
 800b7e8:	222f      	movs	r2, #47	; 0x2f
 800b7ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	3303      	adds	r3, #3
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b7f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	371c      	adds	r7, #28
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr
 800b806:	bf00      	nop
 800b808:	200005b0 	.word	0x200005b0

0800b80c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b816:	2200      	movs	r2, #0
 800b818:	6839      	ldr	r1, [r7, #0]
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f7ff ffaa 	bl	800b774 <FATFS_LinkDriverEx>
 800b820:	4603      	mov	r3, r0
}
 800b822:	4618      	mov	r0, r3
 800b824:	3708      	adds	r7, #8
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
	...

0800b82c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b830:	2201      	movs	r2, #1
 800b832:	490e      	ldr	r1, [pc, #56]	; (800b86c <MX_USB_HOST_Init+0x40>)
 800b834:	480e      	ldr	r0, [pc, #56]	; (800b870 <MX_USB_HOST_Init+0x44>)
 800b836:	f7fb fe6b 	bl	8007510 <USBH_Init>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d001      	beq.n	800b844 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b840:	f7f4 ffd0 	bl	80007e4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800b844:	490b      	ldr	r1, [pc, #44]	; (800b874 <MX_USB_HOST_Init+0x48>)
 800b846:	480a      	ldr	r0, [pc, #40]	; (800b870 <MX_USB_HOST_Init+0x44>)
 800b848:	f7fb fef0 	bl	800762c <USBH_RegisterClass>
 800b84c:	4603      	mov	r3, r0
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d001      	beq.n	800b856 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b852:	f7f4 ffc7 	bl	80007e4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b856:	4806      	ldr	r0, [pc, #24]	; (800b870 <MX_USB_HOST_Init+0x44>)
 800b858:	f7fb ff74 	bl	8007744 <USBH_Start>
 800b85c:	4603      	mov	r3, r0
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d001      	beq.n	800b866 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b862:	f7f4 ffbf 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b866:	bf00      	nop
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	0800b88d 	.word	0x0800b88d
 800b870:	200005bc 	.word	0x200005bc
 800b874:	2000000c 	.word	0x2000000c

0800b878 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b87c:	4802      	ldr	r0, [pc, #8]	; (800b888 <MX_USB_HOST_Process+0x10>)
 800b87e:	f7fb ff71 	bl	8007764 <USBH_Process>
}
 800b882:	bf00      	nop
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop
 800b888:	200005bc 	.word	0x200005bc

0800b88c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	460b      	mov	r3, r1
 800b896:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b898:	78fb      	ldrb	r3, [r7, #3]
 800b89a:	3b01      	subs	r3, #1
 800b89c:	2b04      	cmp	r3, #4
 800b89e:	d81d      	bhi.n	800b8dc <USBH_UserProcess+0x50>
 800b8a0:	a201      	add	r2, pc, #4	; (adr r2, 800b8a8 <USBH_UserProcess+0x1c>)
 800b8a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8a6:	bf00      	nop
 800b8a8:	0800b8bd 	.word	0x0800b8bd
 800b8ac:	0800b8cd 	.word	0x0800b8cd
 800b8b0:	0800b8dd 	.word	0x0800b8dd
 800b8b4:	0800b8d5 	.word	0x0800b8d5
 800b8b8:	0800b8c5 	.word	0x0800b8c5
  {
  case HOST_USER_SELECT_CONFIGURATION:
	  Appli_state = 4;
 800b8bc:	4b0b      	ldr	r3, [pc, #44]	; (800b8ec <USBH_UserProcess+0x60>)
 800b8be:	2204      	movs	r2, #4
 800b8c0:	701a      	strb	r2, [r3, #0]
  break;
 800b8c2:	e00c      	b.n	800b8de <USBH_UserProcess+0x52>

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b8c4:	4b09      	ldr	r3, [pc, #36]	; (800b8ec <USBH_UserProcess+0x60>)
 800b8c6:	2203      	movs	r2, #3
 800b8c8:	701a      	strb	r2, [r3, #0]
  break;
 800b8ca:	e008      	b.n	800b8de <USBH_UserProcess+0x52>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b8cc:	4b07      	ldr	r3, [pc, #28]	; (800b8ec <USBH_UserProcess+0x60>)
 800b8ce:	2202      	movs	r2, #2
 800b8d0:	701a      	strb	r2, [r3, #0]
  break;
 800b8d2:	e004      	b.n	800b8de <USBH_UserProcess+0x52>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b8d4:	4b05      	ldr	r3, [pc, #20]	; (800b8ec <USBH_UserProcess+0x60>)
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	701a      	strb	r2, [r3, #0]
  break;
 800b8da:	e000      	b.n	800b8de <USBH_UserProcess+0x52>

  default:
  break;
 800b8dc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b8de:	bf00      	nop
 800b8e0:	370c      	adds	r7, #12
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr
 800b8ea:	bf00      	nop
 800b8ec:	20000994 	.word	0x20000994

0800b8f0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b0a0      	sub	sp, #128	; 0x80
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b8f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	601a      	str	r2, [r3, #0]
 800b900:	605a      	str	r2, [r3, #4]
 800b902:	609a      	str	r2, [r3, #8]
 800b904:	60da      	str	r2, [r3, #12]
 800b906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800b908:	f107 0310 	add.w	r3, r7, #16
 800b90c:	225c      	movs	r2, #92	; 0x5c
 800b90e:	2100      	movs	r1, #0
 800b910:	4618      	mov	r0, r3
 800b912:	f000 fdcb 	bl	800c4ac <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b91e:	d154      	bne.n	800b9ca <HAL_HCD_MspInit+0xda>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800b920:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b924:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 6;
 800b926:	2306      	movs	r3, #6
 800b928:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 800b92a:	2360      	movs	r3, #96	; 0x60
 800b92c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800b92e:	2302      	movs	r3, #2
 800b930:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 800b932:	2304      	movs	r3, #4
 800b934:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800b936:	2301      	movs	r3, #1
 800b938:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800b93a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b93e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800b940:	f107 0310 	add.w	r3, r7, #16
 800b944:	4618      	mov	r0, r3
 800b946:	f7f7 fe07 	bl	8003558 <HAL_RCCEx_PeriphCLKConfig>
 800b94a:	4603      	mov	r3, r0
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d001      	beq.n	800b954 <HAL_HCD_MspInit+0x64>
    {
      Error_Handler();
 800b950:	f7f4 ff48 	bl	80007e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b954:	2300      	movs	r3, #0
 800b956:	60fb      	str	r3, [r7, #12]
 800b958:	4b1e      	ldr	r3, [pc, #120]	; (800b9d4 <HAL_HCD_MspInit+0xe4>)
 800b95a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b95c:	4a1d      	ldr	r2, [pc, #116]	; (800b9d4 <HAL_HCD_MspInit+0xe4>)
 800b95e:	f043 0301 	orr.w	r3, r3, #1
 800b962:	6313      	str	r3, [r2, #48]	; 0x30
 800b964:	4b1b      	ldr	r3, [pc, #108]	; (800b9d4 <HAL_HCD_MspInit+0xe4>)
 800b966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b968:	f003 0301 	and.w	r3, r3, #1
 800b96c:	60fb      	str	r3, [r7, #12]
 800b96e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b970:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b974:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b976:	2302      	movs	r3, #2
 800b978:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b97a:	2300      	movs	r3, #0
 800b97c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b97e:	2303      	movs	r3, #3
 800b980:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b982:	230a      	movs	r3, #10
 800b984:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b986:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b98a:	4619      	mov	r1, r3
 800b98c:	4812      	ldr	r0, [pc, #72]	; (800b9d8 <HAL_HCD_MspInit+0xe8>)
 800b98e:	f7f5 fdaf 	bl	80014f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b992:	4b10      	ldr	r3, [pc, #64]	; (800b9d4 <HAL_HCD_MspInit+0xe4>)
 800b994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b996:	4a0f      	ldr	r2, [pc, #60]	; (800b9d4 <HAL_HCD_MspInit+0xe4>)
 800b998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b99c:	6353      	str	r3, [r2, #52]	; 0x34
 800b99e:	2300      	movs	r3, #0
 800b9a0:	60bb      	str	r3, [r7, #8]
 800b9a2:	4b0c      	ldr	r3, [pc, #48]	; (800b9d4 <HAL_HCD_MspInit+0xe4>)
 800b9a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9a6:	4a0b      	ldr	r2, [pc, #44]	; (800b9d4 <HAL_HCD_MspInit+0xe4>)
 800b9a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b9ac:	6453      	str	r3, [r2, #68]	; 0x44
 800b9ae:	4b09      	ldr	r3, [pc, #36]	; (800b9d4 <HAL_HCD_MspInit+0xe4>)
 800b9b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9b6:	60bb      	str	r3, [r7, #8]
 800b9b8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	2100      	movs	r1, #0
 800b9be:	2043      	movs	r0, #67	; 0x43
 800b9c0:	f7f5 fa5d 	bl	8000e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b9c4:	2043      	movs	r0, #67	; 0x43
 800b9c6:	f7f5 fa76 	bl	8000eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b9ca:	bf00      	nop
 800b9cc:	3780      	adds	r7, #128	; 0x80
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	40023800 	.word	0x40023800
 800b9d8:	40020000 	.word	0x40020000

0800b9dc <HAL_HCD_MspDeInit>:

void HAL_HCD_MspDeInit(HCD_HandleTypeDef* hcdHandle)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b082      	sub	sp, #8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9ec:	d10d      	bne.n	800ba0a <HAL_HCD_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 0 */

  /* USER CODE END USB_OTG_FS_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_OTG_FS_CLK_DISABLE();
 800b9ee:	4b09      	ldr	r3, [pc, #36]	; (800ba14 <HAL_HCD_MspDeInit+0x38>)
 800b9f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9f2:	4a08      	ldr	r2, [pc, #32]	; (800ba14 <HAL_HCD_MspDeInit+0x38>)
 800b9f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9f8:	6353      	str	r3, [r2, #52]	; 0x34

    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 800b9fa:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b9fe:	4806      	ldr	r0, [pc, #24]	; (800ba18 <HAL_HCD_MspDeInit+0x3c>)
 800ba00:	f7f5 ff0a 	bl	8001818 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 800ba04:	2043      	movs	r0, #67	; 0x43
 800ba06:	f7f5 fa64 	bl	8000ed2 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_OTG_FS_MspDeInit 1 */

  /* USER CODE END USB_OTG_FS_MspDeInit 1 */
  }
}
 800ba0a:	bf00      	nop
 800ba0c:	3708      	adds	r7, #8
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	40023800 	.word	0x40023800
 800ba18:	40020000 	.word	0x40020000

0800ba1c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7fc fa79 	bl	8007f22 <USBH_LL_IncTimer>
}
 800ba30:	bf00      	nop
 800ba32:	3708      	adds	r7, #8
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7fc fab1 	bl	8007fae <USBH_LL_Connect>
}
 800ba4c:	bf00      	nop
 800ba4e:	3708      	adds	r7, #8
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b082      	sub	sp, #8
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fc faba 	bl	8007fdc <USBH_LL_Disconnect>
}
 800ba68:	bf00      	nop
 800ba6a:	3708      	adds	r7, #8
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b083      	sub	sp, #12
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	460b      	mov	r3, r1
 800ba7a:	70fb      	strb	r3, [r7, #3]
 800ba7c:	4613      	mov	r3, r2
 800ba7e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ba80:	bf00      	nop
 800ba82:	370c      	adds	r7, #12
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr

0800ba8c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7fc fa6b 	bl	8007f76 <USBH_LL_PortEnabled>
}
 800baa0:	bf00      	nop
 800baa2:	3708      	adds	r7, #8
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bab6:	4618      	mov	r0, r3
 800bab8:	f7fc fa6b 	bl	8007f92 <USBH_LL_PortDisabled>
}
 800babc:	bf00      	nop
 800babe:	3708      	adds	r7, #8
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d12a      	bne.n	800bb2c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800bad6:	4a18      	ldr	r2, [pc, #96]	; (800bb38 <USBH_LL_Init+0x74>)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	4a15      	ldr	r2, [pc, #84]	; (800bb38 <USBH_LL_Init+0x74>)
 800bae2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bae6:	4b14      	ldr	r3, [pc, #80]	; (800bb38 <USBH_LL_Init+0x74>)
 800bae8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800baec:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800baee:	4b12      	ldr	r3, [pc, #72]	; (800bb38 <USBH_LL_Init+0x74>)
 800baf0:	220c      	movs	r2, #12
 800baf2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800baf4:	4b10      	ldr	r3, [pc, #64]	; (800bb38 <USBH_LL_Init+0x74>)
 800baf6:	2201      	movs	r2, #1
 800baf8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bafa:	4b0f      	ldr	r3, [pc, #60]	; (800bb38 <USBH_LL_Init+0x74>)
 800bafc:	2200      	movs	r2, #0
 800bafe:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800bb00:	4b0d      	ldr	r3, [pc, #52]	; (800bb38 <USBH_LL_Init+0x74>)
 800bb02:	2202      	movs	r2, #2
 800bb04:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bb06:	4b0c      	ldr	r3, [pc, #48]	; (800bb38 <USBH_LL_Init+0x74>)
 800bb08:	2200      	movs	r2, #0
 800bb0a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800bb0c:	480a      	ldr	r0, [pc, #40]	; (800bb38 <USBH_LL_Init+0x74>)
 800bb0e:	f7f5 ff90 	bl	8001a32 <HAL_HCD_Init>
 800bb12:	4603      	mov	r3, r0
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d001      	beq.n	800bb1c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800bb18:	f7f4 fe64 	bl	80007e4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800bb1c:	4806      	ldr	r0, [pc, #24]	; (800bb38 <USBH_LL_Init+0x74>)
 800bb1e:	f7f6 fb92 	bl	8002246 <HAL_HCD_GetCurrentFrame>
 800bb22:	4603      	mov	r3, r0
 800bb24:	4619      	mov	r1, r3
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f7fc f9ec 	bl	8007f04 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bb2c:	2300      	movs	r3, #0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3708      	adds	r7, #8
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	20000998 	.word	0x20000998

0800bb3c <USBH_LL_DeInit>:
  * @brief  De-Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_DeInit(USBH_HandleTypeDef *phost)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb44:	2300      	movs	r3, #0
 800bb46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_DeInit(phost->pData);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7f6 f881 	bl	8001c5a <HAL_HCD_DeInit>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bb5c:	7bfb      	ldrb	r3, [r7, #15]
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f000 f9a6 	bl	800beb0 <USBH_Get_USB_Status>
 800bb64:	4603      	mov	r3, r0
 800bb66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb68:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3710      	adds	r7, #16
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b084      	sub	sp, #16
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7f6 fae6 	bl	800215a <HAL_HCD_Start>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bb92:	7bfb      	ldrb	r3, [r7, #15]
 800bb94:	4618      	mov	r0, r3
 800bb96:	f000 f98b 	bl	800beb0 <USBH_Get_USB_Status>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3710      	adds	r7, #16
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b084      	sub	sp, #16
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7f6 faee 	bl	80021a0 <HAL_HCD_Stop>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bbc8:	7bfb      	ldrb	r3, [r7, #15]
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f000 f970 	bl	800beb0 <USBH_Get_USB_Status>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3710      	adds	r7, #16
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b084      	sub	sp, #16
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7f6 fb36 	bl	8002262 <HAL_HCD_GetCurrentSpeed>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2b02      	cmp	r3, #2
 800bbfa:	d00c      	beq.n	800bc16 <USBH_LL_GetSpeed+0x38>
 800bbfc:	2b02      	cmp	r3, #2
 800bbfe:	d80d      	bhi.n	800bc1c <USBH_LL_GetSpeed+0x3e>
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d002      	beq.n	800bc0a <USBH_LL_GetSpeed+0x2c>
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d003      	beq.n	800bc10 <USBH_LL_GetSpeed+0x32>
 800bc08:	e008      	b.n	800bc1c <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	73fb      	strb	r3, [r7, #15]
    break;
 800bc0e:	e008      	b.n	800bc22 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800bc10:	2301      	movs	r3, #1
 800bc12:	73fb      	strb	r3, [r7, #15]
    break;
 800bc14:	e005      	b.n	800bc22 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800bc16:	2302      	movs	r3, #2
 800bc18:	73fb      	strb	r3, [r7, #15]
    break;
 800bc1a:	e002      	b.n	800bc22 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc20:	bf00      	nop
  }
  return  speed;
 800bc22:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3710      	adds	r7, #16
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc34:	2300      	movs	r3, #0
 800bc36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7f6 fac9 	bl	80021da <HAL_HCD_ResetPort>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bc4c:	7bfb      	ldrb	r3, [r7, #15]
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f000 f92e 	bl	800beb0 <USBH_Get_USB_Status>
 800bc54:	4603      	mov	r3, r0
 800bc56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc58:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3710      	adds	r7, #16
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}

0800bc62 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bc62:	b580      	push	{r7, lr}
 800bc64:	b082      	sub	sp, #8
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bc74:	78fa      	ldrb	r2, [r7, #3]
 800bc76:	4611      	mov	r1, r2
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f7f6 fad0 	bl	800221e <HAL_HCD_HC_GetXferCount>
 800bc7e:	4603      	mov	r3, r0
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3708      	adds	r7, #8
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bc88:	b590      	push	{r4, r7, lr}
 800bc8a:	b089      	sub	sp, #36	; 0x24
 800bc8c:	af04      	add	r7, sp, #16
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	4608      	mov	r0, r1
 800bc92:	4611      	mov	r1, r2
 800bc94:	461a      	mov	r2, r3
 800bc96:	4603      	mov	r3, r0
 800bc98:	70fb      	strb	r3, [r7, #3]
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	70bb      	strb	r3, [r7, #2]
 800bc9e:	4613      	mov	r3, r2
 800bca0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bca2:	2300      	movs	r3, #0
 800bca4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bca6:	2300      	movs	r3, #0
 800bca8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bcb0:	787c      	ldrb	r4, [r7, #1]
 800bcb2:	78ba      	ldrb	r2, [r7, #2]
 800bcb4:	78f9      	ldrb	r1, [r7, #3]
 800bcb6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bcb8:	9302      	str	r3, [sp, #8]
 800bcba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bcbe:	9301      	str	r3, [sp, #4]
 800bcc0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bcc4:	9300      	str	r3, [sp, #0]
 800bcc6:	4623      	mov	r3, r4
 800bcc8:	f7f5 ff15 	bl	8001af6 <HAL_HCD_HC_Init>
 800bccc:	4603      	mov	r3, r0
 800bcce:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bcd0:	7bfb      	ldrb	r3, [r7, #15]
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f000 f8ec 	bl	800beb0 <USBH_Get_USB_Status>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3714      	adds	r7, #20
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd90      	pop	{r4, r7, pc}

0800bce6 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bce6:	b580      	push	{r7, lr}
 800bce8:	b084      	sub	sp, #16
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
 800bcee:	460b      	mov	r3, r1
 800bcf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bd00:	78fa      	ldrb	r2, [r7, #3]
 800bd02:	4611      	mov	r1, r2
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7f5 ff85 	bl	8001c14 <HAL_HCD_HC_Halt>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bd0e:	7bfb      	ldrb	r3, [r7, #15]
 800bd10:	4618      	mov	r0, r3
 800bd12:	f000 f8cd 	bl	800beb0 <USBH_Get_USB_Status>
 800bd16:	4603      	mov	r3, r0
 800bd18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3710      	adds	r7, #16
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bd24:	b590      	push	{r4, r7, lr}
 800bd26:	b089      	sub	sp, #36	; 0x24
 800bd28:	af04      	add	r7, sp, #16
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	4608      	mov	r0, r1
 800bd2e:	4611      	mov	r1, r2
 800bd30:	461a      	mov	r2, r3
 800bd32:	4603      	mov	r3, r0
 800bd34:	70fb      	strb	r3, [r7, #3]
 800bd36:	460b      	mov	r3, r1
 800bd38:	70bb      	strb	r3, [r7, #2]
 800bd3a:	4613      	mov	r3, r2
 800bd3c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd42:	2300      	movs	r3, #0
 800bd44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800bd4c:	787c      	ldrb	r4, [r7, #1]
 800bd4e:	78ba      	ldrb	r2, [r7, #2]
 800bd50:	78f9      	ldrb	r1, [r7, #3]
 800bd52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bd56:	9303      	str	r3, [sp, #12]
 800bd58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bd5a:	9302      	str	r3, [sp, #8]
 800bd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd5e:	9301      	str	r3, [sp, #4]
 800bd60:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd64:	9300      	str	r3, [sp, #0]
 800bd66:	4623      	mov	r3, r4
 800bd68:	f7f5 ff96 	bl	8001c98 <HAL_HCD_HC_SubmitRequest>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bd70:	7bfb      	ldrb	r3, [r7, #15]
 800bd72:	4618      	mov	r0, r3
 800bd74:	f000 f89c 	bl	800beb0 <USBH_Get_USB_Status>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3714      	adds	r7, #20
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd90      	pop	{r4, r7, pc}

0800bd86 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b082      	sub	sp, #8
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
 800bd8e:	460b      	mov	r3, r1
 800bd90:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bd98:	78fa      	ldrb	r2, [r7, #3]
 800bd9a:	4611      	mov	r1, r2
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f7f6 fa2a 	bl	80021f6 <HAL_HCD_HC_GetURBState>
 800bda2:	4603      	mov	r3, r0
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3708      	adds	r7, #8
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d103      	bne.n	800bdca <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bdc2:	78fb      	ldrb	r3, [r7, #3]
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f000 f89f 	bl	800bf08 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bdca:	20c8      	movs	r0, #200	; 0xc8
 800bdcc:	f7f4 ff34 	bl	8000c38 <HAL_Delay>
  return USBH_OK;
 800bdd0:	2300      	movs	r3, #0
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3708      	adds	r7, #8
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bdda:	b480      	push	{r7}
 800bddc:	b085      	sub	sp, #20
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
 800bde2:	460b      	mov	r3, r1
 800bde4:	70fb      	strb	r3, [r7, #3]
 800bde6:	4613      	mov	r3, r2
 800bde8:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800bdf0:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bdf2:	78fb      	ldrb	r3, [r7, #3]
 800bdf4:	68fa      	ldr	r2, [r7, #12]
 800bdf6:	212c      	movs	r1, #44	; 0x2c
 800bdf8:	fb01 f303 	mul.w	r3, r1, r3
 800bdfc:	4413      	add	r3, r2
 800bdfe:	333b      	adds	r3, #59	; 0x3b
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d009      	beq.n	800be1a <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800be06:	78fb      	ldrb	r3, [r7, #3]
 800be08:	68fa      	ldr	r2, [r7, #12]
 800be0a:	212c      	movs	r1, #44	; 0x2c
 800be0c:	fb01 f303 	mul.w	r3, r1, r3
 800be10:	4413      	add	r3, r2
 800be12:	3354      	adds	r3, #84	; 0x54
 800be14:	78ba      	ldrb	r2, [r7, #2]
 800be16:	701a      	strb	r2, [r3, #0]
 800be18:	e008      	b.n	800be2c <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800be1a:	78fb      	ldrb	r3, [r7, #3]
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	212c      	movs	r1, #44	; 0x2c
 800be20:	fb01 f303 	mul.w	r3, r1, r3
 800be24:	4413      	add	r3, r2
 800be26:	3355      	adds	r3, #85	; 0x55
 800be28:	78ba      	ldrb	r2, [r7, #2]
 800be2a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800be2c:	2300      	movs	r3, #0
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3714      	adds	r7, #20
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr

0800be3a <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800be3a:	b480      	push	{r7}
 800be3c:	b085      	sub	sp, #20
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
 800be42:	460b      	mov	r3, r1
 800be44:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800be46:	2300      	movs	r3, #0
 800be48:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800be50:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800be52:	78fb      	ldrb	r3, [r7, #3]
 800be54:	68ba      	ldr	r2, [r7, #8]
 800be56:	212c      	movs	r1, #44	; 0x2c
 800be58:	fb01 f303 	mul.w	r3, r1, r3
 800be5c:	4413      	add	r3, r2
 800be5e:	333b      	adds	r3, #59	; 0x3b
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d009      	beq.n	800be7a <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800be66:	78fb      	ldrb	r3, [r7, #3]
 800be68:	68ba      	ldr	r2, [r7, #8]
 800be6a:	212c      	movs	r1, #44	; 0x2c
 800be6c:	fb01 f303 	mul.w	r3, r1, r3
 800be70:	4413      	add	r3, r2
 800be72:	3354      	adds	r3, #84	; 0x54
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	73fb      	strb	r3, [r7, #15]
 800be78:	e008      	b.n	800be8c <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800be7a:	78fb      	ldrb	r3, [r7, #3]
 800be7c:	68ba      	ldr	r2, [r7, #8]
 800be7e:	212c      	movs	r1, #44	; 0x2c
 800be80:	fb01 f303 	mul.w	r3, r1, r3
 800be84:	4413      	add	r3, r2
 800be86:	3355      	adds	r3, #85	; 0x55
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800be8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3714      	adds	r7, #20
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr

0800be9a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b082      	sub	sp, #8
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f7f4 fec8 	bl	8000c38 <HAL_Delay>
}
 800bea8:	bf00      	nop
 800beaa:	3708      	adds	r7, #8
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b085      	sub	sp, #20
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	4603      	mov	r3, r0
 800beb8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800beba:	2300      	movs	r3, #0
 800bebc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bebe:	79fb      	ldrb	r3, [r7, #7]
 800bec0:	2b03      	cmp	r3, #3
 800bec2:	d817      	bhi.n	800bef4 <USBH_Get_USB_Status+0x44>
 800bec4:	a201      	add	r2, pc, #4	; (adr r2, 800becc <USBH_Get_USB_Status+0x1c>)
 800bec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beca:	bf00      	nop
 800becc:	0800bedd 	.word	0x0800bedd
 800bed0:	0800bee3 	.word	0x0800bee3
 800bed4:	0800bee9 	.word	0x0800bee9
 800bed8:	0800beef 	.word	0x0800beef
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bedc:	2300      	movs	r3, #0
 800bede:	73fb      	strb	r3, [r7, #15]
    break;
 800bee0:	e00b      	b.n	800befa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bee2:	2302      	movs	r3, #2
 800bee4:	73fb      	strb	r3, [r7, #15]
    break;
 800bee6:	e008      	b.n	800befa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bee8:	2301      	movs	r3, #1
 800beea:	73fb      	strb	r3, [r7, #15]
    break;
 800beec:	e005      	b.n	800befa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800beee:	2302      	movs	r3, #2
 800bef0:	73fb      	strb	r3, [r7, #15]
    break;
 800bef2:	e002      	b.n	800befa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bef4:	2302      	movs	r3, #2
 800bef6:	73fb      	strb	r3, [r7, #15]
    break;
 800bef8:	bf00      	nop
  }
  return usb_status;
 800befa:	7bfb      	ldrb	r3, [r7, #15]
}
 800befc:	4618      	mov	r0, r3
 800befe:	3714      	adds	r7, #20
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	4603      	mov	r3, r0
 800bf10:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bf12:	79fb      	ldrb	r3, [r7, #7]
 800bf14:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bf16:	79fb      	ldrb	r3, [r7, #7]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d102      	bne.n	800bf22 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	73fb      	strb	r3, [r7, #15]
 800bf20:	e001      	b.n	800bf26 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800bf22:	2301      	movs	r3, #1
 800bf24:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,(GPIO_PinState)data);
 800bf26:	7bfb      	ldrb	r3, [r7, #15]
 800bf28:	461a      	mov	r2, r3
 800bf2a:	2102      	movs	r1, #2
 800bf2c:	4803      	ldr	r0, [pc, #12]	; (800bf3c <MX_DriverVbusFS+0x34>)
 800bf2e:	f7f5 fd67 	bl	8001a00 <HAL_GPIO_WritePin>
}
 800bf32:	bf00      	nop
 800bf34:	3710      	adds	r7, #16
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	40020000 	.word	0x40020000

0800bf40 <FLASH_Erase_Write>:
typedef void (*pFunction)(void);
pFunction Jump_To_Application;                                //函数指针
uint32_t JumpAddress;                                         //跳转地址   为用户起始地址加4
uint32_t bootloaderTimeout = 0;
uint32_t FLASH_Erase_Write(void)		                      //FLASH擦写
{
 800bf40:	b5b0      	push	{r4, r5, r7, lr}
 800bf42:	b082      	sub	sp, #8
 800bf44:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 800bf46:	2300      	movs	r3, #0
 800bf48:	607b      	str	r3, [r7, #4]
	HAL_FLASH_Unlock();		                                  //解锁
 800bf4a:	f7f5 f831 	bl	8000fb0 <HAL_FLASH_Unlock>
	if (lseekFlag == 1) {
 800bf4e:	4b61      	ldr	r3, [pc, #388]	; (800c0d4 <FLASH_Erase_Write+0x194>)
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d120      	bne.n	800bf98 <FLASH_Erase_Write+0x58>
		EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;               //擦除类型，扇区擦除
 800bf56:	4b60      	ldr	r3, [pc, #384]	; (800c0d8 <FLASH_Erase_Write+0x198>)
 800bf58:	2200      	movs	r2, #0
 800bf5a:	601a      	str	r2, [r3, #0]
		EraseInitStruct.Sector = FLASH_SECTOR_4;                           //要擦除的扇区
 800bf5c:	4b5e      	ldr	r3, [pc, #376]	; (800c0d8 <FLASH_Erase_Write+0x198>)
 800bf5e:	2204      	movs	r2, #4
 800bf60:	609a      	str	r2, [r3, #8]
		EraseInitStruct.NbSectors = 4;                                     //一次只擦除4个扇区
 800bf62:	4b5d      	ldr	r3, [pc, #372]	; (800c0d8 <FLASH_Erase_Write+0x198>)
 800bf64:	2204      	movs	r2, #4
 800bf66:	60da      	str	r2, [r3, #12]
		EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;              //电压
 800bf68:	4b5b      	ldr	r3, [pc, #364]	; (800c0d8 <FLASH_Erase_Write+0x198>)
 800bf6a:	2202      	movs	r2, #2
 800bf6c:	611a      	str	r2, [r3, #16]
		if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK)   //擦除所定义的结构体扇区
 800bf6e:	495b      	ldr	r1, [pc, #364]	; (800c0dc <FLASH_Erase_Write+0x19c>)
 800bf70:	4859      	ldr	r0, [pc, #356]	; (800c0d8 <FLASH_Erase_Write+0x198>)
 800bf72:	f7f5 f99b 	bl	80012ac <HAL_FLASHEx_Erase>
 800bf76:	4603      	mov	r3, r0
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d00d      	beq.n	800bf98 <FLASH_Erase_Write+0x58>
				{
			errorcode = HAL_FLASH_GetError();		                       //擦除失败的扇区
 800bf7c:	f7f5 f84a 	bl	8001014 <HAL_FLASH_GetError>
 800bf80:	4603      	mov	r3, r0
 800bf82:	b2da      	uxtb	r2, r3
 800bf84:	4b56      	ldr	r3, [pc, #344]	; (800c0e0 <FLASH_Erase_Write+0x1a0>)
 800bf86:	701a      	strb	r2, [r3, #0]
			printf("errorcode %d", errorcode);
 800bf88:	4b55      	ldr	r3, [pc, #340]	; (800c0e0 <FLASH_Erase_Write+0x1a0>)
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	4855      	ldr	r0, [pc, #340]	; (800c0e4 <FLASH_Erase_Write+0x1a4>)
 800bf90:	f000 fb74 	bl	800c67c <iprintf>
			Error_Handler();
 800bf94:	f7f4 fc26 	bl	80007e4 <Error_Handler>
		}
	}
	__HAL_FLASH_DATA_CACHE_DISABLE();                                 //闪存数据缓存禁用
 800bf98:	4b53      	ldr	r3, [pc, #332]	; (800c0e8 <FLASH_Erase_Write+0x1a8>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4a52      	ldr	r2, [pc, #328]	; (800c0e8 <FLASH_Erase_Write+0x1a8>)
 800bf9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bfa2:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_INSTRUCTION_CACHE_DISABLE();                          //闪存指令高速缓存禁用
 800bfa4:	4b50      	ldr	r3, [pc, #320]	; (800c0e8 <FLASH_Erase_Write+0x1a8>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4a4f      	ldr	r2, [pc, #316]	; (800c0e8 <FLASH_Erase_Write+0x1a8>)
 800bfaa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bfae:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_DATA_CACHE_RESET();                                   //闪存数据缓存重置
 800bfb0:	4b4d      	ldr	r3, [pc, #308]	; (800c0e8 <FLASH_Erase_Write+0x1a8>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a4c      	ldr	r2, [pc, #304]	; (800c0e8 <FLASH_Erase_Write+0x1a8>)
 800bfb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bfba:	6013      	str	r3, [r2, #0]
 800bfbc:	4b4a      	ldr	r3, [pc, #296]	; (800c0e8 <FLASH_Erase_Write+0x1a8>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a49      	ldr	r2, [pc, #292]	; (800c0e8 <FLASH_Erase_Write+0x1a8>)
 800bfc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bfc6:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_INSTRUCTION_CACHE_RESET();                            //闪存指令高速缓存重置
 800bfc8:	4b47      	ldr	r3, [pc, #284]	; (800c0e8 <FLASH_Erase_Write+0x1a8>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	4a46      	ldr	r2, [pc, #280]	; (800c0e8 <FLASH_Erase_Write+0x1a8>)
 800bfce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bfd2:	6013      	str	r3, [r2, #0]
 800bfd4:	4b44      	ldr	r3, [pc, #272]	; (800c0e8 <FLASH_Erase_Write+0x1a8>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4a43      	ldr	r2, [pc, #268]	; (800c0e8 <FLASH_Erase_Write+0x1a8>)
 800bfda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bfde:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();                           //闪存指令高速缓存启用
 800bfe0:	4b41      	ldr	r3, [pc, #260]	; (800c0e8 <FLASH_Erase_Write+0x1a8>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4a40      	ldr	r2, [pc, #256]	; (800c0e8 <FLASH_Erase_Write+0x1a8>)
 800bfe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bfea:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_DATA_CACHE_ENABLE();                                  //闪存数据缓存启用
 800bfec:	4b3e      	ldr	r3, [pc, #248]	; (800c0e8 <FLASH_Erase_Write+0x1a8>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a3d      	ldr	r2, [pc, #244]	; (800c0e8 <FLASH_Erase_Write+0x1a8>)
 800bff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bff6:	6013      	str	r3, [r2, #0]
	printf("HAL_OK\r\n");
 800bff8:	483c      	ldr	r0, [pc, #240]	; (800c0ec <FLASH_Erase_Write+0x1ac>)
 800bffa:	f000 fbc5 	bl	800c788 <puts>
	Address = FLASH_USER_START_ADDR + (lseekFlag - 1) * RAM_BUFFER_SIZE;         //分配用户程序起始地址ַ
 800bffe:	4b35      	ldr	r3, [pc, #212]	; (800c0d4 <FLASH_Erase_Write+0x194>)
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c006:	041b      	lsls	r3, r3, #16
 800c008:	4a39      	ldr	r2, [pc, #228]	; (800c0f0 <FLASH_Erase_Write+0x1b0>)
 800c00a:	6013      	str	r3, [r2, #0]
	while (Address
 800c00c:	e028      	b.n	800c060 <FLASH_Erase_Write+0x120>
			< FLASH_USER_START_ADDR + (lseekFlag - 1) * RAM_BUFFER_SIZE
					+ APP_Size) {
		p = (uint32_t*) &RAM_Buffer[i];                                          //P指向 读取bin文件缓存区
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	4a38      	ldr	r2, [pc, #224]	; (800c0f4 <FLASH_Erase_Write+0x1b4>)
 800c012:	4413      	add	r3, r2
 800c014:	4a38      	ldr	r2, [pc, #224]	; (800c0f8 <FLASH_Erase_Write+0x1b8>)
 800c016:	6013      	str	r3, [r2, #0]
		uint32_t pData = *p;
 800c018:	4b37      	ldr	r3, [pc, #220]	; (800c0f8 <FLASH_Erase_Write+0x1b8>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	603b      	str	r3, [r7, #0]

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, pData) == HAL_OK) //HAL_FLASH_ProgramFLASH写入数据函数   Address写入的地址  *p写入的数据
 800c020:	4b33      	ldr	r3, [pc, #204]	; (800c0f0 <FLASH_Erase_Write+0x1b0>)
 800c022:	6819      	ldr	r1, [r3, #0]
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	2200      	movs	r2, #0
 800c028:	461c      	mov	r4, r3
 800c02a:	4615      	mov	r5, r2
 800c02c:	4622      	mov	r2, r4
 800c02e:	462b      	mov	r3, r5
 800c030:	2002      	movs	r0, #2
 800c032:	f7f4 ff69 	bl	8000f08 <HAL_FLASH_Program>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d10c      	bne.n	800c056 <FLASH_Erase_Write+0x116>
				{
			Address = Address + 4;                                               //因为一次写入32位  所以地址加4
 800c03c:	4b2c      	ldr	r3, [pc, #176]	; (800c0f0 <FLASH_Erase_Write+0x1b0>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	3304      	adds	r3, #4
 800c042:	4a2b      	ldr	r2, [pc, #172]	; (800c0f0 <FLASH_Erase_Write+0x1b0>)
 800c044:	6013      	str	r3, [r2, #0]
			i += 4;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	3304      	adds	r3, #4
 800c04a:	607b      	str	r3, [r7, #4]
			if (i >= RAM_BUFFER_SIZE)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c052:	d305      	bcc.n	800c060 <FLASH_Erase_Write+0x120>
				break;
 800c054:	e010      	b.n	800c078 <FLASH_Erase_Write+0x138>
		} else {
			printf("Address-error\r\n");
 800c056:	4829      	ldr	r0, [pc, #164]	; (800c0fc <FLASH_Erase_Write+0x1bc>)
 800c058:	f000 fb96 	bl	800c788 <puts>
			Error_Handler();
 800c05c:	f7f4 fbc2 	bl	80007e4 <Error_Handler>
			< FLASH_USER_START_ADDR + (lseekFlag - 1) * RAM_BUFFER_SIZE
 800c060:	4b1c      	ldr	r3, [pc, #112]	; (800c0d4 <FLASH_Erase_Write+0x194>)
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c068:	041a      	lsls	r2, r3, #16
					+ APP_Size) {
 800c06a:	4b25      	ldr	r3, [pc, #148]	; (800c100 <FLASH_Erase_Write+0x1c0>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	441a      	add	r2, r3
			< FLASH_USER_START_ADDR + (lseekFlag - 1) * RAM_BUFFER_SIZE
 800c070:	4b1f      	ldr	r3, [pc, #124]	; (800c0f0 <FLASH_Erase_Write+0x1b0>)
 800c072:	681b      	ldr	r3, [r3, #0]
	while (Address
 800c074:	429a      	cmp	r2, r3
 800c076:	d8ca      	bhi.n	800c00e <FLASH_Erase_Write+0xce>
		}
	}
	HAL_FLASH_Lock();                                                       //上锁
 800c078:	f7f4 ffbc 	bl	8000ff4 <HAL_FLASH_Lock>
	Address = FLASH_USER_START_ADDR;		                                //校验
 800c07c:	4b1c      	ldr	r3, [pc, #112]	; (800c0f0 <FLASH_Erase_Write+0x1b0>)
 800c07e:	4a21      	ldr	r2, [pc, #132]	; (800c104 <FLASH_Erase_Write+0x1c4>)
 800c080:	601a      	str	r2, [r3, #0]
	MemoryProgramStatus = 0x0;
 800c082:	4b21      	ldr	r3, [pc, #132]	; (800c108 <FLASH_Erase_Write+0x1c8>)
 800c084:	2200      	movs	r2, #0
 800c086:	601a      	str	r2, [r3, #0]
	printf("CHEAK\r\n");
 800c088:	4820      	ldr	r0, [pc, #128]	; (800c10c <FLASH_Erase_Write+0x1cc>)
 800c08a:	f000 fb7d 	bl	800c788 <puts>
	while (Address < FLASH_USER_END_ADDR) {
 800c08e:	e014      	b.n	800c0ba <FLASH_Erase_Write+0x17a>
		data32 = *(__IO uint32_t*) Address;
 800c090:	4b17      	ldr	r3, [pc, #92]	; (800c0f0 <FLASH_Erase_Write+0x1b0>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4a1e      	ldr	r2, [pc, #120]	; (800c110 <FLASH_Erase_Write+0x1d0>)
 800c098:	6013      	str	r3, [r2, #0]
		if (data32 != *(uint32_t*) RAM_Buffer) {
 800c09a:	4b16      	ldr	r3, [pc, #88]	; (800c0f4 <FLASH_Erase_Write+0x1b4>)
 800c09c:	681a      	ldr	r2, [r3, #0]
 800c09e:	4b1c      	ldr	r3, [pc, #112]	; (800c110 <FLASH_Erase_Write+0x1d0>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d004      	beq.n	800c0b0 <FLASH_Erase_Write+0x170>
			MemoryProgramStatus++;
 800c0a6:	4b18      	ldr	r3, [pc, #96]	; (800c108 <FLASH_Erase_Write+0x1c8>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	4a16      	ldr	r2, [pc, #88]	; (800c108 <FLASH_Erase_Write+0x1c8>)
 800c0ae:	6013      	str	r3, [r2, #0]
		}
		Address = Address + 4;
 800c0b0:	4b0f      	ldr	r3, [pc, #60]	; (800c0f0 <FLASH_Erase_Write+0x1b0>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	3304      	adds	r3, #4
 800c0b6:	4a0e      	ldr	r2, [pc, #56]	; (800c0f0 <FLASH_Erase_Write+0x1b0>)
 800c0b8:	6013      	str	r3, [r2, #0]
	while (Address < FLASH_USER_END_ADDR) {
 800c0ba:	4b0d      	ldr	r3, [pc, #52]	; (800c0f0 <FLASH_Erase_Write+0x1b0>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a15      	ldr	r2, [pc, #84]	; (800c114 <FLASH_Erase_Write+0x1d4>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d3e5      	bcc.n	800c090 <FLASH_Erase_Write+0x150>
	}
	printf("CHEAK-finish\r\n");
 800c0c4:	4814      	ldr	r0, [pc, #80]	; (800c118 <FLASH_Erase_Write+0x1d8>)
 800c0c6:	f000 fb5f 	bl	800c788 <puts>
	return HAL_OK;
 800c0ca:	2300      	movs	r3, #0
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3708      	adds	r7, #8
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bdb0      	pop	{r4, r5, r7, pc}
 800c0d4:	20010cd0 	.word	0x20010cd0
 800c0d8:	20000ca0 	.word	0x20000ca0
 800c0dc:	20010cbc 	.word	0x20010cbc
 800c0e0:	20010cc8 	.word	0x20010cc8
 800c0e4:	0800d544 	.word	0x0800d544
 800c0e8:	40023c00 	.word	0x40023c00
 800c0ec:	0800d554 	.word	0x0800d554
 800c0f0:	20010cb8 	.word	0x20010cb8
 800c0f4:	20000cb4 	.word	0x20000cb4
 800c0f8:	20010ccc 	.word	0x20010ccc
 800c0fc:	0800d55c 	.word	0x0800d55c
 800c100:	20010cb4 	.word	0x20010cb4
 800c104:	08010000 	.word	0x08010000
 800c108:	20010cc4 	.word	0x20010cc4
 800c10c:	0800d56c 	.word	0x0800d56c
 800c110:	20010cc0 	.word	0x20010cc0
 800c114:	0807ffff 	.word	0x0807ffff
 800c118:	0800d574 	.word	0x0800d574

0800c11c <jumpToApp>:
void jumpToApp() {
 800c11c:	b580      	push	{r7, lr}
 800c11e:	af00      	add	r7, sp, #0
	USBH_LL_DeInit(&hUsbHostFS);
 800c120:	480f      	ldr	r0, [pc, #60]	; (800c160 <jumpToApp+0x44>)
 800c122:	f7ff fd0b 	bl	800bb3c <USBH_LL_DeInit>
	printf("FLASH_USER_START_ADDR %X \r\n",
 800c126:	4b0f      	ldr	r3, [pc, #60]	; (800c164 <jumpToApp+0x48>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4619      	mov	r1, r3
 800c12c:	480e      	ldr	r0, [pc, #56]	; (800c168 <jumpToApp+0x4c>)
 800c12e:	f000 faa5 	bl	800c67c <iprintf>
			(*(__IO uint32_t*) FLASH_USER_START_ADDR));
	printf("FLASH_USER_RESET_ADDR %X \r\n",
 800c132:	4b0e      	ldr	r3, [pc, #56]	; (800c16c <jumpToApp+0x50>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4619      	mov	r1, r3
 800c138:	480d      	ldr	r0, [pc, #52]	; (800c170 <jumpToApp+0x54>)
 800c13a:	f000 fa9f 	bl	800c67c <iprintf>
			(*(__IO uint32_t*) (FLASH_USER_START_ADDR + 4)));
	JumpAddress = *(__IO uint32_t*) (FLASH_USER_START_ADDR + 4);	//取复位中断向量的值
 800c13e:	4b0b      	ldr	r3, [pc, #44]	; (800c16c <jumpToApp+0x50>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	4a0c      	ldr	r2, [pc, #48]	; (800c174 <jumpToApp+0x58>)
 800c144:	6013      	str	r3, [r2, #0]
	Jump_To_Application = (pFunction) JumpAddress;
 800c146:	4b0b      	ldr	r3, [pc, #44]	; (800c174 <jumpToApp+0x58>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	461a      	mov	r2, r3
 800c14c:	4b0a      	ldr	r3, [pc, #40]	; (800c178 <jumpToApp+0x5c>)
 800c14e:	601a      	str	r2, [r3, #0]
	Jump_To_Application();
 800c150:	4b09      	ldr	r3, [pc, #36]	; (800c178 <jumpToApp+0x5c>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4798      	blx	r3
	printf("shoud not entry!! \n");
 800c156:	4809      	ldr	r0, [pc, #36]	; (800c17c <jumpToApp+0x60>)
 800c158:	f000 fb16 	bl	800c788 <puts>
}
 800c15c:	bf00      	nop
 800c15e:	bd80      	pop	{r7, pc}
 800c160:	200005bc 	.word	0x200005bc
 800c164:	08010000 	.word	0x08010000
 800c168:	0800d584 	.word	0x0800d584
 800c16c:	08010004 	.word	0x08010004
 800c170:	0800d5a0 	.word	0x0800d5a0
 800c174:	20010cd8 	.word	0x20010cd8
 800c178:	20010cd4 	.word	0x20010cd4
 800c17c:	0800d5bc 	.word	0x0800d5bc

0800c180 <UP_Data>:
void UP_Data(void) {
 800c180:	b598      	push	{r3, r4, r7, lr}
 800c182:	af00      	add	r7, sp, #0
	if (SystemUpdateFlag == 0) {
 800c184:	4b89      	ldr	r3, [pc, #548]	; (800c3ac <UP_Data+0x22c>)
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	f040 810d 	bne.w	800c3a8 <UP_Data+0x228>
		printf("state\n");
 800c18e:	4888      	ldr	r0, [pc, #544]	; (800c3b0 <UP_Data+0x230>)
 800c190:	f000 fafa 	bl	800c788 <puts>
		if (lseekFlag || (int32_t) (bootloaderTimeout - HAL_GetTick()) > 0) {
 800c194:	4b87      	ldr	r3, [pc, #540]	; (800c3b4 <UP_Data+0x234>)
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d108      	bne.n	800c1ae <UP_Data+0x2e>
 800c19c:	4b86      	ldr	r3, [pc, #536]	; (800c3b8 <UP_Data+0x238>)
 800c19e:	681c      	ldr	r4, [r3, #0]
 800c1a0:	f7f4 fd3e 	bl	8000c20 <HAL_GetTick>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	1ae3      	subs	r3, r4, r3
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	f340 80f9 	ble.w	800c3a0 <UP_Data+0x220>
			if (SystemUpdateFlag == 0 && Appli_state == APPLICATION_READY) //满足  系统更新标志为0，申请状态是准备状态
 800c1ae:	4b7f      	ldr	r3, [pc, #508]	; (800c3ac <UP_Data+0x22c>)
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	f040 80f7 	bne.w	800c3a6 <UP_Data+0x226>
 800c1b8:	4b80      	ldr	r3, [pc, #512]	; (800c3bc <UP_Data+0x23c>)
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	2b02      	cmp	r3, #2
 800c1be:	f040 80f2 	bne.w	800c3a6 <UP_Data+0x226>
					{
				bootloaderTimeout = HAL_GetTick() + 2000;                 //喂狗
 800c1c2:	f7f4 fd2d 	bl	8000c20 <HAL_GetTick>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800c1cc:	4a7a      	ldr	r2, [pc, #488]	; (800c3b8 <UP_Data+0x238>)
 800c1ce:	6013      	str	r3, [r2, #0]
				res = f_mount(&USBHFatFS, (TCHAR const*) USBHPath, 0);    //挂载文件系统
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	497b      	ldr	r1, [pc, #492]	; (800c3c0 <UP_Data+0x240>)
 800c1d4:	487b      	ldr	r0, [pc, #492]	; (800c3c4 <UP_Data+0x244>)
 800c1d6:	f7fe fba7 	bl	800a928 <f_mount>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	461a      	mov	r2, r3
 800c1de:	4b7a      	ldr	r3, [pc, #488]	; (800c3c8 <UP_Data+0x248>)
 800c1e0:	701a      	strb	r2, [r3, #0]
				printf("xxxx %d\r\n", res);
 800c1e2:	4b79      	ldr	r3, [pc, #484]	; (800c3c8 <UP_Data+0x248>)
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	4878      	ldr	r0, [pc, #480]	; (800c3cc <UP_Data+0x24c>)
 800c1ea:	f000 fa47 	bl	800c67c <iprintf>
				if (res != FR_OK) {
 800c1ee:	4b76      	ldr	r3, [pc, #472]	; (800c3c8 <UP_Data+0x248>)
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d008      	beq.n	800c208 <UP_Data+0x88>
					printf("mount no %d\r\n", res);
 800c1f6:	4b74      	ldr	r3, [pc, #464]	; (800c3c8 <UP_Data+0x248>)
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	4874      	ldr	r0, [pc, #464]	; (800c3d0 <UP_Data+0x250>)
 800c1fe:	f000 fa3d 	bl	800c67c <iprintf>
					Error_Handler();
 800c202:	f7f4 faef 	bl	80007e4 <Error_Handler>
 800c206:	e002      	b.n	800c20e <UP_Data+0x8e>
				} else {
					printf("mount yes\r\n");
 800c208:	4872      	ldr	r0, [pc, #456]	; (800c3d4 <UP_Data+0x254>)
 800c20a:	f000 fabd 	bl	800c788 <puts>
				}
				res = f_stat(filenamebatch, NULL);                        //查找文件名
 800c20e:	2100      	movs	r1, #0
 800c210:	4871      	ldr	r0, [pc, #452]	; (800c3d8 <UP_Data+0x258>)
 800c212:	f7ff f97d 	bl	800b510 <f_stat>
 800c216:	4603      	mov	r3, r0
 800c218:	461a      	mov	r2, r3
 800c21a:	4b6b      	ldr	r3, [pc, #428]	; (800c3c8 <UP_Data+0x248>)
 800c21c:	701a      	strb	r2, [r3, #0]
				if (res != FR_OK) {
 800c21e:	4b6a      	ldr	r3, [pc, #424]	; (800c3c8 <UP_Data+0x248>)
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d012      	beq.n	800c24c <UP_Data+0xcc>
					res = f_stat(filename, NULL);
 800c226:	2100      	movs	r1, #0
 800c228:	486c      	ldr	r0, [pc, #432]	; (800c3dc <UP_Data+0x25c>)
 800c22a:	f7ff f971 	bl	800b510 <f_stat>
 800c22e:	4603      	mov	r3, r0
 800c230:	461a      	mov	r2, r3
 800c232:	4b65      	ldr	r3, [pc, #404]	; (800c3c8 <UP_Data+0x248>)
 800c234:	701a      	strb	r2, [r3, #0]
					if (res != FR_OK)
 800c236:	4b64      	ldr	r3, [pc, #400]	; (800c3c8 <UP_Data+0x248>)
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d002      	beq.n	800c244 <UP_Data+0xc4>
						jumpToApp();                                      //两个都查不到跳转app程序
 800c23e:	f7ff ff6d 	bl	800c11c <jumpToApp>
 800c242:	e006      	b.n	800c252 <UP_Data+0xd2>
					else
						batchFlag = 0;
 800c244:	4b66      	ldr	r3, [pc, #408]	; (800c3e0 <UP_Data+0x260>)
 800c246:	2200      	movs	r2, #0
 800c248:	701a      	strb	r2, [r3, #0]
 800c24a:	e002      	b.n	800c252 <UP_Data+0xd2>
				} else {
					batchFlag = 1;
 800c24c:	4b64      	ldr	r3, [pc, #400]	; (800c3e0 <UP_Data+0x260>)
 800c24e:	2201      	movs	r2, #1
 800c250:	701a      	strb	r2, [r3, #0]
				}
				if (batchFlag == 1)
 800c252:	4b63      	ldr	r3, [pc, #396]	; (800c3e0 <UP_Data+0x260>)
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	2b01      	cmp	r3, #1
 800c258:	d109      	bne.n	800c26e <UP_Data+0xee>
					res = f_open(&USBHFile, filenamebatch, FA_READ);       //filename外部定义好的  FA_READ可以从文件中读取数据
 800c25a:	2201      	movs	r2, #1
 800c25c:	495e      	ldr	r1, [pc, #376]	; (800c3d8 <UP_Data+0x258>)
 800c25e:	4861      	ldr	r0, [pc, #388]	; (800c3e4 <UP_Data+0x264>)
 800c260:	f7fe fba8 	bl	800a9b4 <f_open>
 800c264:	4603      	mov	r3, r0
 800c266:	461a      	mov	r2, r3
 800c268:	4b57      	ldr	r3, [pc, #348]	; (800c3c8 <UP_Data+0x248>)
 800c26a:	701a      	strb	r2, [r3, #0]
 800c26c:	e008      	b.n	800c280 <UP_Data+0x100>
				else
					res = f_open(&USBHFile, filename, FA_READ);
 800c26e:	2201      	movs	r2, #1
 800c270:	495a      	ldr	r1, [pc, #360]	; (800c3dc <UP_Data+0x25c>)
 800c272:	485c      	ldr	r0, [pc, #368]	; (800c3e4 <UP_Data+0x264>)
 800c274:	f7fe fb9e 	bl	800a9b4 <f_open>
 800c278:	4603      	mov	r3, r0
 800c27a:	461a      	mov	r2, r3
 800c27c:	4b52      	ldr	r3, [pc, #328]	; (800c3c8 <UP_Data+0x248>)
 800c27e:	701a      	strb	r2, [r3, #0]
				if (res != FR_OK) {
 800c280:	4b51      	ldr	r3, [pc, #324]	; (800c3c8 <UP_Data+0x248>)
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d008      	beq.n	800c29a <UP_Data+0x11a>
					printf("open no  %d\r\n", res);
 800c288:	4b4f      	ldr	r3, [pc, #316]	; (800c3c8 <UP_Data+0x248>)
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	4619      	mov	r1, r3
 800c28e:	4856      	ldr	r0, [pc, #344]	; (800c3e8 <UP_Data+0x268>)
 800c290:	f000 f9f4 	bl	800c67c <iprintf>
					Error_Handler();
 800c294:	f7f4 faa6 	bl	80007e4 <Error_Handler>
 800c298:	e002      	b.n	800c2a0 <UP_Data+0x120>
				} else {
					printf("open yes \r\n");
 800c29a:	4854      	ldr	r0, [pc, #336]	; (800c3ec <UP_Data+0x26c>)
 800c29c:	f000 fa74 	bl	800c788 <puts>
				}
				APP_Size = f_size(&USBHFile);                              //读取所打开的文件多少个字节长度
 800c2a0:	4b50      	ldr	r3, [pc, #320]	; (800c3e4 <UP_Data+0x264>)
 800c2a2:	68db      	ldr	r3, [r3, #12]
 800c2a4:	4a52      	ldr	r2, [pc, #328]	; (800c3f0 <UP_Data+0x270>)
 800c2a6:	6013      	str	r3, [r2, #0]
				res = f_lseek(&USBHFile, lseekFlag * RAM_BUFFER_SIZE);     //移动打开的文件读指针
 800c2a8:	4b42      	ldr	r3, [pc, #264]	; (800c3b4 <UP_Data+0x234>)
 800c2aa:	781b      	ldrb	r3, [r3, #0]
 800c2ac:	041b      	lsls	r3, r3, #16
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	484c      	ldr	r0, [pc, #304]	; (800c3e4 <UP_Data+0x264>)
 800c2b2:	f7fe ff24 	bl	800b0fe <f_lseek>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	4b43      	ldr	r3, [pc, #268]	; (800c3c8 <UP_Data+0x248>)
 800c2bc:	701a      	strb	r2, [r3, #0]
				if (res != FR_OK) {
 800c2be:	4b42      	ldr	r3, [pc, #264]	; (800c3c8 <UP_Data+0x248>)
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d008      	beq.n	800c2d8 <UP_Data+0x158>
					printf("lseek no %d\r\n", res);
 800c2c6:	4b40      	ldr	r3, [pc, #256]	; (800c3c8 <UP_Data+0x248>)
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	4849      	ldr	r0, [pc, #292]	; (800c3f4 <UP_Data+0x274>)
 800c2ce:	f000 f9d5 	bl	800c67c <iprintf>
					Error_Handler();
 800c2d2:	f7f4 fa87 	bl	80007e4 <Error_Handler>
 800c2d6:	e008      	b.n	800c2ea <UP_Data+0x16a>
				} else {
					lseekFlag++;                                           //偏移下一次的指针
 800c2d8:	4b36      	ldr	r3, [pc, #216]	; (800c3b4 <UP_Data+0x234>)
 800c2da:	781b      	ldrb	r3, [r3, #0]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	b2da      	uxtb	r2, r3
 800c2e0:	4b34      	ldr	r3, [pc, #208]	; (800c3b4 <UP_Data+0x234>)
 800c2e2:	701a      	strb	r2, [r3, #0]
					printf("lseek yes\r\n");
 800c2e4:	4844      	ldr	r0, [pc, #272]	; (800c3f8 <UP_Data+0x278>)
 800c2e6:	f000 fa4f 	bl	800c788 <puts>
				}
				res = f_read(&USBHFile, RAM_Buffer, sizeof(RAM_Buffer),
 800c2ea:	4b41      	ldr	r3, [pc, #260]	; (800c3f0 <UP_Data+0x270>)
 800c2ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c2f0:	4942      	ldr	r1, [pc, #264]	; (800c3fc <UP_Data+0x27c>)
 800c2f2:	483c      	ldr	r0, [pc, #240]	; (800c3e4 <UP_Data+0x264>)
 800c2f4:	f7fe fd1c 	bl	800ad30 <f_read>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	4b32      	ldr	r3, [pc, #200]	; (800c3c8 <UP_Data+0x248>)
 800c2fe:	701a      	strb	r2, [r3, #0]
						(void*) &APP_Size); // RAM_Buffer用于存储读取数据的缓冲区 sizeof(RAM_Buffer)要读取的字节数  APP_Size读取的字节
				if (res != FR_OK) {
 800c300:	4b31      	ldr	r3, [pc, #196]	; (800c3c8 <UP_Data+0x248>)
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d008      	beq.n	800c31a <UP_Data+0x19a>
					printf("read no %d\r\n", res);
 800c308:	4b2f      	ldr	r3, [pc, #188]	; (800c3c8 <UP_Data+0x248>)
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	4619      	mov	r1, r3
 800c30e:	483c      	ldr	r0, [pc, #240]	; (800c400 <UP_Data+0x280>)
 800c310:	f000 f9b4 	bl	800c67c <iprintf>
					Error_Handler();
 800c314:	f7f4 fa66 	bl	80007e4 <Error_Handler>
 800c318:	e00e      	b.n	800c338 <UP_Data+0x1b8>
				} else {
					printf("read yes\r\n");
 800c31a:	483a      	ldr	r0, [pc, #232]	; (800c404 <UP_Data+0x284>)
 800c31c:	f000 fa34 	bl	800c788 <puts>
					if (APP_Size < RAM_BUFFER_SIZE)                         //判断是否读取完文件
 800c320:	4b33      	ldr	r3, [pc, #204]	; (800c3f0 <UP_Data+0x270>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c328:	d203      	bcs.n	800c332 <UP_Data+0x1b2>
						SystemUpdateFlag = 1;
 800c32a:	4b20      	ldr	r3, [pc, #128]	; (800c3ac <UP_Data+0x22c>)
 800c32c:	2201      	movs	r2, #1
 800c32e:	701a      	strb	r2, [r3, #0]
 800c330:	e002      	b.n	800c338 <UP_Data+0x1b8>
					else
						SystemUpdateFlag = 0;
 800c332:	4b1e      	ldr	r3, [pc, #120]	; (800c3ac <UP_Data+0x22c>)
 800c334:	2200      	movs	r2, #0
 800c336:	701a      	strb	r2, [r3, #0]
				}
				if ((0 < APP_Size) && (APP_Size < FLASH_USER_END_ADDR)) {
 800c338:	4b2d      	ldr	r3, [pc, #180]	; (800c3f0 <UP_Data+0x270>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d028      	beq.n	800c392 <UP_Data+0x212>
 800c340:	4b2b      	ldr	r3, [pc, #172]	; (800c3f0 <UP_Data+0x270>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a30      	ldr	r2, [pc, #192]	; (800c408 <UP_Data+0x288>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d223      	bcs.n	800c392 <UP_Data+0x212>
					FLASH_Erase_Write();                                    //擦写
 800c34a:	f7ff fdf9 	bl	800bf40 <FLASH_Erase_Write>
					if (SystemUpdateFlag == 1 && batchFlag == 0) {
 800c34e:	4b17      	ldr	r3, [pc, #92]	; (800c3ac <UP_Data+0x22c>)
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	2b01      	cmp	r3, #1
 800c354:	d110      	bne.n	800c378 <UP_Data+0x1f8>
 800c356:	4b22      	ldr	r3, [pc, #136]	; (800c3e0 <UP_Data+0x260>)
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d10c      	bne.n	800c378 <UP_Data+0x1f8>
						f_close(&USBHFile);                                 //有open就有关闭文件
 800c35e:	4821      	ldr	r0, [pc, #132]	; (800c3e4 <UP_Data+0x264>)
 800c360:	f7fe fea3 	bl	800b0aa <f_close>
						if (f_rename(filename, filenamenew) == 0)           //更新用户代码后修改文件名
 800c364:	4929      	ldr	r1, [pc, #164]	; (800c40c <UP_Data+0x28c>)
 800c366:	481d      	ldr	r0, [pc, #116]	; (800c3dc <UP_Data+0x25c>)
 800c368:	f7ff f90b 	bl	800b582 <f_rename>
 800c36c:	4603      	mov	r3, r0
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d102      	bne.n	800c378 <UP_Data+0x1f8>
							printf("shibai  \r\n");
 800c372:	4827      	ldr	r0, [pc, #156]	; (800c410 <UP_Data+0x290>)
 800c374:	f000 fa08 	bl	800c788 <puts>
					}
					if (SystemUpdateFlag == 1) {
 800c378:	4b0c      	ldr	r3, [pc, #48]	; (800c3ac <UP_Data+0x22c>)
 800c37a:	781b      	ldrb	r3, [r3, #0]
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d10b      	bne.n	800c398 <UP_Data+0x218>
						printf("jumpToApp\r\n");
 800c380:	4824      	ldr	r0, [pc, #144]	; (800c414 <UP_Data+0x294>)
 800c382:	f000 fa01 	bl	800c788 <puts>
						f_close(&USBHFile);                                 //有open就有关闭文件
 800c386:	4817      	ldr	r0, [pc, #92]	; (800c3e4 <UP_Data+0x264>)
 800c388:	f7fe fe8f 	bl	800b0aa <f_close>
						jumpToApp();                                        //跳转到用户程序
 800c38c:	f7ff fec6 	bl	800c11c <jumpToApp>
					if (SystemUpdateFlag == 1) {
 800c390:	e002      	b.n	800c398 <UP_Data+0x218>
					}
				} else {
					printf("APP_Size \r\n");
 800c392:	4821      	ldr	r0, [pc, #132]	; (800c418 <UP_Data+0x298>)
 800c394:	f000 f9f8 	bl	800c788 <puts>
				}
				f_close(&USBHFile);                                         //有open就有关闭文件
 800c398:	4812      	ldr	r0, [pc, #72]	; (800c3e4 <UP_Data+0x264>)
 800c39a:	f7fe fe86 	bl	800b0aa <f_close>
			if (SystemUpdateFlag == 0 && Appli_state == APPLICATION_READY) //满足  系统更新标志为0，申请状态是准备状态
 800c39e:	e002      	b.n	800c3a6 <UP_Data+0x226>
			}
		} else {
			jumpToApp();
 800c3a0:	f7ff febc 	bl	800c11c <jumpToApp>
		}
	}
}
 800c3a4:	e000      	b.n	800c3a8 <UP_Data+0x228>
			if (SystemUpdateFlag == 0 && Appli_state == APPLICATION_READY) //满足  系统更新标志为0，申请状态是准备状态
 800c3a6:	bf00      	nop
}
 800c3a8:	bf00      	nop
 800c3aa:	bd98      	pop	{r3, r4, r7, pc}
 800c3ac:	20010cd1 	.word	0x20010cd1
 800c3b0:	0800d5d0 	.word	0x0800d5d0
 800c3b4:	20010cd0 	.word	0x20010cd0
 800c3b8:	20010cdc 	.word	0x20010cdc
 800c3bc:	20000994 	.word	0x20000994
 800c3c0:	20000124 	.word	0x20000124
 800c3c4:	20000128 	.word	0x20000128
 800c3c8:	20000c9c 	.word	0x20000c9c
 800c3cc:	0800d5d8 	.word	0x0800d5d8
 800c3d0:	0800d5e4 	.word	0x0800d5e4
 800c3d4:	0800d5f4 	.word	0x0800d5f4
 800c3d8:	0800d600 	.word	0x0800d600
 800c3dc:	0800d610 	.word	0x0800d610
 800c3e0:	2000002c 	.word	0x2000002c
 800c3e4:	20000358 	.word	0x20000358
 800c3e8:	0800d618 	.word	0x0800d618
 800c3ec:	0800d628 	.word	0x0800d628
 800c3f0:	20010cb4 	.word	0x20010cb4
 800c3f4:	0800d634 	.word	0x0800d634
 800c3f8:	0800d644 	.word	0x0800d644
 800c3fc:	20000cb4 	.word	0x20000cb4
 800c400:	0800d650 	.word	0x0800d650
 800c404:	0800d660 	.word	0x0800d660
 800c408:	0807ffff 	.word	0x0807ffff
 800c40c:	0800d66c 	.word	0x0800d66c
 800c410:	0800d67c 	.word	0x0800d67c
 800c414:	0800d688 	.word	0x0800d688
 800c418:	0800d694 	.word	0x0800d694

0800c41c <__errno>:
 800c41c:	4b01      	ldr	r3, [pc, #4]	; (800c424 <__errno+0x8>)
 800c41e:	6818      	ldr	r0, [r3, #0]
 800c420:	4770      	bx	lr
 800c422:	bf00      	nop
 800c424:	20000030 	.word	0x20000030

0800c428 <__libc_init_array>:
 800c428:	b570      	push	{r4, r5, r6, lr}
 800c42a:	4d0d      	ldr	r5, [pc, #52]	; (800c460 <__libc_init_array+0x38>)
 800c42c:	4c0d      	ldr	r4, [pc, #52]	; (800c464 <__libc_init_array+0x3c>)
 800c42e:	1b64      	subs	r4, r4, r5
 800c430:	10a4      	asrs	r4, r4, #2
 800c432:	2600      	movs	r6, #0
 800c434:	42a6      	cmp	r6, r4
 800c436:	d109      	bne.n	800c44c <__libc_init_array+0x24>
 800c438:	4d0b      	ldr	r5, [pc, #44]	; (800c468 <__libc_init_array+0x40>)
 800c43a:	4c0c      	ldr	r4, [pc, #48]	; (800c46c <__libc_init_array+0x44>)
 800c43c:	f001 f842 	bl	800d4c4 <_init>
 800c440:	1b64      	subs	r4, r4, r5
 800c442:	10a4      	asrs	r4, r4, #2
 800c444:	2600      	movs	r6, #0
 800c446:	42a6      	cmp	r6, r4
 800c448:	d105      	bne.n	800c456 <__libc_init_array+0x2e>
 800c44a:	bd70      	pop	{r4, r5, r6, pc}
 800c44c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c450:	4798      	blx	r3
 800c452:	3601      	adds	r6, #1
 800c454:	e7ee      	b.n	800c434 <__libc_init_array+0xc>
 800c456:	f855 3b04 	ldr.w	r3, [r5], #4
 800c45a:	4798      	blx	r3
 800c45c:	3601      	adds	r6, #1
 800c45e:	e7f2      	b.n	800c446 <__libc_init_array+0x1e>
 800c460:	0800d7ec 	.word	0x0800d7ec
 800c464:	0800d7ec 	.word	0x0800d7ec
 800c468:	0800d7ec 	.word	0x0800d7ec
 800c46c:	0800d7f0 	.word	0x0800d7f0

0800c470 <malloc>:
 800c470:	4b02      	ldr	r3, [pc, #8]	; (800c47c <malloc+0xc>)
 800c472:	4601      	mov	r1, r0
 800c474:	6818      	ldr	r0, [r3, #0]
 800c476:	f000 b88d 	b.w	800c594 <_malloc_r>
 800c47a:	bf00      	nop
 800c47c:	20000030 	.word	0x20000030

0800c480 <free>:
 800c480:	4b02      	ldr	r3, [pc, #8]	; (800c48c <free+0xc>)
 800c482:	4601      	mov	r1, r0
 800c484:	6818      	ldr	r0, [r3, #0]
 800c486:	f000 b819 	b.w	800c4bc <_free_r>
 800c48a:	bf00      	nop
 800c48c:	20000030 	.word	0x20000030

0800c490 <memcpy>:
 800c490:	440a      	add	r2, r1
 800c492:	4291      	cmp	r1, r2
 800c494:	f100 33ff 	add.w	r3, r0, #4294967295
 800c498:	d100      	bne.n	800c49c <memcpy+0xc>
 800c49a:	4770      	bx	lr
 800c49c:	b510      	push	{r4, lr}
 800c49e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4a6:	4291      	cmp	r1, r2
 800c4a8:	d1f9      	bne.n	800c49e <memcpy+0xe>
 800c4aa:	bd10      	pop	{r4, pc}

0800c4ac <memset>:
 800c4ac:	4402      	add	r2, r0
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d100      	bne.n	800c4b6 <memset+0xa>
 800c4b4:	4770      	bx	lr
 800c4b6:	f803 1b01 	strb.w	r1, [r3], #1
 800c4ba:	e7f9      	b.n	800c4b0 <memset+0x4>

0800c4bc <_free_r>:
 800c4bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4be:	2900      	cmp	r1, #0
 800c4c0:	d044      	beq.n	800c54c <_free_r+0x90>
 800c4c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4c6:	9001      	str	r0, [sp, #4]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	f1a1 0404 	sub.w	r4, r1, #4
 800c4ce:	bfb8      	it	lt
 800c4d0:	18e4      	addlt	r4, r4, r3
 800c4d2:	f000 fc51 	bl	800cd78 <__malloc_lock>
 800c4d6:	4a1e      	ldr	r2, [pc, #120]	; (800c550 <_free_r+0x94>)
 800c4d8:	9801      	ldr	r0, [sp, #4]
 800c4da:	6813      	ldr	r3, [r2, #0]
 800c4dc:	b933      	cbnz	r3, 800c4ec <_free_r+0x30>
 800c4de:	6063      	str	r3, [r4, #4]
 800c4e0:	6014      	str	r4, [r2, #0]
 800c4e2:	b003      	add	sp, #12
 800c4e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4e8:	f000 bc4c 	b.w	800cd84 <__malloc_unlock>
 800c4ec:	42a3      	cmp	r3, r4
 800c4ee:	d908      	bls.n	800c502 <_free_r+0x46>
 800c4f0:	6825      	ldr	r5, [r4, #0]
 800c4f2:	1961      	adds	r1, r4, r5
 800c4f4:	428b      	cmp	r3, r1
 800c4f6:	bf01      	itttt	eq
 800c4f8:	6819      	ldreq	r1, [r3, #0]
 800c4fa:	685b      	ldreq	r3, [r3, #4]
 800c4fc:	1949      	addeq	r1, r1, r5
 800c4fe:	6021      	streq	r1, [r4, #0]
 800c500:	e7ed      	b.n	800c4de <_free_r+0x22>
 800c502:	461a      	mov	r2, r3
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	b10b      	cbz	r3, 800c50c <_free_r+0x50>
 800c508:	42a3      	cmp	r3, r4
 800c50a:	d9fa      	bls.n	800c502 <_free_r+0x46>
 800c50c:	6811      	ldr	r1, [r2, #0]
 800c50e:	1855      	adds	r5, r2, r1
 800c510:	42a5      	cmp	r5, r4
 800c512:	d10b      	bne.n	800c52c <_free_r+0x70>
 800c514:	6824      	ldr	r4, [r4, #0]
 800c516:	4421      	add	r1, r4
 800c518:	1854      	adds	r4, r2, r1
 800c51a:	42a3      	cmp	r3, r4
 800c51c:	6011      	str	r1, [r2, #0]
 800c51e:	d1e0      	bne.n	800c4e2 <_free_r+0x26>
 800c520:	681c      	ldr	r4, [r3, #0]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	6053      	str	r3, [r2, #4]
 800c526:	4421      	add	r1, r4
 800c528:	6011      	str	r1, [r2, #0]
 800c52a:	e7da      	b.n	800c4e2 <_free_r+0x26>
 800c52c:	d902      	bls.n	800c534 <_free_r+0x78>
 800c52e:	230c      	movs	r3, #12
 800c530:	6003      	str	r3, [r0, #0]
 800c532:	e7d6      	b.n	800c4e2 <_free_r+0x26>
 800c534:	6825      	ldr	r5, [r4, #0]
 800c536:	1961      	adds	r1, r4, r5
 800c538:	428b      	cmp	r3, r1
 800c53a:	bf04      	itt	eq
 800c53c:	6819      	ldreq	r1, [r3, #0]
 800c53e:	685b      	ldreq	r3, [r3, #4]
 800c540:	6063      	str	r3, [r4, #4]
 800c542:	bf04      	itt	eq
 800c544:	1949      	addeq	r1, r1, r5
 800c546:	6021      	streq	r1, [r4, #0]
 800c548:	6054      	str	r4, [r2, #4]
 800c54a:	e7ca      	b.n	800c4e2 <_free_r+0x26>
 800c54c:	b003      	add	sp, #12
 800c54e:	bd30      	pop	{r4, r5, pc}
 800c550:	20010ce0 	.word	0x20010ce0

0800c554 <sbrk_aligned>:
 800c554:	b570      	push	{r4, r5, r6, lr}
 800c556:	4e0e      	ldr	r6, [pc, #56]	; (800c590 <sbrk_aligned+0x3c>)
 800c558:	460c      	mov	r4, r1
 800c55a:	6831      	ldr	r1, [r6, #0]
 800c55c:	4605      	mov	r5, r0
 800c55e:	b911      	cbnz	r1, 800c566 <sbrk_aligned+0x12>
 800c560:	f000 f91a 	bl	800c798 <_sbrk_r>
 800c564:	6030      	str	r0, [r6, #0]
 800c566:	4621      	mov	r1, r4
 800c568:	4628      	mov	r0, r5
 800c56a:	f000 f915 	bl	800c798 <_sbrk_r>
 800c56e:	1c43      	adds	r3, r0, #1
 800c570:	d00a      	beq.n	800c588 <sbrk_aligned+0x34>
 800c572:	1cc4      	adds	r4, r0, #3
 800c574:	f024 0403 	bic.w	r4, r4, #3
 800c578:	42a0      	cmp	r0, r4
 800c57a:	d007      	beq.n	800c58c <sbrk_aligned+0x38>
 800c57c:	1a21      	subs	r1, r4, r0
 800c57e:	4628      	mov	r0, r5
 800c580:	f000 f90a 	bl	800c798 <_sbrk_r>
 800c584:	3001      	adds	r0, #1
 800c586:	d101      	bne.n	800c58c <sbrk_aligned+0x38>
 800c588:	f04f 34ff 	mov.w	r4, #4294967295
 800c58c:	4620      	mov	r0, r4
 800c58e:	bd70      	pop	{r4, r5, r6, pc}
 800c590:	20010ce4 	.word	0x20010ce4

0800c594 <_malloc_r>:
 800c594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c598:	1ccd      	adds	r5, r1, #3
 800c59a:	f025 0503 	bic.w	r5, r5, #3
 800c59e:	3508      	adds	r5, #8
 800c5a0:	2d0c      	cmp	r5, #12
 800c5a2:	bf38      	it	cc
 800c5a4:	250c      	movcc	r5, #12
 800c5a6:	2d00      	cmp	r5, #0
 800c5a8:	4607      	mov	r7, r0
 800c5aa:	db01      	blt.n	800c5b0 <_malloc_r+0x1c>
 800c5ac:	42a9      	cmp	r1, r5
 800c5ae:	d905      	bls.n	800c5bc <_malloc_r+0x28>
 800c5b0:	230c      	movs	r3, #12
 800c5b2:	603b      	str	r3, [r7, #0]
 800c5b4:	2600      	movs	r6, #0
 800c5b6:	4630      	mov	r0, r6
 800c5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5bc:	4e2e      	ldr	r6, [pc, #184]	; (800c678 <_malloc_r+0xe4>)
 800c5be:	f000 fbdb 	bl	800cd78 <__malloc_lock>
 800c5c2:	6833      	ldr	r3, [r6, #0]
 800c5c4:	461c      	mov	r4, r3
 800c5c6:	bb34      	cbnz	r4, 800c616 <_malloc_r+0x82>
 800c5c8:	4629      	mov	r1, r5
 800c5ca:	4638      	mov	r0, r7
 800c5cc:	f7ff ffc2 	bl	800c554 <sbrk_aligned>
 800c5d0:	1c43      	adds	r3, r0, #1
 800c5d2:	4604      	mov	r4, r0
 800c5d4:	d14d      	bne.n	800c672 <_malloc_r+0xde>
 800c5d6:	6834      	ldr	r4, [r6, #0]
 800c5d8:	4626      	mov	r6, r4
 800c5da:	2e00      	cmp	r6, #0
 800c5dc:	d140      	bne.n	800c660 <_malloc_r+0xcc>
 800c5de:	6823      	ldr	r3, [r4, #0]
 800c5e0:	4631      	mov	r1, r6
 800c5e2:	4638      	mov	r0, r7
 800c5e4:	eb04 0803 	add.w	r8, r4, r3
 800c5e8:	f000 f8d6 	bl	800c798 <_sbrk_r>
 800c5ec:	4580      	cmp	r8, r0
 800c5ee:	d13a      	bne.n	800c666 <_malloc_r+0xd2>
 800c5f0:	6821      	ldr	r1, [r4, #0]
 800c5f2:	3503      	adds	r5, #3
 800c5f4:	1a6d      	subs	r5, r5, r1
 800c5f6:	f025 0503 	bic.w	r5, r5, #3
 800c5fa:	3508      	adds	r5, #8
 800c5fc:	2d0c      	cmp	r5, #12
 800c5fe:	bf38      	it	cc
 800c600:	250c      	movcc	r5, #12
 800c602:	4629      	mov	r1, r5
 800c604:	4638      	mov	r0, r7
 800c606:	f7ff ffa5 	bl	800c554 <sbrk_aligned>
 800c60a:	3001      	adds	r0, #1
 800c60c:	d02b      	beq.n	800c666 <_malloc_r+0xd2>
 800c60e:	6823      	ldr	r3, [r4, #0]
 800c610:	442b      	add	r3, r5
 800c612:	6023      	str	r3, [r4, #0]
 800c614:	e00e      	b.n	800c634 <_malloc_r+0xa0>
 800c616:	6822      	ldr	r2, [r4, #0]
 800c618:	1b52      	subs	r2, r2, r5
 800c61a:	d41e      	bmi.n	800c65a <_malloc_r+0xc6>
 800c61c:	2a0b      	cmp	r2, #11
 800c61e:	d916      	bls.n	800c64e <_malloc_r+0xba>
 800c620:	1961      	adds	r1, r4, r5
 800c622:	42a3      	cmp	r3, r4
 800c624:	6025      	str	r5, [r4, #0]
 800c626:	bf18      	it	ne
 800c628:	6059      	strne	r1, [r3, #4]
 800c62a:	6863      	ldr	r3, [r4, #4]
 800c62c:	bf08      	it	eq
 800c62e:	6031      	streq	r1, [r6, #0]
 800c630:	5162      	str	r2, [r4, r5]
 800c632:	604b      	str	r3, [r1, #4]
 800c634:	4638      	mov	r0, r7
 800c636:	f104 060b 	add.w	r6, r4, #11
 800c63a:	f000 fba3 	bl	800cd84 <__malloc_unlock>
 800c63e:	f026 0607 	bic.w	r6, r6, #7
 800c642:	1d23      	adds	r3, r4, #4
 800c644:	1af2      	subs	r2, r6, r3
 800c646:	d0b6      	beq.n	800c5b6 <_malloc_r+0x22>
 800c648:	1b9b      	subs	r3, r3, r6
 800c64a:	50a3      	str	r3, [r4, r2]
 800c64c:	e7b3      	b.n	800c5b6 <_malloc_r+0x22>
 800c64e:	6862      	ldr	r2, [r4, #4]
 800c650:	42a3      	cmp	r3, r4
 800c652:	bf0c      	ite	eq
 800c654:	6032      	streq	r2, [r6, #0]
 800c656:	605a      	strne	r2, [r3, #4]
 800c658:	e7ec      	b.n	800c634 <_malloc_r+0xa0>
 800c65a:	4623      	mov	r3, r4
 800c65c:	6864      	ldr	r4, [r4, #4]
 800c65e:	e7b2      	b.n	800c5c6 <_malloc_r+0x32>
 800c660:	4634      	mov	r4, r6
 800c662:	6876      	ldr	r6, [r6, #4]
 800c664:	e7b9      	b.n	800c5da <_malloc_r+0x46>
 800c666:	230c      	movs	r3, #12
 800c668:	603b      	str	r3, [r7, #0]
 800c66a:	4638      	mov	r0, r7
 800c66c:	f000 fb8a 	bl	800cd84 <__malloc_unlock>
 800c670:	e7a1      	b.n	800c5b6 <_malloc_r+0x22>
 800c672:	6025      	str	r5, [r4, #0]
 800c674:	e7de      	b.n	800c634 <_malloc_r+0xa0>
 800c676:	bf00      	nop
 800c678:	20010ce0 	.word	0x20010ce0

0800c67c <iprintf>:
 800c67c:	b40f      	push	{r0, r1, r2, r3}
 800c67e:	4b0a      	ldr	r3, [pc, #40]	; (800c6a8 <iprintf+0x2c>)
 800c680:	b513      	push	{r0, r1, r4, lr}
 800c682:	681c      	ldr	r4, [r3, #0]
 800c684:	b124      	cbz	r4, 800c690 <iprintf+0x14>
 800c686:	69a3      	ldr	r3, [r4, #24]
 800c688:	b913      	cbnz	r3, 800c690 <iprintf+0x14>
 800c68a:	4620      	mov	r0, r4
 800c68c:	f000 fa6e 	bl	800cb6c <__sinit>
 800c690:	ab05      	add	r3, sp, #20
 800c692:	9a04      	ldr	r2, [sp, #16]
 800c694:	68a1      	ldr	r1, [r4, #8]
 800c696:	9301      	str	r3, [sp, #4]
 800c698:	4620      	mov	r0, r4
 800c69a:	f000 fba3 	bl	800cde4 <_vfiprintf_r>
 800c69e:	b002      	add	sp, #8
 800c6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6a4:	b004      	add	sp, #16
 800c6a6:	4770      	bx	lr
 800c6a8:	20000030 	.word	0x20000030

0800c6ac <_puts_r>:
 800c6ac:	b570      	push	{r4, r5, r6, lr}
 800c6ae:	460e      	mov	r6, r1
 800c6b0:	4605      	mov	r5, r0
 800c6b2:	b118      	cbz	r0, 800c6bc <_puts_r+0x10>
 800c6b4:	6983      	ldr	r3, [r0, #24]
 800c6b6:	b90b      	cbnz	r3, 800c6bc <_puts_r+0x10>
 800c6b8:	f000 fa58 	bl	800cb6c <__sinit>
 800c6bc:	69ab      	ldr	r3, [r5, #24]
 800c6be:	68ac      	ldr	r4, [r5, #8]
 800c6c0:	b913      	cbnz	r3, 800c6c8 <_puts_r+0x1c>
 800c6c2:	4628      	mov	r0, r5
 800c6c4:	f000 fa52 	bl	800cb6c <__sinit>
 800c6c8:	4b2c      	ldr	r3, [pc, #176]	; (800c77c <_puts_r+0xd0>)
 800c6ca:	429c      	cmp	r4, r3
 800c6cc:	d120      	bne.n	800c710 <_puts_r+0x64>
 800c6ce:	686c      	ldr	r4, [r5, #4]
 800c6d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c6d2:	07db      	lsls	r3, r3, #31
 800c6d4:	d405      	bmi.n	800c6e2 <_puts_r+0x36>
 800c6d6:	89a3      	ldrh	r3, [r4, #12]
 800c6d8:	0598      	lsls	r0, r3, #22
 800c6da:	d402      	bmi.n	800c6e2 <_puts_r+0x36>
 800c6dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6de:	f000 fae3 	bl	800cca8 <__retarget_lock_acquire_recursive>
 800c6e2:	89a3      	ldrh	r3, [r4, #12]
 800c6e4:	0719      	lsls	r1, r3, #28
 800c6e6:	d51d      	bpl.n	800c724 <_puts_r+0x78>
 800c6e8:	6923      	ldr	r3, [r4, #16]
 800c6ea:	b1db      	cbz	r3, 800c724 <_puts_r+0x78>
 800c6ec:	3e01      	subs	r6, #1
 800c6ee:	68a3      	ldr	r3, [r4, #8]
 800c6f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c6f4:	3b01      	subs	r3, #1
 800c6f6:	60a3      	str	r3, [r4, #8]
 800c6f8:	bb39      	cbnz	r1, 800c74a <_puts_r+0x9e>
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	da38      	bge.n	800c770 <_puts_r+0xc4>
 800c6fe:	4622      	mov	r2, r4
 800c700:	210a      	movs	r1, #10
 800c702:	4628      	mov	r0, r5
 800c704:	f000 f858 	bl	800c7b8 <__swbuf_r>
 800c708:	3001      	adds	r0, #1
 800c70a:	d011      	beq.n	800c730 <_puts_r+0x84>
 800c70c:	250a      	movs	r5, #10
 800c70e:	e011      	b.n	800c734 <_puts_r+0x88>
 800c710:	4b1b      	ldr	r3, [pc, #108]	; (800c780 <_puts_r+0xd4>)
 800c712:	429c      	cmp	r4, r3
 800c714:	d101      	bne.n	800c71a <_puts_r+0x6e>
 800c716:	68ac      	ldr	r4, [r5, #8]
 800c718:	e7da      	b.n	800c6d0 <_puts_r+0x24>
 800c71a:	4b1a      	ldr	r3, [pc, #104]	; (800c784 <_puts_r+0xd8>)
 800c71c:	429c      	cmp	r4, r3
 800c71e:	bf08      	it	eq
 800c720:	68ec      	ldreq	r4, [r5, #12]
 800c722:	e7d5      	b.n	800c6d0 <_puts_r+0x24>
 800c724:	4621      	mov	r1, r4
 800c726:	4628      	mov	r0, r5
 800c728:	f000 f898 	bl	800c85c <__swsetup_r>
 800c72c:	2800      	cmp	r0, #0
 800c72e:	d0dd      	beq.n	800c6ec <_puts_r+0x40>
 800c730:	f04f 35ff 	mov.w	r5, #4294967295
 800c734:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c736:	07da      	lsls	r2, r3, #31
 800c738:	d405      	bmi.n	800c746 <_puts_r+0x9a>
 800c73a:	89a3      	ldrh	r3, [r4, #12]
 800c73c:	059b      	lsls	r3, r3, #22
 800c73e:	d402      	bmi.n	800c746 <_puts_r+0x9a>
 800c740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c742:	f000 fab2 	bl	800ccaa <__retarget_lock_release_recursive>
 800c746:	4628      	mov	r0, r5
 800c748:	bd70      	pop	{r4, r5, r6, pc}
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	da04      	bge.n	800c758 <_puts_r+0xac>
 800c74e:	69a2      	ldr	r2, [r4, #24]
 800c750:	429a      	cmp	r2, r3
 800c752:	dc06      	bgt.n	800c762 <_puts_r+0xb6>
 800c754:	290a      	cmp	r1, #10
 800c756:	d004      	beq.n	800c762 <_puts_r+0xb6>
 800c758:	6823      	ldr	r3, [r4, #0]
 800c75a:	1c5a      	adds	r2, r3, #1
 800c75c:	6022      	str	r2, [r4, #0]
 800c75e:	7019      	strb	r1, [r3, #0]
 800c760:	e7c5      	b.n	800c6ee <_puts_r+0x42>
 800c762:	4622      	mov	r2, r4
 800c764:	4628      	mov	r0, r5
 800c766:	f000 f827 	bl	800c7b8 <__swbuf_r>
 800c76a:	3001      	adds	r0, #1
 800c76c:	d1bf      	bne.n	800c6ee <_puts_r+0x42>
 800c76e:	e7df      	b.n	800c730 <_puts_r+0x84>
 800c770:	6823      	ldr	r3, [r4, #0]
 800c772:	250a      	movs	r5, #10
 800c774:	1c5a      	adds	r2, r3, #1
 800c776:	6022      	str	r2, [r4, #0]
 800c778:	701d      	strb	r5, [r3, #0]
 800c77a:	e7db      	b.n	800c734 <_puts_r+0x88>
 800c77c:	0800d770 	.word	0x0800d770
 800c780:	0800d790 	.word	0x0800d790
 800c784:	0800d750 	.word	0x0800d750

0800c788 <puts>:
 800c788:	4b02      	ldr	r3, [pc, #8]	; (800c794 <puts+0xc>)
 800c78a:	4601      	mov	r1, r0
 800c78c:	6818      	ldr	r0, [r3, #0]
 800c78e:	f7ff bf8d 	b.w	800c6ac <_puts_r>
 800c792:	bf00      	nop
 800c794:	20000030 	.word	0x20000030

0800c798 <_sbrk_r>:
 800c798:	b538      	push	{r3, r4, r5, lr}
 800c79a:	4d06      	ldr	r5, [pc, #24]	; (800c7b4 <_sbrk_r+0x1c>)
 800c79c:	2300      	movs	r3, #0
 800c79e:	4604      	mov	r4, r0
 800c7a0:	4608      	mov	r0, r1
 800c7a2:	602b      	str	r3, [r5, #0]
 800c7a4:	f7f4 f8f2 	bl	800098c <_sbrk>
 800c7a8:	1c43      	adds	r3, r0, #1
 800c7aa:	d102      	bne.n	800c7b2 <_sbrk_r+0x1a>
 800c7ac:	682b      	ldr	r3, [r5, #0]
 800c7ae:	b103      	cbz	r3, 800c7b2 <_sbrk_r+0x1a>
 800c7b0:	6023      	str	r3, [r4, #0]
 800c7b2:	bd38      	pop	{r3, r4, r5, pc}
 800c7b4:	20010cec 	.word	0x20010cec

0800c7b8 <__swbuf_r>:
 800c7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ba:	460e      	mov	r6, r1
 800c7bc:	4614      	mov	r4, r2
 800c7be:	4605      	mov	r5, r0
 800c7c0:	b118      	cbz	r0, 800c7ca <__swbuf_r+0x12>
 800c7c2:	6983      	ldr	r3, [r0, #24]
 800c7c4:	b90b      	cbnz	r3, 800c7ca <__swbuf_r+0x12>
 800c7c6:	f000 f9d1 	bl	800cb6c <__sinit>
 800c7ca:	4b21      	ldr	r3, [pc, #132]	; (800c850 <__swbuf_r+0x98>)
 800c7cc:	429c      	cmp	r4, r3
 800c7ce:	d12b      	bne.n	800c828 <__swbuf_r+0x70>
 800c7d0:	686c      	ldr	r4, [r5, #4]
 800c7d2:	69a3      	ldr	r3, [r4, #24]
 800c7d4:	60a3      	str	r3, [r4, #8]
 800c7d6:	89a3      	ldrh	r3, [r4, #12]
 800c7d8:	071a      	lsls	r2, r3, #28
 800c7da:	d52f      	bpl.n	800c83c <__swbuf_r+0x84>
 800c7dc:	6923      	ldr	r3, [r4, #16]
 800c7de:	b36b      	cbz	r3, 800c83c <__swbuf_r+0x84>
 800c7e0:	6923      	ldr	r3, [r4, #16]
 800c7e2:	6820      	ldr	r0, [r4, #0]
 800c7e4:	1ac0      	subs	r0, r0, r3
 800c7e6:	6963      	ldr	r3, [r4, #20]
 800c7e8:	b2f6      	uxtb	r6, r6
 800c7ea:	4283      	cmp	r3, r0
 800c7ec:	4637      	mov	r7, r6
 800c7ee:	dc04      	bgt.n	800c7fa <__swbuf_r+0x42>
 800c7f0:	4621      	mov	r1, r4
 800c7f2:	4628      	mov	r0, r5
 800c7f4:	f000 f926 	bl	800ca44 <_fflush_r>
 800c7f8:	bb30      	cbnz	r0, 800c848 <__swbuf_r+0x90>
 800c7fa:	68a3      	ldr	r3, [r4, #8]
 800c7fc:	3b01      	subs	r3, #1
 800c7fe:	60a3      	str	r3, [r4, #8]
 800c800:	6823      	ldr	r3, [r4, #0]
 800c802:	1c5a      	adds	r2, r3, #1
 800c804:	6022      	str	r2, [r4, #0]
 800c806:	701e      	strb	r6, [r3, #0]
 800c808:	6963      	ldr	r3, [r4, #20]
 800c80a:	3001      	adds	r0, #1
 800c80c:	4283      	cmp	r3, r0
 800c80e:	d004      	beq.n	800c81a <__swbuf_r+0x62>
 800c810:	89a3      	ldrh	r3, [r4, #12]
 800c812:	07db      	lsls	r3, r3, #31
 800c814:	d506      	bpl.n	800c824 <__swbuf_r+0x6c>
 800c816:	2e0a      	cmp	r6, #10
 800c818:	d104      	bne.n	800c824 <__swbuf_r+0x6c>
 800c81a:	4621      	mov	r1, r4
 800c81c:	4628      	mov	r0, r5
 800c81e:	f000 f911 	bl	800ca44 <_fflush_r>
 800c822:	b988      	cbnz	r0, 800c848 <__swbuf_r+0x90>
 800c824:	4638      	mov	r0, r7
 800c826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c828:	4b0a      	ldr	r3, [pc, #40]	; (800c854 <__swbuf_r+0x9c>)
 800c82a:	429c      	cmp	r4, r3
 800c82c:	d101      	bne.n	800c832 <__swbuf_r+0x7a>
 800c82e:	68ac      	ldr	r4, [r5, #8]
 800c830:	e7cf      	b.n	800c7d2 <__swbuf_r+0x1a>
 800c832:	4b09      	ldr	r3, [pc, #36]	; (800c858 <__swbuf_r+0xa0>)
 800c834:	429c      	cmp	r4, r3
 800c836:	bf08      	it	eq
 800c838:	68ec      	ldreq	r4, [r5, #12]
 800c83a:	e7ca      	b.n	800c7d2 <__swbuf_r+0x1a>
 800c83c:	4621      	mov	r1, r4
 800c83e:	4628      	mov	r0, r5
 800c840:	f000 f80c 	bl	800c85c <__swsetup_r>
 800c844:	2800      	cmp	r0, #0
 800c846:	d0cb      	beq.n	800c7e0 <__swbuf_r+0x28>
 800c848:	f04f 37ff 	mov.w	r7, #4294967295
 800c84c:	e7ea      	b.n	800c824 <__swbuf_r+0x6c>
 800c84e:	bf00      	nop
 800c850:	0800d770 	.word	0x0800d770
 800c854:	0800d790 	.word	0x0800d790
 800c858:	0800d750 	.word	0x0800d750

0800c85c <__swsetup_r>:
 800c85c:	4b32      	ldr	r3, [pc, #200]	; (800c928 <__swsetup_r+0xcc>)
 800c85e:	b570      	push	{r4, r5, r6, lr}
 800c860:	681d      	ldr	r5, [r3, #0]
 800c862:	4606      	mov	r6, r0
 800c864:	460c      	mov	r4, r1
 800c866:	b125      	cbz	r5, 800c872 <__swsetup_r+0x16>
 800c868:	69ab      	ldr	r3, [r5, #24]
 800c86a:	b913      	cbnz	r3, 800c872 <__swsetup_r+0x16>
 800c86c:	4628      	mov	r0, r5
 800c86e:	f000 f97d 	bl	800cb6c <__sinit>
 800c872:	4b2e      	ldr	r3, [pc, #184]	; (800c92c <__swsetup_r+0xd0>)
 800c874:	429c      	cmp	r4, r3
 800c876:	d10f      	bne.n	800c898 <__swsetup_r+0x3c>
 800c878:	686c      	ldr	r4, [r5, #4]
 800c87a:	89a3      	ldrh	r3, [r4, #12]
 800c87c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c880:	0719      	lsls	r1, r3, #28
 800c882:	d42c      	bmi.n	800c8de <__swsetup_r+0x82>
 800c884:	06dd      	lsls	r5, r3, #27
 800c886:	d411      	bmi.n	800c8ac <__swsetup_r+0x50>
 800c888:	2309      	movs	r3, #9
 800c88a:	6033      	str	r3, [r6, #0]
 800c88c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c890:	81a3      	strh	r3, [r4, #12]
 800c892:	f04f 30ff 	mov.w	r0, #4294967295
 800c896:	e03e      	b.n	800c916 <__swsetup_r+0xba>
 800c898:	4b25      	ldr	r3, [pc, #148]	; (800c930 <__swsetup_r+0xd4>)
 800c89a:	429c      	cmp	r4, r3
 800c89c:	d101      	bne.n	800c8a2 <__swsetup_r+0x46>
 800c89e:	68ac      	ldr	r4, [r5, #8]
 800c8a0:	e7eb      	b.n	800c87a <__swsetup_r+0x1e>
 800c8a2:	4b24      	ldr	r3, [pc, #144]	; (800c934 <__swsetup_r+0xd8>)
 800c8a4:	429c      	cmp	r4, r3
 800c8a6:	bf08      	it	eq
 800c8a8:	68ec      	ldreq	r4, [r5, #12]
 800c8aa:	e7e6      	b.n	800c87a <__swsetup_r+0x1e>
 800c8ac:	0758      	lsls	r0, r3, #29
 800c8ae:	d512      	bpl.n	800c8d6 <__swsetup_r+0x7a>
 800c8b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8b2:	b141      	cbz	r1, 800c8c6 <__swsetup_r+0x6a>
 800c8b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8b8:	4299      	cmp	r1, r3
 800c8ba:	d002      	beq.n	800c8c2 <__swsetup_r+0x66>
 800c8bc:	4630      	mov	r0, r6
 800c8be:	f7ff fdfd 	bl	800c4bc <_free_r>
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	6363      	str	r3, [r4, #52]	; 0x34
 800c8c6:	89a3      	ldrh	r3, [r4, #12]
 800c8c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c8cc:	81a3      	strh	r3, [r4, #12]
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	6063      	str	r3, [r4, #4]
 800c8d2:	6923      	ldr	r3, [r4, #16]
 800c8d4:	6023      	str	r3, [r4, #0]
 800c8d6:	89a3      	ldrh	r3, [r4, #12]
 800c8d8:	f043 0308 	orr.w	r3, r3, #8
 800c8dc:	81a3      	strh	r3, [r4, #12]
 800c8de:	6923      	ldr	r3, [r4, #16]
 800c8e0:	b94b      	cbnz	r3, 800c8f6 <__swsetup_r+0x9a>
 800c8e2:	89a3      	ldrh	r3, [r4, #12]
 800c8e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c8e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8ec:	d003      	beq.n	800c8f6 <__swsetup_r+0x9a>
 800c8ee:	4621      	mov	r1, r4
 800c8f0:	4630      	mov	r0, r6
 800c8f2:	f000 fa01 	bl	800ccf8 <__smakebuf_r>
 800c8f6:	89a0      	ldrh	r0, [r4, #12]
 800c8f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8fc:	f010 0301 	ands.w	r3, r0, #1
 800c900:	d00a      	beq.n	800c918 <__swsetup_r+0xbc>
 800c902:	2300      	movs	r3, #0
 800c904:	60a3      	str	r3, [r4, #8]
 800c906:	6963      	ldr	r3, [r4, #20]
 800c908:	425b      	negs	r3, r3
 800c90a:	61a3      	str	r3, [r4, #24]
 800c90c:	6923      	ldr	r3, [r4, #16]
 800c90e:	b943      	cbnz	r3, 800c922 <__swsetup_r+0xc6>
 800c910:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c914:	d1ba      	bne.n	800c88c <__swsetup_r+0x30>
 800c916:	bd70      	pop	{r4, r5, r6, pc}
 800c918:	0781      	lsls	r1, r0, #30
 800c91a:	bf58      	it	pl
 800c91c:	6963      	ldrpl	r3, [r4, #20]
 800c91e:	60a3      	str	r3, [r4, #8]
 800c920:	e7f4      	b.n	800c90c <__swsetup_r+0xb0>
 800c922:	2000      	movs	r0, #0
 800c924:	e7f7      	b.n	800c916 <__swsetup_r+0xba>
 800c926:	bf00      	nop
 800c928:	20000030 	.word	0x20000030
 800c92c:	0800d770 	.word	0x0800d770
 800c930:	0800d790 	.word	0x0800d790
 800c934:	0800d750 	.word	0x0800d750

0800c938 <__sflush_r>:
 800c938:	898a      	ldrh	r2, [r1, #12]
 800c93a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c93e:	4605      	mov	r5, r0
 800c940:	0710      	lsls	r0, r2, #28
 800c942:	460c      	mov	r4, r1
 800c944:	d458      	bmi.n	800c9f8 <__sflush_r+0xc0>
 800c946:	684b      	ldr	r3, [r1, #4]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	dc05      	bgt.n	800c958 <__sflush_r+0x20>
 800c94c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c94e:	2b00      	cmp	r3, #0
 800c950:	dc02      	bgt.n	800c958 <__sflush_r+0x20>
 800c952:	2000      	movs	r0, #0
 800c954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c958:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c95a:	2e00      	cmp	r6, #0
 800c95c:	d0f9      	beq.n	800c952 <__sflush_r+0x1a>
 800c95e:	2300      	movs	r3, #0
 800c960:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c964:	682f      	ldr	r7, [r5, #0]
 800c966:	602b      	str	r3, [r5, #0]
 800c968:	d032      	beq.n	800c9d0 <__sflush_r+0x98>
 800c96a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c96c:	89a3      	ldrh	r3, [r4, #12]
 800c96e:	075a      	lsls	r2, r3, #29
 800c970:	d505      	bpl.n	800c97e <__sflush_r+0x46>
 800c972:	6863      	ldr	r3, [r4, #4]
 800c974:	1ac0      	subs	r0, r0, r3
 800c976:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c978:	b10b      	cbz	r3, 800c97e <__sflush_r+0x46>
 800c97a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c97c:	1ac0      	subs	r0, r0, r3
 800c97e:	2300      	movs	r3, #0
 800c980:	4602      	mov	r2, r0
 800c982:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c984:	6a21      	ldr	r1, [r4, #32]
 800c986:	4628      	mov	r0, r5
 800c988:	47b0      	blx	r6
 800c98a:	1c43      	adds	r3, r0, #1
 800c98c:	89a3      	ldrh	r3, [r4, #12]
 800c98e:	d106      	bne.n	800c99e <__sflush_r+0x66>
 800c990:	6829      	ldr	r1, [r5, #0]
 800c992:	291d      	cmp	r1, #29
 800c994:	d82c      	bhi.n	800c9f0 <__sflush_r+0xb8>
 800c996:	4a2a      	ldr	r2, [pc, #168]	; (800ca40 <__sflush_r+0x108>)
 800c998:	40ca      	lsrs	r2, r1
 800c99a:	07d6      	lsls	r6, r2, #31
 800c99c:	d528      	bpl.n	800c9f0 <__sflush_r+0xb8>
 800c99e:	2200      	movs	r2, #0
 800c9a0:	6062      	str	r2, [r4, #4]
 800c9a2:	04d9      	lsls	r1, r3, #19
 800c9a4:	6922      	ldr	r2, [r4, #16]
 800c9a6:	6022      	str	r2, [r4, #0]
 800c9a8:	d504      	bpl.n	800c9b4 <__sflush_r+0x7c>
 800c9aa:	1c42      	adds	r2, r0, #1
 800c9ac:	d101      	bne.n	800c9b2 <__sflush_r+0x7a>
 800c9ae:	682b      	ldr	r3, [r5, #0]
 800c9b0:	b903      	cbnz	r3, 800c9b4 <__sflush_r+0x7c>
 800c9b2:	6560      	str	r0, [r4, #84]	; 0x54
 800c9b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9b6:	602f      	str	r7, [r5, #0]
 800c9b8:	2900      	cmp	r1, #0
 800c9ba:	d0ca      	beq.n	800c952 <__sflush_r+0x1a>
 800c9bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9c0:	4299      	cmp	r1, r3
 800c9c2:	d002      	beq.n	800c9ca <__sflush_r+0x92>
 800c9c4:	4628      	mov	r0, r5
 800c9c6:	f7ff fd79 	bl	800c4bc <_free_r>
 800c9ca:	2000      	movs	r0, #0
 800c9cc:	6360      	str	r0, [r4, #52]	; 0x34
 800c9ce:	e7c1      	b.n	800c954 <__sflush_r+0x1c>
 800c9d0:	6a21      	ldr	r1, [r4, #32]
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	4628      	mov	r0, r5
 800c9d6:	47b0      	blx	r6
 800c9d8:	1c41      	adds	r1, r0, #1
 800c9da:	d1c7      	bne.n	800c96c <__sflush_r+0x34>
 800c9dc:	682b      	ldr	r3, [r5, #0]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d0c4      	beq.n	800c96c <__sflush_r+0x34>
 800c9e2:	2b1d      	cmp	r3, #29
 800c9e4:	d001      	beq.n	800c9ea <__sflush_r+0xb2>
 800c9e6:	2b16      	cmp	r3, #22
 800c9e8:	d101      	bne.n	800c9ee <__sflush_r+0xb6>
 800c9ea:	602f      	str	r7, [r5, #0]
 800c9ec:	e7b1      	b.n	800c952 <__sflush_r+0x1a>
 800c9ee:	89a3      	ldrh	r3, [r4, #12]
 800c9f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9f4:	81a3      	strh	r3, [r4, #12]
 800c9f6:	e7ad      	b.n	800c954 <__sflush_r+0x1c>
 800c9f8:	690f      	ldr	r7, [r1, #16]
 800c9fa:	2f00      	cmp	r7, #0
 800c9fc:	d0a9      	beq.n	800c952 <__sflush_r+0x1a>
 800c9fe:	0793      	lsls	r3, r2, #30
 800ca00:	680e      	ldr	r6, [r1, #0]
 800ca02:	bf08      	it	eq
 800ca04:	694b      	ldreq	r3, [r1, #20]
 800ca06:	600f      	str	r7, [r1, #0]
 800ca08:	bf18      	it	ne
 800ca0a:	2300      	movne	r3, #0
 800ca0c:	eba6 0807 	sub.w	r8, r6, r7
 800ca10:	608b      	str	r3, [r1, #8]
 800ca12:	f1b8 0f00 	cmp.w	r8, #0
 800ca16:	dd9c      	ble.n	800c952 <__sflush_r+0x1a>
 800ca18:	6a21      	ldr	r1, [r4, #32]
 800ca1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca1c:	4643      	mov	r3, r8
 800ca1e:	463a      	mov	r2, r7
 800ca20:	4628      	mov	r0, r5
 800ca22:	47b0      	blx	r6
 800ca24:	2800      	cmp	r0, #0
 800ca26:	dc06      	bgt.n	800ca36 <__sflush_r+0xfe>
 800ca28:	89a3      	ldrh	r3, [r4, #12]
 800ca2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca2e:	81a3      	strh	r3, [r4, #12]
 800ca30:	f04f 30ff 	mov.w	r0, #4294967295
 800ca34:	e78e      	b.n	800c954 <__sflush_r+0x1c>
 800ca36:	4407      	add	r7, r0
 800ca38:	eba8 0800 	sub.w	r8, r8, r0
 800ca3c:	e7e9      	b.n	800ca12 <__sflush_r+0xda>
 800ca3e:	bf00      	nop
 800ca40:	20400001 	.word	0x20400001

0800ca44 <_fflush_r>:
 800ca44:	b538      	push	{r3, r4, r5, lr}
 800ca46:	690b      	ldr	r3, [r1, #16]
 800ca48:	4605      	mov	r5, r0
 800ca4a:	460c      	mov	r4, r1
 800ca4c:	b913      	cbnz	r3, 800ca54 <_fflush_r+0x10>
 800ca4e:	2500      	movs	r5, #0
 800ca50:	4628      	mov	r0, r5
 800ca52:	bd38      	pop	{r3, r4, r5, pc}
 800ca54:	b118      	cbz	r0, 800ca5e <_fflush_r+0x1a>
 800ca56:	6983      	ldr	r3, [r0, #24]
 800ca58:	b90b      	cbnz	r3, 800ca5e <_fflush_r+0x1a>
 800ca5a:	f000 f887 	bl	800cb6c <__sinit>
 800ca5e:	4b14      	ldr	r3, [pc, #80]	; (800cab0 <_fflush_r+0x6c>)
 800ca60:	429c      	cmp	r4, r3
 800ca62:	d11b      	bne.n	800ca9c <_fflush_r+0x58>
 800ca64:	686c      	ldr	r4, [r5, #4]
 800ca66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d0ef      	beq.n	800ca4e <_fflush_r+0xa>
 800ca6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca70:	07d0      	lsls	r0, r2, #31
 800ca72:	d404      	bmi.n	800ca7e <_fflush_r+0x3a>
 800ca74:	0599      	lsls	r1, r3, #22
 800ca76:	d402      	bmi.n	800ca7e <_fflush_r+0x3a>
 800ca78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca7a:	f000 f915 	bl	800cca8 <__retarget_lock_acquire_recursive>
 800ca7e:	4628      	mov	r0, r5
 800ca80:	4621      	mov	r1, r4
 800ca82:	f7ff ff59 	bl	800c938 <__sflush_r>
 800ca86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca88:	07da      	lsls	r2, r3, #31
 800ca8a:	4605      	mov	r5, r0
 800ca8c:	d4e0      	bmi.n	800ca50 <_fflush_r+0xc>
 800ca8e:	89a3      	ldrh	r3, [r4, #12]
 800ca90:	059b      	lsls	r3, r3, #22
 800ca92:	d4dd      	bmi.n	800ca50 <_fflush_r+0xc>
 800ca94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca96:	f000 f908 	bl	800ccaa <__retarget_lock_release_recursive>
 800ca9a:	e7d9      	b.n	800ca50 <_fflush_r+0xc>
 800ca9c:	4b05      	ldr	r3, [pc, #20]	; (800cab4 <_fflush_r+0x70>)
 800ca9e:	429c      	cmp	r4, r3
 800caa0:	d101      	bne.n	800caa6 <_fflush_r+0x62>
 800caa2:	68ac      	ldr	r4, [r5, #8]
 800caa4:	e7df      	b.n	800ca66 <_fflush_r+0x22>
 800caa6:	4b04      	ldr	r3, [pc, #16]	; (800cab8 <_fflush_r+0x74>)
 800caa8:	429c      	cmp	r4, r3
 800caaa:	bf08      	it	eq
 800caac:	68ec      	ldreq	r4, [r5, #12]
 800caae:	e7da      	b.n	800ca66 <_fflush_r+0x22>
 800cab0:	0800d770 	.word	0x0800d770
 800cab4:	0800d790 	.word	0x0800d790
 800cab8:	0800d750 	.word	0x0800d750

0800cabc <std>:
 800cabc:	2300      	movs	r3, #0
 800cabe:	b510      	push	{r4, lr}
 800cac0:	4604      	mov	r4, r0
 800cac2:	e9c0 3300 	strd	r3, r3, [r0]
 800cac6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800caca:	6083      	str	r3, [r0, #8]
 800cacc:	8181      	strh	r1, [r0, #12]
 800cace:	6643      	str	r3, [r0, #100]	; 0x64
 800cad0:	81c2      	strh	r2, [r0, #14]
 800cad2:	6183      	str	r3, [r0, #24]
 800cad4:	4619      	mov	r1, r3
 800cad6:	2208      	movs	r2, #8
 800cad8:	305c      	adds	r0, #92	; 0x5c
 800cada:	f7ff fce7 	bl	800c4ac <memset>
 800cade:	4b05      	ldr	r3, [pc, #20]	; (800caf4 <std+0x38>)
 800cae0:	6263      	str	r3, [r4, #36]	; 0x24
 800cae2:	4b05      	ldr	r3, [pc, #20]	; (800caf8 <std+0x3c>)
 800cae4:	62a3      	str	r3, [r4, #40]	; 0x28
 800cae6:	4b05      	ldr	r3, [pc, #20]	; (800cafc <std+0x40>)
 800cae8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800caea:	4b05      	ldr	r3, [pc, #20]	; (800cb00 <std+0x44>)
 800caec:	6224      	str	r4, [r4, #32]
 800caee:	6323      	str	r3, [r4, #48]	; 0x30
 800caf0:	bd10      	pop	{r4, pc}
 800caf2:	bf00      	nop
 800caf4:	0800d36d 	.word	0x0800d36d
 800caf8:	0800d38f 	.word	0x0800d38f
 800cafc:	0800d3c7 	.word	0x0800d3c7
 800cb00:	0800d3eb 	.word	0x0800d3eb

0800cb04 <_cleanup_r>:
 800cb04:	4901      	ldr	r1, [pc, #4]	; (800cb0c <_cleanup_r+0x8>)
 800cb06:	f000 b8af 	b.w	800cc68 <_fwalk_reent>
 800cb0a:	bf00      	nop
 800cb0c:	0800ca45 	.word	0x0800ca45

0800cb10 <__sfmoreglue>:
 800cb10:	b570      	push	{r4, r5, r6, lr}
 800cb12:	2268      	movs	r2, #104	; 0x68
 800cb14:	1e4d      	subs	r5, r1, #1
 800cb16:	4355      	muls	r5, r2
 800cb18:	460e      	mov	r6, r1
 800cb1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cb1e:	f7ff fd39 	bl	800c594 <_malloc_r>
 800cb22:	4604      	mov	r4, r0
 800cb24:	b140      	cbz	r0, 800cb38 <__sfmoreglue+0x28>
 800cb26:	2100      	movs	r1, #0
 800cb28:	e9c0 1600 	strd	r1, r6, [r0]
 800cb2c:	300c      	adds	r0, #12
 800cb2e:	60a0      	str	r0, [r4, #8]
 800cb30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cb34:	f7ff fcba 	bl	800c4ac <memset>
 800cb38:	4620      	mov	r0, r4
 800cb3a:	bd70      	pop	{r4, r5, r6, pc}

0800cb3c <__sfp_lock_acquire>:
 800cb3c:	4801      	ldr	r0, [pc, #4]	; (800cb44 <__sfp_lock_acquire+0x8>)
 800cb3e:	f000 b8b3 	b.w	800cca8 <__retarget_lock_acquire_recursive>
 800cb42:	bf00      	nop
 800cb44:	20010ce9 	.word	0x20010ce9

0800cb48 <__sfp_lock_release>:
 800cb48:	4801      	ldr	r0, [pc, #4]	; (800cb50 <__sfp_lock_release+0x8>)
 800cb4a:	f000 b8ae 	b.w	800ccaa <__retarget_lock_release_recursive>
 800cb4e:	bf00      	nop
 800cb50:	20010ce9 	.word	0x20010ce9

0800cb54 <__sinit_lock_acquire>:
 800cb54:	4801      	ldr	r0, [pc, #4]	; (800cb5c <__sinit_lock_acquire+0x8>)
 800cb56:	f000 b8a7 	b.w	800cca8 <__retarget_lock_acquire_recursive>
 800cb5a:	bf00      	nop
 800cb5c:	20010cea 	.word	0x20010cea

0800cb60 <__sinit_lock_release>:
 800cb60:	4801      	ldr	r0, [pc, #4]	; (800cb68 <__sinit_lock_release+0x8>)
 800cb62:	f000 b8a2 	b.w	800ccaa <__retarget_lock_release_recursive>
 800cb66:	bf00      	nop
 800cb68:	20010cea 	.word	0x20010cea

0800cb6c <__sinit>:
 800cb6c:	b510      	push	{r4, lr}
 800cb6e:	4604      	mov	r4, r0
 800cb70:	f7ff fff0 	bl	800cb54 <__sinit_lock_acquire>
 800cb74:	69a3      	ldr	r3, [r4, #24]
 800cb76:	b11b      	cbz	r3, 800cb80 <__sinit+0x14>
 800cb78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb7c:	f7ff bff0 	b.w	800cb60 <__sinit_lock_release>
 800cb80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cb84:	6523      	str	r3, [r4, #80]	; 0x50
 800cb86:	4b13      	ldr	r3, [pc, #76]	; (800cbd4 <__sinit+0x68>)
 800cb88:	4a13      	ldr	r2, [pc, #76]	; (800cbd8 <__sinit+0x6c>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	62a2      	str	r2, [r4, #40]	; 0x28
 800cb8e:	42a3      	cmp	r3, r4
 800cb90:	bf04      	itt	eq
 800cb92:	2301      	moveq	r3, #1
 800cb94:	61a3      	streq	r3, [r4, #24]
 800cb96:	4620      	mov	r0, r4
 800cb98:	f000 f820 	bl	800cbdc <__sfp>
 800cb9c:	6060      	str	r0, [r4, #4]
 800cb9e:	4620      	mov	r0, r4
 800cba0:	f000 f81c 	bl	800cbdc <__sfp>
 800cba4:	60a0      	str	r0, [r4, #8]
 800cba6:	4620      	mov	r0, r4
 800cba8:	f000 f818 	bl	800cbdc <__sfp>
 800cbac:	2200      	movs	r2, #0
 800cbae:	60e0      	str	r0, [r4, #12]
 800cbb0:	2104      	movs	r1, #4
 800cbb2:	6860      	ldr	r0, [r4, #4]
 800cbb4:	f7ff ff82 	bl	800cabc <std>
 800cbb8:	68a0      	ldr	r0, [r4, #8]
 800cbba:	2201      	movs	r2, #1
 800cbbc:	2109      	movs	r1, #9
 800cbbe:	f7ff ff7d 	bl	800cabc <std>
 800cbc2:	68e0      	ldr	r0, [r4, #12]
 800cbc4:	2202      	movs	r2, #2
 800cbc6:	2112      	movs	r1, #18
 800cbc8:	f7ff ff78 	bl	800cabc <std>
 800cbcc:	2301      	movs	r3, #1
 800cbce:	61a3      	str	r3, [r4, #24]
 800cbd0:	e7d2      	b.n	800cb78 <__sinit+0xc>
 800cbd2:	bf00      	nop
 800cbd4:	0800d74c 	.word	0x0800d74c
 800cbd8:	0800cb05 	.word	0x0800cb05

0800cbdc <__sfp>:
 800cbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbde:	4607      	mov	r7, r0
 800cbe0:	f7ff ffac 	bl	800cb3c <__sfp_lock_acquire>
 800cbe4:	4b1e      	ldr	r3, [pc, #120]	; (800cc60 <__sfp+0x84>)
 800cbe6:	681e      	ldr	r6, [r3, #0]
 800cbe8:	69b3      	ldr	r3, [r6, #24]
 800cbea:	b913      	cbnz	r3, 800cbf2 <__sfp+0x16>
 800cbec:	4630      	mov	r0, r6
 800cbee:	f7ff ffbd 	bl	800cb6c <__sinit>
 800cbf2:	3648      	adds	r6, #72	; 0x48
 800cbf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cbf8:	3b01      	subs	r3, #1
 800cbfa:	d503      	bpl.n	800cc04 <__sfp+0x28>
 800cbfc:	6833      	ldr	r3, [r6, #0]
 800cbfe:	b30b      	cbz	r3, 800cc44 <__sfp+0x68>
 800cc00:	6836      	ldr	r6, [r6, #0]
 800cc02:	e7f7      	b.n	800cbf4 <__sfp+0x18>
 800cc04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cc08:	b9d5      	cbnz	r5, 800cc40 <__sfp+0x64>
 800cc0a:	4b16      	ldr	r3, [pc, #88]	; (800cc64 <__sfp+0x88>)
 800cc0c:	60e3      	str	r3, [r4, #12]
 800cc0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cc12:	6665      	str	r5, [r4, #100]	; 0x64
 800cc14:	f000 f847 	bl	800cca6 <__retarget_lock_init_recursive>
 800cc18:	f7ff ff96 	bl	800cb48 <__sfp_lock_release>
 800cc1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cc20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cc24:	6025      	str	r5, [r4, #0]
 800cc26:	61a5      	str	r5, [r4, #24]
 800cc28:	2208      	movs	r2, #8
 800cc2a:	4629      	mov	r1, r5
 800cc2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cc30:	f7ff fc3c 	bl	800c4ac <memset>
 800cc34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cc38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc40:	3468      	adds	r4, #104	; 0x68
 800cc42:	e7d9      	b.n	800cbf8 <__sfp+0x1c>
 800cc44:	2104      	movs	r1, #4
 800cc46:	4638      	mov	r0, r7
 800cc48:	f7ff ff62 	bl	800cb10 <__sfmoreglue>
 800cc4c:	4604      	mov	r4, r0
 800cc4e:	6030      	str	r0, [r6, #0]
 800cc50:	2800      	cmp	r0, #0
 800cc52:	d1d5      	bne.n	800cc00 <__sfp+0x24>
 800cc54:	f7ff ff78 	bl	800cb48 <__sfp_lock_release>
 800cc58:	230c      	movs	r3, #12
 800cc5a:	603b      	str	r3, [r7, #0]
 800cc5c:	e7ee      	b.n	800cc3c <__sfp+0x60>
 800cc5e:	bf00      	nop
 800cc60:	0800d74c 	.word	0x0800d74c
 800cc64:	ffff0001 	.word	0xffff0001

0800cc68 <_fwalk_reent>:
 800cc68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc6c:	4606      	mov	r6, r0
 800cc6e:	4688      	mov	r8, r1
 800cc70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc74:	2700      	movs	r7, #0
 800cc76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc7a:	f1b9 0901 	subs.w	r9, r9, #1
 800cc7e:	d505      	bpl.n	800cc8c <_fwalk_reent+0x24>
 800cc80:	6824      	ldr	r4, [r4, #0]
 800cc82:	2c00      	cmp	r4, #0
 800cc84:	d1f7      	bne.n	800cc76 <_fwalk_reent+0xe>
 800cc86:	4638      	mov	r0, r7
 800cc88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc8c:	89ab      	ldrh	r3, [r5, #12]
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	d907      	bls.n	800cca2 <_fwalk_reent+0x3a>
 800cc92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc96:	3301      	adds	r3, #1
 800cc98:	d003      	beq.n	800cca2 <_fwalk_reent+0x3a>
 800cc9a:	4629      	mov	r1, r5
 800cc9c:	4630      	mov	r0, r6
 800cc9e:	47c0      	blx	r8
 800cca0:	4307      	orrs	r7, r0
 800cca2:	3568      	adds	r5, #104	; 0x68
 800cca4:	e7e9      	b.n	800cc7a <_fwalk_reent+0x12>

0800cca6 <__retarget_lock_init_recursive>:
 800cca6:	4770      	bx	lr

0800cca8 <__retarget_lock_acquire_recursive>:
 800cca8:	4770      	bx	lr

0800ccaa <__retarget_lock_release_recursive>:
 800ccaa:	4770      	bx	lr

0800ccac <__swhatbuf_r>:
 800ccac:	b570      	push	{r4, r5, r6, lr}
 800ccae:	460e      	mov	r6, r1
 800ccb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccb4:	2900      	cmp	r1, #0
 800ccb6:	b096      	sub	sp, #88	; 0x58
 800ccb8:	4614      	mov	r4, r2
 800ccba:	461d      	mov	r5, r3
 800ccbc:	da08      	bge.n	800ccd0 <__swhatbuf_r+0x24>
 800ccbe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	602a      	str	r2, [r5, #0]
 800ccc6:	061a      	lsls	r2, r3, #24
 800ccc8:	d410      	bmi.n	800ccec <__swhatbuf_r+0x40>
 800ccca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccce:	e00e      	b.n	800ccee <__swhatbuf_r+0x42>
 800ccd0:	466a      	mov	r2, sp
 800ccd2:	f000 fbb1 	bl	800d438 <_fstat_r>
 800ccd6:	2800      	cmp	r0, #0
 800ccd8:	dbf1      	blt.n	800ccbe <__swhatbuf_r+0x12>
 800ccda:	9a01      	ldr	r2, [sp, #4]
 800ccdc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cce0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cce4:	425a      	negs	r2, r3
 800cce6:	415a      	adcs	r2, r3
 800cce8:	602a      	str	r2, [r5, #0]
 800ccea:	e7ee      	b.n	800ccca <__swhatbuf_r+0x1e>
 800ccec:	2340      	movs	r3, #64	; 0x40
 800ccee:	2000      	movs	r0, #0
 800ccf0:	6023      	str	r3, [r4, #0]
 800ccf2:	b016      	add	sp, #88	; 0x58
 800ccf4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ccf8 <__smakebuf_r>:
 800ccf8:	898b      	ldrh	r3, [r1, #12]
 800ccfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ccfc:	079d      	lsls	r5, r3, #30
 800ccfe:	4606      	mov	r6, r0
 800cd00:	460c      	mov	r4, r1
 800cd02:	d507      	bpl.n	800cd14 <__smakebuf_r+0x1c>
 800cd04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd08:	6023      	str	r3, [r4, #0]
 800cd0a:	6123      	str	r3, [r4, #16]
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	6163      	str	r3, [r4, #20]
 800cd10:	b002      	add	sp, #8
 800cd12:	bd70      	pop	{r4, r5, r6, pc}
 800cd14:	ab01      	add	r3, sp, #4
 800cd16:	466a      	mov	r2, sp
 800cd18:	f7ff ffc8 	bl	800ccac <__swhatbuf_r>
 800cd1c:	9900      	ldr	r1, [sp, #0]
 800cd1e:	4605      	mov	r5, r0
 800cd20:	4630      	mov	r0, r6
 800cd22:	f7ff fc37 	bl	800c594 <_malloc_r>
 800cd26:	b948      	cbnz	r0, 800cd3c <__smakebuf_r+0x44>
 800cd28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd2c:	059a      	lsls	r2, r3, #22
 800cd2e:	d4ef      	bmi.n	800cd10 <__smakebuf_r+0x18>
 800cd30:	f023 0303 	bic.w	r3, r3, #3
 800cd34:	f043 0302 	orr.w	r3, r3, #2
 800cd38:	81a3      	strh	r3, [r4, #12]
 800cd3a:	e7e3      	b.n	800cd04 <__smakebuf_r+0xc>
 800cd3c:	4b0d      	ldr	r3, [pc, #52]	; (800cd74 <__smakebuf_r+0x7c>)
 800cd3e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd40:	89a3      	ldrh	r3, [r4, #12]
 800cd42:	6020      	str	r0, [r4, #0]
 800cd44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd48:	81a3      	strh	r3, [r4, #12]
 800cd4a:	9b00      	ldr	r3, [sp, #0]
 800cd4c:	6163      	str	r3, [r4, #20]
 800cd4e:	9b01      	ldr	r3, [sp, #4]
 800cd50:	6120      	str	r0, [r4, #16]
 800cd52:	b15b      	cbz	r3, 800cd6c <__smakebuf_r+0x74>
 800cd54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd58:	4630      	mov	r0, r6
 800cd5a:	f000 fb7f 	bl	800d45c <_isatty_r>
 800cd5e:	b128      	cbz	r0, 800cd6c <__smakebuf_r+0x74>
 800cd60:	89a3      	ldrh	r3, [r4, #12]
 800cd62:	f023 0303 	bic.w	r3, r3, #3
 800cd66:	f043 0301 	orr.w	r3, r3, #1
 800cd6a:	81a3      	strh	r3, [r4, #12]
 800cd6c:	89a0      	ldrh	r0, [r4, #12]
 800cd6e:	4305      	orrs	r5, r0
 800cd70:	81a5      	strh	r5, [r4, #12]
 800cd72:	e7cd      	b.n	800cd10 <__smakebuf_r+0x18>
 800cd74:	0800cb05 	.word	0x0800cb05

0800cd78 <__malloc_lock>:
 800cd78:	4801      	ldr	r0, [pc, #4]	; (800cd80 <__malloc_lock+0x8>)
 800cd7a:	f7ff bf95 	b.w	800cca8 <__retarget_lock_acquire_recursive>
 800cd7e:	bf00      	nop
 800cd80:	20010ce8 	.word	0x20010ce8

0800cd84 <__malloc_unlock>:
 800cd84:	4801      	ldr	r0, [pc, #4]	; (800cd8c <__malloc_unlock+0x8>)
 800cd86:	f7ff bf90 	b.w	800ccaa <__retarget_lock_release_recursive>
 800cd8a:	bf00      	nop
 800cd8c:	20010ce8 	.word	0x20010ce8

0800cd90 <__sfputc_r>:
 800cd90:	6893      	ldr	r3, [r2, #8]
 800cd92:	3b01      	subs	r3, #1
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	b410      	push	{r4}
 800cd98:	6093      	str	r3, [r2, #8]
 800cd9a:	da08      	bge.n	800cdae <__sfputc_r+0x1e>
 800cd9c:	6994      	ldr	r4, [r2, #24]
 800cd9e:	42a3      	cmp	r3, r4
 800cda0:	db01      	blt.n	800cda6 <__sfputc_r+0x16>
 800cda2:	290a      	cmp	r1, #10
 800cda4:	d103      	bne.n	800cdae <__sfputc_r+0x1e>
 800cda6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdaa:	f7ff bd05 	b.w	800c7b8 <__swbuf_r>
 800cdae:	6813      	ldr	r3, [r2, #0]
 800cdb0:	1c58      	adds	r0, r3, #1
 800cdb2:	6010      	str	r0, [r2, #0]
 800cdb4:	7019      	strb	r1, [r3, #0]
 800cdb6:	4608      	mov	r0, r1
 800cdb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdbc:	4770      	bx	lr

0800cdbe <__sfputs_r>:
 800cdbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdc0:	4606      	mov	r6, r0
 800cdc2:	460f      	mov	r7, r1
 800cdc4:	4614      	mov	r4, r2
 800cdc6:	18d5      	adds	r5, r2, r3
 800cdc8:	42ac      	cmp	r4, r5
 800cdca:	d101      	bne.n	800cdd0 <__sfputs_r+0x12>
 800cdcc:	2000      	movs	r0, #0
 800cdce:	e007      	b.n	800cde0 <__sfputs_r+0x22>
 800cdd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdd4:	463a      	mov	r2, r7
 800cdd6:	4630      	mov	r0, r6
 800cdd8:	f7ff ffda 	bl	800cd90 <__sfputc_r>
 800cddc:	1c43      	adds	r3, r0, #1
 800cdde:	d1f3      	bne.n	800cdc8 <__sfputs_r+0xa>
 800cde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cde4 <_vfiprintf_r>:
 800cde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde8:	460d      	mov	r5, r1
 800cdea:	b09d      	sub	sp, #116	; 0x74
 800cdec:	4614      	mov	r4, r2
 800cdee:	4698      	mov	r8, r3
 800cdf0:	4606      	mov	r6, r0
 800cdf2:	b118      	cbz	r0, 800cdfc <_vfiprintf_r+0x18>
 800cdf4:	6983      	ldr	r3, [r0, #24]
 800cdf6:	b90b      	cbnz	r3, 800cdfc <_vfiprintf_r+0x18>
 800cdf8:	f7ff feb8 	bl	800cb6c <__sinit>
 800cdfc:	4b89      	ldr	r3, [pc, #548]	; (800d024 <_vfiprintf_r+0x240>)
 800cdfe:	429d      	cmp	r5, r3
 800ce00:	d11b      	bne.n	800ce3a <_vfiprintf_r+0x56>
 800ce02:	6875      	ldr	r5, [r6, #4]
 800ce04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce06:	07d9      	lsls	r1, r3, #31
 800ce08:	d405      	bmi.n	800ce16 <_vfiprintf_r+0x32>
 800ce0a:	89ab      	ldrh	r3, [r5, #12]
 800ce0c:	059a      	lsls	r2, r3, #22
 800ce0e:	d402      	bmi.n	800ce16 <_vfiprintf_r+0x32>
 800ce10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce12:	f7ff ff49 	bl	800cca8 <__retarget_lock_acquire_recursive>
 800ce16:	89ab      	ldrh	r3, [r5, #12]
 800ce18:	071b      	lsls	r3, r3, #28
 800ce1a:	d501      	bpl.n	800ce20 <_vfiprintf_r+0x3c>
 800ce1c:	692b      	ldr	r3, [r5, #16]
 800ce1e:	b9eb      	cbnz	r3, 800ce5c <_vfiprintf_r+0x78>
 800ce20:	4629      	mov	r1, r5
 800ce22:	4630      	mov	r0, r6
 800ce24:	f7ff fd1a 	bl	800c85c <__swsetup_r>
 800ce28:	b1c0      	cbz	r0, 800ce5c <_vfiprintf_r+0x78>
 800ce2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce2c:	07dc      	lsls	r4, r3, #31
 800ce2e:	d50e      	bpl.n	800ce4e <_vfiprintf_r+0x6a>
 800ce30:	f04f 30ff 	mov.w	r0, #4294967295
 800ce34:	b01d      	add	sp, #116	; 0x74
 800ce36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce3a:	4b7b      	ldr	r3, [pc, #492]	; (800d028 <_vfiprintf_r+0x244>)
 800ce3c:	429d      	cmp	r5, r3
 800ce3e:	d101      	bne.n	800ce44 <_vfiprintf_r+0x60>
 800ce40:	68b5      	ldr	r5, [r6, #8]
 800ce42:	e7df      	b.n	800ce04 <_vfiprintf_r+0x20>
 800ce44:	4b79      	ldr	r3, [pc, #484]	; (800d02c <_vfiprintf_r+0x248>)
 800ce46:	429d      	cmp	r5, r3
 800ce48:	bf08      	it	eq
 800ce4a:	68f5      	ldreq	r5, [r6, #12]
 800ce4c:	e7da      	b.n	800ce04 <_vfiprintf_r+0x20>
 800ce4e:	89ab      	ldrh	r3, [r5, #12]
 800ce50:	0598      	lsls	r0, r3, #22
 800ce52:	d4ed      	bmi.n	800ce30 <_vfiprintf_r+0x4c>
 800ce54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce56:	f7ff ff28 	bl	800ccaa <__retarget_lock_release_recursive>
 800ce5a:	e7e9      	b.n	800ce30 <_vfiprintf_r+0x4c>
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ce60:	2320      	movs	r3, #32
 800ce62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce66:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce6a:	2330      	movs	r3, #48	; 0x30
 800ce6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d030 <_vfiprintf_r+0x24c>
 800ce70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce74:	f04f 0901 	mov.w	r9, #1
 800ce78:	4623      	mov	r3, r4
 800ce7a:	469a      	mov	sl, r3
 800ce7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce80:	b10a      	cbz	r2, 800ce86 <_vfiprintf_r+0xa2>
 800ce82:	2a25      	cmp	r2, #37	; 0x25
 800ce84:	d1f9      	bne.n	800ce7a <_vfiprintf_r+0x96>
 800ce86:	ebba 0b04 	subs.w	fp, sl, r4
 800ce8a:	d00b      	beq.n	800cea4 <_vfiprintf_r+0xc0>
 800ce8c:	465b      	mov	r3, fp
 800ce8e:	4622      	mov	r2, r4
 800ce90:	4629      	mov	r1, r5
 800ce92:	4630      	mov	r0, r6
 800ce94:	f7ff ff93 	bl	800cdbe <__sfputs_r>
 800ce98:	3001      	adds	r0, #1
 800ce9a:	f000 80aa 	beq.w	800cff2 <_vfiprintf_r+0x20e>
 800ce9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cea0:	445a      	add	r2, fp
 800cea2:	9209      	str	r2, [sp, #36]	; 0x24
 800cea4:	f89a 3000 	ldrb.w	r3, [sl]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	f000 80a2 	beq.w	800cff2 <_vfiprintf_r+0x20e>
 800ceae:	2300      	movs	r3, #0
 800ceb0:	f04f 32ff 	mov.w	r2, #4294967295
 800ceb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ceb8:	f10a 0a01 	add.w	sl, sl, #1
 800cebc:	9304      	str	r3, [sp, #16]
 800cebe:	9307      	str	r3, [sp, #28]
 800cec0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cec4:	931a      	str	r3, [sp, #104]	; 0x68
 800cec6:	4654      	mov	r4, sl
 800cec8:	2205      	movs	r2, #5
 800ceca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cece:	4858      	ldr	r0, [pc, #352]	; (800d030 <_vfiprintf_r+0x24c>)
 800ced0:	f7f3 f99e 	bl	8000210 <memchr>
 800ced4:	9a04      	ldr	r2, [sp, #16]
 800ced6:	b9d8      	cbnz	r0, 800cf10 <_vfiprintf_r+0x12c>
 800ced8:	06d1      	lsls	r1, r2, #27
 800ceda:	bf44      	itt	mi
 800cedc:	2320      	movmi	r3, #32
 800cede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cee2:	0713      	lsls	r3, r2, #28
 800cee4:	bf44      	itt	mi
 800cee6:	232b      	movmi	r3, #43	; 0x2b
 800cee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ceec:	f89a 3000 	ldrb.w	r3, [sl]
 800cef0:	2b2a      	cmp	r3, #42	; 0x2a
 800cef2:	d015      	beq.n	800cf20 <_vfiprintf_r+0x13c>
 800cef4:	9a07      	ldr	r2, [sp, #28]
 800cef6:	4654      	mov	r4, sl
 800cef8:	2000      	movs	r0, #0
 800cefa:	f04f 0c0a 	mov.w	ip, #10
 800cefe:	4621      	mov	r1, r4
 800cf00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf04:	3b30      	subs	r3, #48	; 0x30
 800cf06:	2b09      	cmp	r3, #9
 800cf08:	d94e      	bls.n	800cfa8 <_vfiprintf_r+0x1c4>
 800cf0a:	b1b0      	cbz	r0, 800cf3a <_vfiprintf_r+0x156>
 800cf0c:	9207      	str	r2, [sp, #28]
 800cf0e:	e014      	b.n	800cf3a <_vfiprintf_r+0x156>
 800cf10:	eba0 0308 	sub.w	r3, r0, r8
 800cf14:	fa09 f303 	lsl.w	r3, r9, r3
 800cf18:	4313      	orrs	r3, r2
 800cf1a:	9304      	str	r3, [sp, #16]
 800cf1c:	46a2      	mov	sl, r4
 800cf1e:	e7d2      	b.n	800cec6 <_vfiprintf_r+0xe2>
 800cf20:	9b03      	ldr	r3, [sp, #12]
 800cf22:	1d19      	adds	r1, r3, #4
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	9103      	str	r1, [sp, #12]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	bfbb      	ittet	lt
 800cf2c:	425b      	neglt	r3, r3
 800cf2e:	f042 0202 	orrlt.w	r2, r2, #2
 800cf32:	9307      	strge	r3, [sp, #28]
 800cf34:	9307      	strlt	r3, [sp, #28]
 800cf36:	bfb8      	it	lt
 800cf38:	9204      	strlt	r2, [sp, #16]
 800cf3a:	7823      	ldrb	r3, [r4, #0]
 800cf3c:	2b2e      	cmp	r3, #46	; 0x2e
 800cf3e:	d10c      	bne.n	800cf5a <_vfiprintf_r+0x176>
 800cf40:	7863      	ldrb	r3, [r4, #1]
 800cf42:	2b2a      	cmp	r3, #42	; 0x2a
 800cf44:	d135      	bne.n	800cfb2 <_vfiprintf_r+0x1ce>
 800cf46:	9b03      	ldr	r3, [sp, #12]
 800cf48:	1d1a      	adds	r2, r3, #4
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	9203      	str	r2, [sp, #12]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	bfb8      	it	lt
 800cf52:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf56:	3402      	adds	r4, #2
 800cf58:	9305      	str	r3, [sp, #20]
 800cf5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d040 <_vfiprintf_r+0x25c>
 800cf5e:	7821      	ldrb	r1, [r4, #0]
 800cf60:	2203      	movs	r2, #3
 800cf62:	4650      	mov	r0, sl
 800cf64:	f7f3 f954 	bl	8000210 <memchr>
 800cf68:	b140      	cbz	r0, 800cf7c <_vfiprintf_r+0x198>
 800cf6a:	2340      	movs	r3, #64	; 0x40
 800cf6c:	eba0 000a 	sub.w	r0, r0, sl
 800cf70:	fa03 f000 	lsl.w	r0, r3, r0
 800cf74:	9b04      	ldr	r3, [sp, #16]
 800cf76:	4303      	orrs	r3, r0
 800cf78:	3401      	adds	r4, #1
 800cf7a:	9304      	str	r3, [sp, #16]
 800cf7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf80:	482c      	ldr	r0, [pc, #176]	; (800d034 <_vfiprintf_r+0x250>)
 800cf82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf86:	2206      	movs	r2, #6
 800cf88:	f7f3 f942 	bl	8000210 <memchr>
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	d03f      	beq.n	800d010 <_vfiprintf_r+0x22c>
 800cf90:	4b29      	ldr	r3, [pc, #164]	; (800d038 <_vfiprintf_r+0x254>)
 800cf92:	bb1b      	cbnz	r3, 800cfdc <_vfiprintf_r+0x1f8>
 800cf94:	9b03      	ldr	r3, [sp, #12]
 800cf96:	3307      	adds	r3, #7
 800cf98:	f023 0307 	bic.w	r3, r3, #7
 800cf9c:	3308      	adds	r3, #8
 800cf9e:	9303      	str	r3, [sp, #12]
 800cfa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfa2:	443b      	add	r3, r7
 800cfa4:	9309      	str	r3, [sp, #36]	; 0x24
 800cfa6:	e767      	b.n	800ce78 <_vfiprintf_r+0x94>
 800cfa8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfac:	460c      	mov	r4, r1
 800cfae:	2001      	movs	r0, #1
 800cfb0:	e7a5      	b.n	800cefe <_vfiprintf_r+0x11a>
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	3401      	adds	r4, #1
 800cfb6:	9305      	str	r3, [sp, #20]
 800cfb8:	4619      	mov	r1, r3
 800cfba:	f04f 0c0a 	mov.w	ip, #10
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfc4:	3a30      	subs	r2, #48	; 0x30
 800cfc6:	2a09      	cmp	r2, #9
 800cfc8:	d903      	bls.n	800cfd2 <_vfiprintf_r+0x1ee>
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d0c5      	beq.n	800cf5a <_vfiprintf_r+0x176>
 800cfce:	9105      	str	r1, [sp, #20]
 800cfd0:	e7c3      	b.n	800cf5a <_vfiprintf_r+0x176>
 800cfd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfd6:	4604      	mov	r4, r0
 800cfd8:	2301      	movs	r3, #1
 800cfda:	e7f0      	b.n	800cfbe <_vfiprintf_r+0x1da>
 800cfdc:	ab03      	add	r3, sp, #12
 800cfde:	9300      	str	r3, [sp, #0]
 800cfe0:	462a      	mov	r2, r5
 800cfe2:	4b16      	ldr	r3, [pc, #88]	; (800d03c <_vfiprintf_r+0x258>)
 800cfe4:	a904      	add	r1, sp, #16
 800cfe6:	4630      	mov	r0, r6
 800cfe8:	f3af 8000 	nop.w
 800cfec:	4607      	mov	r7, r0
 800cfee:	1c78      	adds	r0, r7, #1
 800cff0:	d1d6      	bne.n	800cfa0 <_vfiprintf_r+0x1bc>
 800cff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cff4:	07d9      	lsls	r1, r3, #31
 800cff6:	d405      	bmi.n	800d004 <_vfiprintf_r+0x220>
 800cff8:	89ab      	ldrh	r3, [r5, #12]
 800cffa:	059a      	lsls	r2, r3, #22
 800cffc:	d402      	bmi.n	800d004 <_vfiprintf_r+0x220>
 800cffe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d000:	f7ff fe53 	bl	800ccaa <__retarget_lock_release_recursive>
 800d004:	89ab      	ldrh	r3, [r5, #12]
 800d006:	065b      	lsls	r3, r3, #25
 800d008:	f53f af12 	bmi.w	800ce30 <_vfiprintf_r+0x4c>
 800d00c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d00e:	e711      	b.n	800ce34 <_vfiprintf_r+0x50>
 800d010:	ab03      	add	r3, sp, #12
 800d012:	9300      	str	r3, [sp, #0]
 800d014:	462a      	mov	r2, r5
 800d016:	4b09      	ldr	r3, [pc, #36]	; (800d03c <_vfiprintf_r+0x258>)
 800d018:	a904      	add	r1, sp, #16
 800d01a:	4630      	mov	r0, r6
 800d01c:	f000 f880 	bl	800d120 <_printf_i>
 800d020:	e7e4      	b.n	800cfec <_vfiprintf_r+0x208>
 800d022:	bf00      	nop
 800d024:	0800d770 	.word	0x0800d770
 800d028:	0800d790 	.word	0x0800d790
 800d02c:	0800d750 	.word	0x0800d750
 800d030:	0800d7b0 	.word	0x0800d7b0
 800d034:	0800d7ba 	.word	0x0800d7ba
 800d038:	00000000 	.word	0x00000000
 800d03c:	0800cdbf 	.word	0x0800cdbf
 800d040:	0800d7b6 	.word	0x0800d7b6

0800d044 <_printf_common>:
 800d044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d048:	4616      	mov	r6, r2
 800d04a:	4699      	mov	r9, r3
 800d04c:	688a      	ldr	r2, [r1, #8]
 800d04e:	690b      	ldr	r3, [r1, #16]
 800d050:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d054:	4293      	cmp	r3, r2
 800d056:	bfb8      	it	lt
 800d058:	4613      	movlt	r3, r2
 800d05a:	6033      	str	r3, [r6, #0]
 800d05c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d060:	4607      	mov	r7, r0
 800d062:	460c      	mov	r4, r1
 800d064:	b10a      	cbz	r2, 800d06a <_printf_common+0x26>
 800d066:	3301      	adds	r3, #1
 800d068:	6033      	str	r3, [r6, #0]
 800d06a:	6823      	ldr	r3, [r4, #0]
 800d06c:	0699      	lsls	r1, r3, #26
 800d06e:	bf42      	ittt	mi
 800d070:	6833      	ldrmi	r3, [r6, #0]
 800d072:	3302      	addmi	r3, #2
 800d074:	6033      	strmi	r3, [r6, #0]
 800d076:	6825      	ldr	r5, [r4, #0]
 800d078:	f015 0506 	ands.w	r5, r5, #6
 800d07c:	d106      	bne.n	800d08c <_printf_common+0x48>
 800d07e:	f104 0a19 	add.w	sl, r4, #25
 800d082:	68e3      	ldr	r3, [r4, #12]
 800d084:	6832      	ldr	r2, [r6, #0]
 800d086:	1a9b      	subs	r3, r3, r2
 800d088:	42ab      	cmp	r3, r5
 800d08a:	dc26      	bgt.n	800d0da <_printf_common+0x96>
 800d08c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d090:	1e13      	subs	r3, r2, #0
 800d092:	6822      	ldr	r2, [r4, #0]
 800d094:	bf18      	it	ne
 800d096:	2301      	movne	r3, #1
 800d098:	0692      	lsls	r2, r2, #26
 800d09a:	d42b      	bmi.n	800d0f4 <_printf_common+0xb0>
 800d09c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0a0:	4649      	mov	r1, r9
 800d0a2:	4638      	mov	r0, r7
 800d0a4:	47c0      	blx	r8
 800d0a6:	3001      	adds	r0, #1
 800d0a8:	d01e      	beq.n	800d0e8 <_printf_common+0xa4>
 800d0aa:	6823      	ldr	r3, [r4, #0]
 800d0ac:	68e5      	ldr	r5, [r4, #12]
 800d0ae:	6832      	ldr	r2, [r6, #0]
 800d0b0:	f003 0306 	and.w	r3, r3, #6
 800d0b4:	2b04      	cmp	r3, #4
 800d0b6:	bf08      	it	eq
 800d0b8:	1aad      	subeq	r5, r5, r2
 800d0ba:	68a3      	ldr	r3, [r4, #8]
 800d0bc:	6922      	ldr	r2, [r4, #16]
 800d0be:	bf0c      	ite	eq
 800d0c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0c4:	2500      	movne	r5, #0
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	bfc4      	itt	gt
 800d0ca:	1a9b      	subgt	r3, r3, r2
 800d0cc:	18ed      	addgt	r5, r5, r3
 800d0ce:	2600      	movs	r6, #0
 800d0d0:	341a      	adds	r4, #26
 800d0d2:	42b5      	cmp	r5, r6
 800d0d4:	d11a      	bne.n	800d10c <_printf_common+0xc8>
 800d0d6:	2000      	movs	r0, #0
 800d0d8:	e008      	b.n	800d0ec <_printf_common+0xa8>
 800d0da:	2301      	movs	r3, #1
 800d0dc:	4652      	mov	r2, sl
 800d0de:	4649      	mov	r1, r9
 800d0e0:	4638      	mov	r0, r7
 800d0e2:	47c0      	blx	r8
 800d0e4:	3001      	adds	r0, #1
 800d0e6:	d103      	bne.n	800d0f0 <_printf_common+0xac>
 800d0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0f0:	3501      	adds	r5, #1
 800d0f2:	e7c6      	b.n	800d082 <_printf_common+0x3e>
 800d0f4:	18e1      	adds	r1, r4, r3
 800d0f6:	1c5a      	adds	r2, r3, #1
 800d0f8:	2030      	movs	r0, #48	; 0x30
 800d0fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0fe:	4422      	add	r2, r4
 800d100:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d104:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d108:	3302      	adds	r3, #2
 800d10a:	e7c7      	b.n	800d09c <_printf_common+0x58>
 800d10c:	2301      	movs	r3, #1
 800d10e:	4622      	mov	r2, r4
 800d110:	4649      	mov	r1, r9
 800d112:	4638      	mov	r0, r7
 800d114:	47c0      	blx	r8
 800d116:	3001      	adds	r0, #1
 800d118:	d0e6      	beq.n	800d0e8 <_printf_common+0xa4>
 800d11a:	3601      	adds	r6, #1
 800d11c:	e7d9      	b.n	800d0d2 <_printf_common+0x8e>
	...

0800d120 <_printf_i>:
 800d120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d124:	7e0f      	ldrb	r7, [r1, #24]
 800d126:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d128:	2f78      	cmp	r7, #120	; 0x78
 800d12a:	4691      	mov	r9, r2
 800d12c:	4680      	mov	r8, r0
 800d12e:	460c      	mov	r4, r1
 800d130:	469a      	mov	sl, r3
 800d132:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d136:	d807      	bhi.n	800d148 <_printf_i+0x28>
 800d138:	2f62      	cmp	r7, #98	; 0x62
 800d13a:	d80a      	bhi.n	800d152 <_printf_i+0x32>
 800d13c:	2f00      	cmp	r7, #0
 800d13e:	f000 80d8 	beq.w	800d2f2 <_printf_i+0x1d2>
 800d142:	2f58      	cmp	r7, #88	; 0x58
 800d144:	f000 80a3 	beq.w	800d28e <_printf_i+0x16e>
 800d148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d14c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d150:	e03a      	b.n	800d1c8 <_printf_i+0xa8>
 800d152:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d156:	2b15      	cmp	r3, #21
 800d158:	d8f6      	bhi.n	800d148 <_printf_i+0x28>
 800d15a:	a101      	add	r1, pc, #4	; (adr r1, 800d160 <_printf_i+0x40>)
 800d15c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d160:	0800d1b9 	.word	0x0800d1b9
 800d164:	0800d1cd 	.word	0x0800d1cd
 800d168:	0800d149 	.word	0x0800d149
 800d16c:	0800d149 	.word	0x0800d149
 800d170:	0800d149 	.word	0x0800d149
 800d174:	0800d149 	.word	0x0800d149
 800d178:	0800d1cd 	.word	0x0800d1cd
 800d17c:	0800d149 	.word	0x0800d149
 800d180:	0800d149 	.word	0x0800d149
 800d184:	0800d149 	.word	0x0800d149
 800d188:	0800d149 	.word	0x0800d149
 800d18c:	0800d2d9 	.word	0x0800d2d9
 800d190:	0800d1fd 	.word	0x0800d1fd
 800d194:	0800d2bb 	.word	0x0800d2bb
 800d198:	0800d149 	.word	0x0800d149
 800d19c:	0800d149 	.word	0x0800d149
 800d1a0:	0800d2fb 	.word	0x0800d2fb
 800d1a4:	0800d149 	.word	0x0800d149
 800d1a8:	0800d1fd 	.word	0x0800d1fd
 800d1ac:	0800d149 	.word	0x0800d149
 800d1b0:	0800d149 	.word	0x0800d149
 800d1b4:	0800d2c3 	.word	0x0800d2c3
 800d1b8:	682b      	ldr	r3, [r5, #0]
 800d1ba:	1d1a      	adds	r2, r3, #4
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	602a      	str	r2, [r5, #0]
 800d1c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	e0a3      	b.n	800d314 <_printf_i+0x1f4>
 800d1cc:	6820      	ldr	r0, [r4, #0]
 800d1ce:	6829      	ldr	r1, [r5, #0]
 800d1d0:	0606      	lsls	r6, r0, #24
 800d1d2:	f101 0304 	add.w	r3, r1, #4
 800d1d6:	d50a      	bpl.n	800d1ee <_printf_i+0xce>
 800d1d8:	680e      	ldr	r6, [r1, #0]
 800d1da:	602b      	str	r3, [r5, #0]
 800d1dc:	2e00      	cmp	r6, #0
 800d1de:	da03      	bge.n	800d1e8 <_printf_i+0xc8>
 800d1e0:	232d      	movs	r3, #45	; 0x2d
 800d1e2:	4276      	negs	r6, r6
 800d1e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1e8:	485e      	ldr	r0, [pc, #376]	; (800d364 <_printf_i+0x244>)
 800d1ea:	230a      	movs	r3, #10
 800d1ec:	e019      	b.n	800d222 <_printf_i+0x102>
 800d1ee:	680e      	ldr	r6, [r1, #0]
 800d1f0:	602b      	str	r3, [r5, #0]
 800d1f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d1f6:	bf18      	it	ne
 800d1f8:	b236      	sxthne	r6, r6
 800d1fa:	e7ef      	b.n	800d1dc <_printf_i+0xbc>
 800d1fc:	682b      	ldr	r3, [r5, #0]
 800d1fe:	6820      	ldr	r0, [r4, #0]
 800d200:	1d19      	adds	r1, r3, #4
 800d202:	6029      	str	r1, [r5, #0]
 800d204:	0601      	lsls	r1, r0, #24
 800d206:	d501      	bpl.n	800d20c <_printf_i+0xec>
 800d208:	681e      	ldr	r6, [r3, #0]
 800d20a:	e002      	b.n	800d212 <_printf_i+0xf2>
 800d20c:	0646      	lsls	r6, r0, #25
 800d20e:	d5fb      	bpl.n	800d208 <_printf_i+0xe8>
 800d210:	881e      	ldrh	r6, [r3, #0]
 800d212:	4854      	ldr	r0, [pc, #336]	; (800d364 <_printf_i+0x244>)
 800d214:	2f6f      	cmp	r7, #111	; 0x6f
 800d216:	bf0c      	ite	eq
 800d218:	2308      	moveq	r3, #8
 800d21a:	230a      	movne	r3, #10
 800d21c:	2100      	movs	r1, #0
 800d21e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d222:	6865      	ldr	r5, [r4, #4]
 800d224:	60a5      	str	r5, [r4, #8]
 800d226:	2d00      	cmp	r5, #0
 800d228:	bfa2      	ittt	ge
 800d22a:	6821      	ldrge	r1, [r4, #0]
 800d22c:	f021 0104 	bicge.w	r1, r1, #4
 800d230:	6021      	strge	r1, [r4, #0]
 800d232:	b90e      	cbnz	r6, 800d238 <_printf_i+0x118>
 800d234:	2d00      	cmp	r5, #0
 800d236:	d04d      	beq.n	800d2d4 <_printf_i+0x1b4>
 800d238:	4615      	mov	r5, r2
 800d23a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d23e:	fb03 6711 	mls	r7, r3, r1, r6
 800d242:	5dc7      	ldrb	r7, [r0, r7]
 800d244:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d248:	4637      	mov	r7, r6
 800d24a:	42bb      	cmp	r3, r7
 800d24c:	460e      	mov	r6, r1
 800d24e:	d9f4      	bls.n	800d23a <_printf_i+0x11a>
 800d250:	2b08      	cmp	r3, #8
 800d252:	d10b      	bne.n	800d26c <_printf_i+0x14c>
 800d254:	6823      	ldr	r3, [r4, #0]
 800d256:	07de      	lsls	r6, r3, #31
 800d258:	d508      	bpl.n	800d26c <_printf_i+0x14c>
 800d25a:	6923      	ldr	r3, [r4, #16]
 800d25c:	6861      	ldr	r1, [r4, #4]
 800d25e:	4299      	cmp	r1, r3
 800d260:	bfde      	ittt	le
 800d262:	2330      	movle	r3, #48	; 0x30
 800d264:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d268:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d26c:	1b52      	subs	r2, r2, r5
 800d26e:	6122      	str	r2, [r4, #16]
 800d270:	f8cd a000 	str.w	sl, [sp]
 800d274:	464b      	mov	r3, r9
 800d276:	aa03      	add	r2, sp, #12
 800d278:	4621      	mov	r1, r4
 800d27a:	4640      	mov	r0, r8
 800d27c:	f7ff fee2 	bl	800d044 <_printf_common>
 800d280:	3001      	adds	r0, #1
 800d282:	d14c      	bne.n	800d31e <_printf_i+0x1fe>
 800d284:	f04f 30ff 	mov.w	r0, #4294967295
 800d288:	b004      	add	sp, #16
 800d28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d28e:	4835      	ldr	r0, [pc, #212]	; (800d364 <_printf_i+0x244>)
 800d290:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d294:	6829      	ldr	r1, [r5, #0]
 800d296:	6823      	ldr	r3, [r4, #0]
 800d298:	f851 6b04 	ldr.w	r6, [r1], #4
 800d29c:	6029      	str	r1, [r5, #0]
 800d29e:	061d      	lsls	r5, r3, #24
 800d2a0:	d514      	bpl.n	800d2cc <_printf_i+0x1ac>
 800d2a2:	07df      	lsls	r7, r3, #31
 800d2a4:	bf44      	itt	mi
 800d2a6:	f043 0320 	orrmi.w	r3, r3, #32
 800d2aa:	6023      	strmi	r3, [r4, #0]
 800d2ac:	b91e      	cbnz	r6, 800d2b6 <_printf_i+0x196>
 800d2ae:	6823      	ldr	r3, [r4, #0]
 800d2b0:	f023 0320 	bic.w	r3, r3, #32
 800d2b4:	6023      	str	r3, [r4, #0]
 800d2b6:	2310      	movs	r3, #16
 800d2b8:	e7b0      	b.n	800d21c <_printf_i+0xfc>
 800d2ba:	6823      	ldr	r3, [r4, #0]
 800d2bc:	f043 0320 	orr.w	r3, r3, #32
 800d2c0:	6023      	str	r3, [r4, #0]
 800d2c2:	2378      	movs	r3, #120	; 0x78
 800d2c4:	4828      	ldr	r0, [pc, #160]	; (800d368 <_printf_i+0x248>)
 800d2c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2ca:	e7e3      	b.n	800d294 <_printf_i+0x174>
 800d2cc:	0659      	lsls	r1, r3, #25
 800d2ce:	bf48      	it	mi
 800d2d0:	b2b6      	uxthmi	r6, r6
 800d2d2:	e7e6      	b.n	800d2a2 <_printf_i+0x182>
 800d2d4:	4615      	mov	r5, r2
 800d2d6:	e7bb      	b.n	800d250 <_printf_i+0x130>
 800d2d8:	682b      	ldr	r3, [r5, #0]
 800d2da:	6826      	ldr	r6, [r4, #0]
 800d2dc:	6961      	ldr	r1, [r4, #20]
 800d2de:	1d18      	adds	r0, r3, #4
 800d2e0:	6028      	str	r0, [r5, #0]
 800d2e2:	0635      	lsls	r5, r6, #24
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	d501      	bpl.n	800d2ec <_printf_i+0x1cc>
 800d2e8:	6019      	str	r1, [r3, #0]
 800d2ea:	e002      	b.n	800d2f2 <_printf_i+0x1d2>
 800d2ec:	0670      	lsls	r0, r6, #25
 800d2ee:	d5fb      	bpl.n	800d2e8 <_printf_i+0x1c8>
 800d2f0:	8019      	strh	r1, [r3, #0]
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	6123      	str	r3, [r4, #16]
 800d2f6:	4615      	mov	r5, r2
 800d2f8:	e7ba      	b.n	800d270 <_printf_i+0x150>
 800d2fa:	682b      	ldr	r3, [r5, #0]
 800d2fc:	1d1a      	adds	r2, r3, #4
 800d2fe:	602a      	str	r2, [r5, #0]
 800d300:	681d      	ldr	r5, [r3, #0]
 800d302:	6862      	ldr	r2, [r4, #4]
 800d304:	2100      	movs	r1, #0
 800d306:	4628      	mov	r0, r5
 800d308:	f7f2 ff82 	bl	8000210 <memchr>
 800d30c:	b108      	cbz	r0, 800d312 <_printf_i+0x1f2>
 800d30e:	1b40      	subs	r0, r0, r5
 800d310:	6060      	str	r0, [r4, #4]
 800d312:	6863      	ldr	r3, [r4, #4]
 800d314:	6123      	str	r3, [r4, #16]
 800d316:	2300      	movs	r3, #0
 800d318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d31c:	e7a8      	b.n	800d270 <_printf_i+0x150>
 800d31e:	6923      	ldr	r3, [r4, #16]
 800d320:	462a      	mov	r2, r5
 800d322:	4649      	mov	r1, r9
 800d324:	4640      	mov	r0, r8
 800d326:	47d0      	blx	sl
 800d328:	3001      	adds	r0, #1
 800d32a:	d0ab      	beq.n	800d284 <_printf_i+0x164>
 800d32c:	6823      	ldr	r3, [r4, #0]
 800d32e:	079b      	lsls	r3, r3, #30
 800d330:	d413      	bmi.n	800d35a <_printf_i+0x23a>
 800d332:	68e0      	ldr	r0, [r4, #12]
 800d334:	9b03      	ldr	r3, [sp, #12]
 800d336:	4298      	cmp	r0, r3
 800d338:	bfb8      	it	lt
 800d33a:	4618      	movlt	r0, r3
 800d33c:	e7a4      	b.n	800d288 <_printf_i+0x168>
 800d33e:	2301      	movs	r3, #1
 800d340:	4632      	mov	r2, r6
 800d342:	4649      	mov	r1, r9
 800d344:	4640      	mov	r0, r8
 800d346:	47d0      	blx	sl
 800d348:	3001      	adds	r0, #1
 800d34a:	d09b      	beq.n	800d284 <_printf_i+0x164>
 800d34c:	3501      	adds	r5, #1
 800d34e:	68e3      	ldr	r3, [r4, #12]
 800d350:	9903      	ldr	r1, [sp, #12]
 800d352:	1a5b      	subs	r3, r3, r1
 800d354:	42ab      	cmp	r3, r5
 800d356:	dcf2      	bgt.n	800d33e <_printf_i+0x21e>
 800d358:	e7eb      	b.n	800d332 <_printf_i+0x212>
 800d35a:	2500      	movs	r5, #0
 800d35c:	f104 0619 	add.w	r6, r4, #25
 800d360:	e7f5      	b.n	800d34e <_printf_i+0x22e>
 800d362:	bf00      	nop
 800d364:	0800d7c1 	.word	0x0800d7c1
 800d368:	0800d7d2 	.word	0x0800d7d2

0800d36c <__sread>:
 800d36c:	b510      	push	{r4, lr}
 800d36e:	460c      	mov	r4, r1
 800d370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d374:	f000 f894 	bl	800d4a0 <_read_r>
 800d378:	2800      	cmp	r0, #0
 800d37a:	bfab      	itete	ge
 800d37c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d37e:	89a3      	ldrhlt	r3, [r4, #12]
 800d380:	181b      	addge	r3, r3, r0
 800d382:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d386:	bfac      	ite	ge
 800d388:	6563      	strge	r3, [r4, #84]	; 0x54
 800d38a:	81a3      	strhlt	r3, [r4, #12]
 800d38c:	bd10      	pop	{r4, pc}

0800d38e <__swrite>:
 800d38e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d392:	461f      	mov	r7, r3
 800d394:	898b      	ldrh	r3, [r1, #12]
 800d396:	05db      	lsls	r3, r3, #23
 800d398:	4605      	mov	r5, r0
 800d39a:	460c      	mov	r4, r1
 800d39c:	4616      	mov	r6, r2
 800d39e:	d505      	bpl.n	800d3ac <__swrite+0x1e>
 800d3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3a4:	2302      	movs	r3, #2
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	f000 f868 	bl	800d47c <_lseek_r>
 800d3ac:	89a3      	ldrh	r3, [r4, #12]
 800d3ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d3b6:	81a3      	strh	r3, [r4, #12]
 800d3b8:	4632      	mov	r2, r6
 800d3ba:	463b      	mov	r3, r7
 800d3bc:	4628      	mov	r0, r5
 800d3be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d3c2:	f000 b817 	b.w	800d3f4 <_write_r>

0800d3c6 <__sseek>:
 800d3c6:	b510      	push	{r4, lr}
 800d3c8:	460c      	mov	r4, r1
 800d3ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3ce:	f000 f855 	bl	800d47c <_lseek_r>
 800d3d2:	1c43      	adds	r3, r0, #1
 800d3d4:	89a3      	ldrh	r3, [r4, #12]
 800d3d6:	bf15      	itete	ne
 800d3d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800d3da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d3de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d3e2:	81a3      	strheq	r3, [r4, #12]
 800d3e4:	bf18      	it	ne
 800d3e6:	81a3      	strhne	r3, [r4, #12]
 800d3e8:	bd10      	pop	{r4, pc}

0800d3ea <__sclose>:
 800d3ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3ee:	f000 b813 	b.w	800d418 <_close_r>
	...

0800d3f4 <_write_r>:
 800d3f4:	b538      	push	{r3, r4, r5, lr}
 800d3f6:	4d07      	ldr	r5, [pc, #28]	; (800d414 <_write_r+0x20>)
 800d3f8:	4604      	mov	r4, r0
 800d3fa:	4608      	mov	r0, r1
 800d3fc:	4611      	mov	r1, r2
 800d3fe:	2200      	movs	r2, #0
 800d400:	602a      	str	r2, [r5, #0]
 800d402:	461a      	mov	r2, r3
 800d404:	f7f3 fa71 	bl	80008ea <_write>
 800d408:	1c43      	adds	r3, r0, #1
 800d40a:	d102      	bne.n	800d412 <_write_r+0x1e>
 800d40c:	682b      	ldr	r3, [r5, #0]
 800d40e:	b103      	cbz	r3, 800d412 <_write_r+0x1e>
 800d410:	6023      	str	r3, [r4, #0]
 800d412:	bd38      	pop	{r3, r4, r5, pc}
 800d414:	20010cec 	.word	0x20010cec

0800d418 <_close_r>:
 800d418:	b538      	push	{r3, r4, r5, lr}
 800d41a:	4d06      	ldr	r5, [pc, #24]	; (800d434 <_close_r+0x1c>)
 800d41c:	2300      	movs	r3, #0
 800d41e:	4604      	mov	r4, r0
 800d420:	4608      	mov	r0, r1
 800d422:	602b      	str	r3, [r5, #0]
 800d424:	f7f3 fa7d 	bl	8000922 <_close>
 800d428:	1c43      	adds	r3, r0, #1
 800d42a:	d102      	bne.n	800d432 <_close_r+0x1a>
 800d42c:	682b      	ldr	r3, [r5, #0]
 800d42e:	b103      	cbz	r3, 800d432 <_close_r+0x1a>
 800d430:	6023      	str	r3, [r4, #0]
 800d432:	bd38      	pop	{r3, r4, r5, pc}
 800d434:	20010cec 	.word	0x20010cec

0800d438 <_fstat_r>:
 800d438:	b538      	push	{r3, r4, r5, lr}
 800d43a:	4d07      	ldr	r5, [pc, #28]	; (800d458 <_fstat_r+0x20>)
 800d43c:	2300      	movs	r3, #0
 800d43e:	4604      	mov	r4, r0
 800d440:	4608      	mov	r0, r1
 800d442:	4611      	mov	r1, r2
 800d444:	602b      	str	r3, [r5, #0]
 800d446:	f7f3 fa78 	bl	800093a <_fstat>
 800d44a:	1c43      	adds	r3, r0, #1
 800d44c:	d102      	bne.n	800d454 <_fstat_r+0x1c>
 800d44e:	682b      	ldr	r3, [r5, #0]
 800d450:	b103      	cbz	r3, 800d454 <_fstat_r+0x1c>
 800d452:	6023      	str	r3, [r4, #0]
 800d454:	bd38      	pop	{r3, r4, r5, pc}
 800d456:	bf00      	nop
 800d458:	20010cec 	.word	0x20010cec

0800d45c <_isatty_r>:
 800d45c:	b538      	push	{r3, r4, r5, lr}
 800d45e:	4d06      	ldr	r5, [pc, #24]	; (800d478 <_isatty_r+0x1c>)
 800d460:	2300      	movs	r3, #0
 800d462:	4604      	mov	r4, r0
 800d464:	4608      	mov	r0, r1
 800d466:	602b      	str	r3, [r5, #0]
 800d468:	f7f3 fa77 	bl	800095a <_isatty>
 800d46c:	1c43      	adds	r3, r0, #1
 800d46e:	d102      	bne.n	800d476 <_isatty_r+0x1a>
 800d470:	682b      	ldr	r3, [r5, #0]
 800d472:	b103      	cbz	r3, 800d476 <_isatty_r+0x1a>
 800d474:	6023      	str	r3, [r4, #0]
 800d476:	bd38      	pop	{r3, r4, r5, pc}
 800d478:	20010cec 	.word	0x20010cec

0800d47c <_lseek_r>:
 800d47c:	b538      	push	{r3, r4, r5, lr}
 800d47e:	4d07      	ldr	r5, [pc, #28]	; (800d49c <_lseek_r+0x20>)
 800d480:	4604      	mov	r4, r0
 800d482:	4608      	mov	r0, r1
 800d484:	4611      	mov	r1, r2
 800d486:	2200      	movs	r2, #0
 800d488:	602a      	str	r2, [r5, #0]
 800d48a:	461a      	mov	r2, r3
 800d48c:	f7f3 fa70 	bl	8000970 <_lseek>
 800d490:	1c43      	adds	r3, r0, #1
 800d492:	d102      	bne.n	800d49a <_lseek_r+0x1e>
 800d494:	682b      	ldr	r3, [r5, #0]
 800d496:	b103      	cbz	r3, 800d49a <_lseek_r+0x1e>
 800d498:	6023      	str	r3, [r4, #0]
 800d49a:	bd38      	pop	{r3, r4, r5, pc}
 800d49c:	20010cec 	.word	0x20010cec

0800d4a0 <_read_r>:
 800d4a0:	b538      	push	{r3, r4, r5, lr}
 800d4a2:	4d07      	ldr	r5, [pc, #28]	; (800d4c0 <_read_r+0x20>)
 800d4a4:	4604      	mov	r4, r0
 800d4a6:	4608      	mov	r0, r1
 800d4a8:	4611      	mov	r1, r2
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	602a      	str	r2, [r5, #0]
 800d4ae:	461a      	mov	r2, r3
 800d4b0:	f7f3 f9fe 	bl	80008b0 <_read>
 800d4b4:	1c43      	adds	r3, r0, #1
 800d4b6:	d102      	bne.n	800d4be <_read_r+0x1e>
 800d4b8:	682b      	ldr	r3, [r5, #0]
 800d4ba:	b103      	cbz	r3, 800d4be <_read_r+0x1e>
 800d4bc:	6023      	str	r3, [r4, #0]
 800d4be:	bd38      	pop	{r3, r4, r5, pc}
 800d4c0:	20010cec 	.word	0x20010cec

0800d4c4 <_init>:
 800d4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4c6:	bf00      	nop
 800d4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4ca:	bc08      	pop	{r3}
 800d4cc:	469e      	mov	lr, r3
 800d4ce:	4770      	bx	lr

0800d4d0 <_fini>:
 800d4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4d2:	bf00      	nop
 800d4d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4d6:	bc08      	pop	{r3}
 800d4d8:	469e      	mov	lr, r3
 800d4da:	4770      	bx	lr
